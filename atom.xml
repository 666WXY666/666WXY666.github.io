<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>苇名一心的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://666wxy666.github.io/"/>
  <updated>2020-05-18T13:02:19.553Z</updated>
  <id>https://666wxy666.github.io/</id>
  
  <author>
    <name>苇名一心</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机系统结构 实验 指令调度与延迟分支</title>
    <link href="https://666wxy666.github.io/2020/05/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C-%E6%8C%87%E4%BB%A4%E8%B0%83%E5%BA%A6%E4%B8%8E%E5%BB%B6%E8%BF%9F%E5%88%86%E6%94%AF/"/>
    <id>https://666wxy666.github.io/2020/05/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C-%E6%8C%87%E4%BB%A4%E8%B0%83%E5%BA%A6%E4%B8%8E%E5%BB%B6%E8%BF%9F%E5%88%86%E6%94%AF/</id>
    <published>2020-05-18T12:51:47.994Z</published>
    <updated>2020-05-18T13:02:19.553Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文是关于计算机系统结构实验五，指令调度与延迟分支。</p><a id="more"></a><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h2><ol><li>加深对指令调度技术的理解。</li><li>加深对延迟分支技术的理解。</li><li>熟练掌握用指令调度技术解决流水线中的数据冲突的方法。</li><li>进一步理解指令调度技术对 CPU 性能的改进。</li><li>进一步理解延迟分支技术对 CPU 性能的改进。</li></ol><h2 id="二、实验步骤及结果分析"><a href="#二、实验步骤及结果分析" class="headerlink" title="二、实验步骤及结果分析"></a>二、实验步骤及结果分析</h2><h3 id="1、启动-MIPSsim。"><a href="#1、启动-MIPSsim。" class="headerlink" title="1、启动 MIPSsim。"></a>1、启动 MIPSsim。</h3><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507175654.jpg" alt="2020-05-07_175631" style="zoom:50%"><h3 id="2、根据实验2的相关知识中关于流水线各段操作的描述，进一步理解流水线窗口中各段的功能，掌握各流水线寄存器的含义（双击各段，就可以看到各流水线寄存器中的内容）。"><a href="#2、根据实验2的相关知识中关于流水线各段操作的描述，进一步理解流水线窗口中各段的功能，掌握各流水线寄存器的含义（双击各段，就可以看到各流水线寄存器中的内容）。" class="headerlink" title="2、根据实验2的相关知识中关于流水线各段操作的描述，进一步理解流水线窗口中各段的功能，掌握各流水线寄存器的含义（双击各段，就可以看到各流水线寄存器中的内容）。"></a>2、根据实验2的相关知识中关于流水线各段操作的描述，进一步理解流水线窗口中各段的功能，掌握各流水线寄存器的含义（双击各段，就可以看到各流水线寄存器中的内容）。</h3><h4 id="①IF段："><a href="#①IF段：" class="headerlink" title="①IF段："></a>①IF段：</h4><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517210511.jpg" alt="2020-05-17_210337" style="zoom:80%"><h4 id="②ID段："><a href="#②ID段：" class="headerlink" title="②ID段："></a>②ID段：</h4><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517210543.jpg" alt="2020-05-17_210358" style="zoom:80%"><h4 id="③EX段："><a href="#③EX段：" class="headerlink" title="③EX段："></a>③EX段：</h4><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517210648.jpg" alt="2020-05-17_210409" style="zoom:80%"><h4 id="④MEM段："><a href="#④MEM段：" class="headerlink" title="④MEM段："></a>④MEM段：</h4><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517210657.jpg" alt="2020-05-17_210417" style="zoom:80%"><h4 id="⑤WB段："><a href="#⑤WB段：" class="headerlink" title="⑤WB段："></a>⑤WB段：</h4><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517210729.jpg" alt="2020-05-17_210423" style="zoom:80%"><h3 id="3、选择“配置”→“流水方式”选项，使模拟器工作在流水方式下。"><a href="#3、选择“配置”→“流水方式”选项，使模拟器工作在流水方式下。" class="headerlink" title="3、选择“配置”→“流水方式”选项，使模拟器工作在流水方式下。"></a>3、选择“配置”→“流水方式”选项，使模拟器工作在流水方式下。</h3><h3 id="4、用指令调度技术解决流水线中的结构冲突与数据冲突："><a href="#4、用指令调度技术解决流水线中的结构冲突与数据冲突：" class="headerlink" title="4、用指令调度技术解决流水线中的结构冲突与数据冲突："></a>4、用指令调度技术解决流水线中的结构冲突与数据冲突：</h3><ol><li><p>启动 MIPSsim。用 MIPSsim 的“文件”-&gt;“载入程序”选项来加载 schedule.s（在模拟器所在文件夹下的“样例程序”文件夹中）。关闭定向功能，这是通过“配置“-&gt;”定向“选项来实现的。执行所载入的程序，通过查看统计数据和时钟周期图，找出并记录程序执行过程中各种冲突发生的次数，发生冲突的指令组合以及程序执行的总时钟周期数。</p><p>载入的程序：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517211348.jpg" alt="2020-05-17_211340" style="zoom:80%"><p>执行结果：</p><ul><li><p>寄存器的值</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517211749.jpg" alt="2020-05-17_211604" style="zoom:80%"></li><li><p>部分时钟周期图</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517211814.jpg" alt="2020-05-17_211620" style="zoom:80%"></li><li><p>统计</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517211909.jpg" alt="2020-05-17_211525" style="zoom:80%"><p>发现总共执行了33个周期，执行了15条指令，8次RAW停顿，RAW停顿有16个周期，RAW停顿占周期总数的百分比为48.48485%，所有的停顿为17个周期，占周期总数的百分比为51.51515%。<br>$$<br>吞吐率TP_1=\frac{15}{33\Delta{t}}<br>$$</p><p>$$<br>加速比S_1=\frac{15\times{5\Delta{t}}}{33\Delta{t}}\approx{2.27}<br>$$</p><p>冲突的指令组合：</p><p>1-1和2-1，2-1和2-2，2-2和2-3，3-1和3-2，4-1和4-2，4-2和4-3，4-3和4-4，5-1和5-2共8对冲突，1-5组组内冲突，组间没有关联。</p><p>schedule.s：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">.text</span><br><span class="line">main:</span><br><span class="line">ADDIU  $r1,$r0,A# 1-1</span><br><span class="line"></span><br><span class="line">LW     $r2,0($r1)# 2-1</span><br><span class="line">ADD    $r4,$r0,$r2# 2-2</span><br><span class="line">SW     $r4,0($r1)# 2-3</span><br><span class="line"></span><br><span class="line">LW     $r6,4($r1)# 3-1</span><br><span class="line">ADD    $r8,$r6,$r1# 3-2</span><br><span class="line"></span><br><span class="line">MUL    $r12,$r10,$r1# 4-1</span><br><span class="line">ADD    $r16,$r12,$r1# 4-2</span><br><span class="line">ADD    $r18,$r16,$r1# 4-3</span><br><span class="line">SW     $r18,16($r1)# 4-4</span><br><span class="line"></span><br><span class="line">LW     $r20,8($r1)# 5-1</span><br><span class="line">MUL    $r22,$r20,$r14# 5-2</span><br><span class="line"></span><br><span class="line">MUL    $r24,$r26,$r14# 6-1</span><br><span class="line"></span><br><span class="line">TEQ    $r0,$r0# 7-1</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">A: </span><br><span class="line">.word 4,6,8</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="2"><li><p>自己采用调度技术对程序进行指令调度，消除冲突（自己修改源程序）。将调度（修改）后的程序重新命名为 afer-schedule.s。（注意：调度方法灵活多样，在保证程序正确性的前提下自己随意调度，尽量减少冲突即可，不要求要达到最优。）载入 afer-schedule.s，执行该程序，观察程序在流水线中的执行情况，记录程序执行的总时钟周期数。 比较调度前和调度后的性能，论述指令调度对提高 CPU 性能的作用。</p><p><strong><em>PS：调度后的程序见附录。</em></strong></p><p>载入的程序：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517213848.jpg" alt="2020-05-17_213739" style="zoom:80%"><p>执行结果：</p><ul><li><p>寄存器的值</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517213909.jpg" alt="2020-05-17_213757" style="zoom:80%"><p>与不调度前完全一致，调度没有改变结果，调度正确。</p></li><li><p>时钟周期图</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517214016.jpg" alt="2020-05-17_213828" style="zoom:80%"></li><li><p>统计</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517213944.jpg" alt="2020-05-17_213812" style="zoom:80%"><p>发现总共执行了18个周期，执行了15条指令，1次RAW停顿，RAW停顿有1个周期，RAW停顿占周期总数的百分比为5.555555%，较没有静态调度的48.48485%少了很多，所有的停顿为2个周期，占周期总数的百分比为11.111111%，较没有静态调度的51.51515%也少了很多。<br>$$<br>吞吐率TP_2=\frac{15}{18\Delta{t}}<br>$$</p><p>$$<br>加速比S_2=\frac{15\times{5\Delta{t}}}{18\Delta{t}}\approx{4.17}<br>$$</p><p>吞吐率和加速比是没有静态调度时的$\frac{33}{18}\approx{1.83}$倍。</p></li></ul></li></ol><h3 id="5、用延迟分支技术减少分支指令对性能的影响："><a href="#5、用延迟分支技术减少分支指令对性能的影响：" class="headerlink" title="5、用延迟分支技术减少分支指令对性能的影响："></a>5、用延迟分支技术减少分支指令对性能的影响：</h3><ol><li><p>在 MIPSsim 中载入 branch.s 样例程序（在本模拟器目录的“样例程序”文件夹中。关闭延迟分支功能。这是通过在“配置”-&gt;“延迟槽”选项来实现的。执行该程序，观察并记录发生分支延迟的时刻，记录该程序执行的总时钟周期数。</p><ol><li><p>载入的程序：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517220107.jpg" alt="2020-05-17_215518" style="zoom:80%"><p>执行结果：</p><ul><li><p>寄存器的值</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517220117.jpg" alt="2020-05-17_215540" style="zoom:80%"></li><li><p>部分时钟周期图</p><p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517220131.jpg" alt="2020-05-17_215609"></p></li><li><p>统计</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517220148.jpg" alt="2020-05-17_215554" style="zoom:80%"><p>发现总共执行了38个周期，执行了18条指令，8次RAW停顿，RAW停顿有16个周期，RAW停顿占周期总数的百分比为42.10526%，控制停顿有2个周期，占周期总数的百分比为5.263158%，所有的停顿为19个周期，占周期总数的百分比为50%。发生分支延迟的时刻为第15个周期，延迟了2个周期。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517220910.png" alt="img" style="zoom:80%"> $$ 吞吐率TP_1=\frac{18}{38\Delta{t}} $$<p>$$<br>加速比S_1=\frac{18\times{5\Delta{t}}}{38\Delta{t}}\approx{2.37}<br>$$</p><p>冲突的指令组合：</p><p>2-1和2-2，2-2和2-3，3-1和3-2，3-2和3-3共4对冲突，2组和3组组内冲突，组间没有关联。</p><p>branch.s：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.text</span><br><span class="line">main:</span><br><span class="line">ADDI  $r2,$r0,1024# 1-1</span><br><span class="line">ADD   $r3,$r0,$r0# 1-2</span><br><span class="line">ADDI  $r4,$r0,8# 1-3</span><br><span class="line"></span><br><span class="line">loop:  </span><br><span class="line">LW    $r1,0($r2)# 2-1</span><br><span class="line">ADDI  $r1,$r1,1# 2-2</span><br><span class="line">SW    $r1,0($r2)# 2-3</span><br><span class="line"></span><br><span class="line">ADDI  $r3,$r3,4# 3-1</span><br><span class="line">SUB   $r5,$r4,$r3# 3-2</span><br><span class="line">BGTZ  $r5,loop# 3-3</span><br><span class="line"></span><br><span class="line">ADD   $r7,$r0,$r6# 4-1</span><br><span class="line"></span><br><span class="line">TEQ   $r0,$r0# 5-1</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ol><ol start="2"><li><p>假设延迟槽为一个，自己对 branch.s 程序进行指令调度（自己修改源程序），将调度后的程序重新命名为 delayed-branch.s。 载入 delayed-branch.s，打开延迟分支功能，执行该程序，观察其时钟周期图，记录程序执行的总时钟周期数。</p><ol start="2"><li><p><strong><em>PS：调度后的程序见附录。</em></strong></p><p>载入的程序：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517221827.jpg" alt="2020-05-17_221307" style="zoom:80%"><p>执行结果：</p><ul><li><p>寄存器的值</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517221840.jpg" alt="2020-05-17_221458" style="zoom:80%"><p>与不调度前完全一致，调度没有改变结果，调度正确。</p></li><li><p>部分时钟周期图</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517221906.jpg" alt="2020-05-17_221439" style="zoom:80%"></li><li><p>统计</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200517221920.jpg" alt="2020-05-17_221507" style="zoom:80%"><p>发现总共执行了25个周期，执行了19条指令，4次RAW停顿，RAW停顿有4个周期，RAW停顿占周期总数的百分比为16%，较没有静态调度的42.10526%少了很多，控制停顿有0个周期，占周期总数的百分比为0%，比没有使用延迟分支技术的5.263158%少了，所有的停顿为5个周期，占周期总数的百分比为20%，较没有静态调度和延迟分支技术的50%也减少了。可以发现使用延迟分支技术后，控制停顿消失了。<br>$$<br>吞吐率TP_2=\frac{19}{25\Delta{t}}<br>$$</p><p>$$<br>加速比S_2=\frac{19\times{5\Delta{t}}}{25\Delta{t}}={3.8}<br>$$</p><p>吞吐率和加速比是没有静态调度和延迟分支技术时的$\frac{19\times{38}}{25\times{18}}\approx{1.60}$倍。</p></li></ul></li></ol></li></ol><h2 id="四、实验结论"><a href="#四、实验结论" class="headerlink" title="四、实验结论"></a>四、实验结论</h2><p>​ 静态调度优化代码和定向技术都能在一定程度上减少甚至消除数据冲突，尤其是RAW停顿，可以很好地提高性能，但是这两种方法对分支控制停顿没有任何帮助。但是延迟分支技术是由编译器通过重排指令序列，在分支指令后紧跟一条或几条延迟槽指令，不管分支是否成功，都顺序执行延迟槽中的指令，从而逻辑上“延长”分支指令的执行时间，减少甚至消除了控制停顿。因此这几种方法都能大幅度的减少停顿，从而提高CPU性能。</p><p>​ 在查看延迟分支技术的统计信息时，发现使用延迟分支技术比不使用延迟分支技术多执行了一条指令，可能是由于分支取消机制当分支的实际执行方向和事先所预测的一样时，执行分支延迟槽中的指令，否则就将分支延迟槽中的指令转化成一个空操作，这条指令确实已经执行了，只是分支条件判断完后发现不该执行，然后就将执行的回滚，因此比不使用延迟分支技术多执行了一条指令。</p><h2 id="五、附录"><a href="#五、附录" class="headerlink" title="五、附录"></a>五、附录</h2><h3 id="1、after-schedule-s"><a href="#1、after-schedule-s" class="headerlink" title="1、after-schedule.s"></a>1、after-schedule.s</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.text</span><br><span class="line">main:</span><br><span class="line">ADDIU  $r1,$r0,A# 1-1</span><br><span class="line">MUL    $r24,$r26,$r14# 6-1</span><br><span class="line"></span><br><span class="line">MUL    $r12,$r10,$r1# 4-1</span><br><span class="line">LW     $r2,0($r1)# 2-1</span><br><span class="line">LW     $r6,4($r1)# 3-1</span><br><span class="line"></span><br><span class="line">ADD    $r16,$r12,$r1# 4-2</span><br><span class="line">ADD    $r4,$r0,$r2# 2-2</span><br><span class="line">LW     $r20,8($r1)# 5-1</span><br><span class="line"></span><br><span class="line">ADD    $r18,$r16,$r1# 4-3</span><br><span class="line">SW     $r4,0($r1)# 2-3</span><br><span class="line">MUL    $r22,$r20,$r14# 5-2</span><br><span class="line"></span><br><span class="line">SW     $r18,16($r1)# 4-4</span><br><span class="line">ADD    $r8,$r6,$r1# 3-2</span><br><span class="line">TEQ    $r0,$r0# 7-1</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">A: </span><br><span class="line">.word 4,6,8</span><br></pre></td></tr></table></figure><h3 id="2、delay-branch-s"><a href="#2、delay-branch-s" class="headerlink" title="2、delay-branch.s"></a>2、delay-branch.s</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text</span><br><span class="line">main:</span><br><span class="line">ADDI  $r2,$r0,1024# 1-1</span><br><span class="line">ADD   $r3,$r0,$r0# 1-2</span><br><span class="line">ADDI  $r4,$r0,8# 1-3</span><br><span class="line"></span><br><span class="line">loop:  </span><br><span class="line">LW    $r1,0($r2)# 2-1</span><br><span class="line">ADDI  $r3,$r3,4# 3-1</span><br><span class="line">ADDI  $r1,$r1,1# 2-2</span><br><span class="line">SUB   $r5,$r4,$r3# 3-2</span><br><span class="line">SW    $r1,0($r2)# 2-3</span><br><span class="line">BGTZ  $r5,loop# 3-3</span><br><span class="line"></span><br><span class="line">ADD   $r7,$r0,$r6# 4-1</span><br><span class="line"></span><br><span class="line">TEQ   $r0,$r0# 5-1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是关于计算机系统结构实验五，指令调度与延迟分支。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机系统结构" scheme="https://666wxy666.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/"/>
    
      <category term="实验" scheme="https://666wxy666.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/%E5%AE%9E%E9%AA%8C/"/>
    
    
      <category term="实验" scheme="https://666wxy666.github.io/tags/%E5%AE%9E%E9%AA%8C/"/>
    
      <category term="计算机系统结构" scheme="https://666wxy666.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/"/>
    
      <category term="汇编" scheme="https://666wxy666.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
      <category term="MIPS" scheme="https://666wxy666.github.io/tags/MIPS/"/>
    
  </entry>
  
  <entry>
    <title>计算机系统结构 实验 使用MIPS指令实现冒泡排序法</title>
    <link href="https://666wxy666.github.io/2020/05/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C-%E4%BD%BF%E7%94%A8MIPS%E6%8C%87%E4%BB%A4%E5%AE%9E%E7%8E%B0%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E6%B3%95/"/>
    <id>https://666wxy666.github.io/2020/05/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C-%E4%BD%BF%E7%94%A8MIPS%E6%8C%87%E4%BB%A4%E5%AE%9E%E7%8E%B0%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E6%B3%95/</id>
    <published>2020-05-18T12:51:32.120Z</published>
    <updated>2020-05-18T12:59:55.210Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文是关于计算机系统结构实验四，使用MIPS指令实现冒泡排序法。</p><a id="more"></a><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h2><ol><li>掌握静态调度方法</li><li>增强汇编语言编程能力</li><li>学会使用模拟器中的定向功能进行优化</li></ol><h2 id="二、实验原理"><a href="#二、实验原理" class="headerlink" title="二、实验原理"></a>二、实验原理</h2><p>​ 通过编写MIPS汇编程序，实现冒泡排序的功能。在模拟器MIPSsim上执行所写的汇编程序，查看结果，判断所写的汇编程序是否正确。然后观察时钟周期图窗口的执行过程和冲突的指令，查看统计窗口的信息，来判断定向前后和优化前后的执行效率高低。</p><h2 id="三、实验步骤及结果分析"><a href="#三、实验步骤及结果分析" class="headerlink" title="三、实验步骤及结果分析"></a>三、实验步骤及结果分析</h2><h3 id="1、自行编写一个实现冒泡排序的汇编程序，该程序要求可以实现对一维整数数组进行冒泡排序。"><a href="#1、自行编写一个实现冒泡排序的汇编程序，该程序要求可以实现对一维整数数组进行冒泡排序。" class="headerlink" title="1、自行编写一个实现冒泡排序的汇编程序，该程序要求可以实现对一维整数数组进行冒泡排序。"></a>1、自行编写一个实现冒泡排序的汇编程序，该程序要求可以实现对一维整数数组进行冒泡排序。</h3><p>冒泡排序算法的运作如下：</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点， 最后的元素应该会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><p>要求数组长度不得小于10</p><p><strong><em>PS：汇编程序见附录。</em></strong></p><h3 id="2、启动-MIPSsim。"><a href="#2、启动-MIPSsim。" class="headerlink" title="2、启动 MIPSsim。"></a>2、启动 MIPSsim。</h3><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507175654.jpg" alt="2020-05-07_175631" style="zoom:50%"><h3 id="3、载入自己编写的程序，观察流水线输出结果。"><a href="#3、载入自己编写的程序，观察流水线输出结果。" class="headerlink" title="3、载入自己编写的程序，观察流水线输出结果。"></a>3、载入自己编写的程序，观察流水线输出结果。</h3><p>载入的代码：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200514192648.jpg" alt="2020-05-14_192636" style="zoom:80%"><p>执行结果：</p><ul><li><p>内存中的数组</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200514192757.jpg" alt="2020-05-14_192747" style="zoom:80%"><p>原数组是{5,4,11,3,7,1,10,6,8,9,2}，排序后是{1,2,3,4,5,6,7,8,9,10,11}，结果符合预期，说明编写的汇编程序正确。</p></li><li><p>部分时钟周期图</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200514211749.jpg" alt="2020-05-14_193022" style="zoom:80%"><p>可以看到有非常多的停顿，主要是DSUB命令与BGTZ命令的RAW停顿，还有一些控制停顿。</p></li><li><p>统计</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200514211802.jpg" alt="2020-05-14_193232" style="zoom:80%"><p>发现RAW停顿有417个周期，停顿次数非常多，可以进行优化。共执行了1076个周期，RAW停顿占周期总数的百分比为38.75465%，所有的停顿为537个周期，占周期总数的百分比为49.90706%，效率很低。<br>$$<br>吞吐率TP_1=\frac{538}{1076\Delta{t}}<br>$$</p><p>$$<br>加速比S_1=\frac{538\times{5\Delta{t}}}{1076\Delta{t}}={2.5}<br>$$</p></li></ul><h3 id="4、使用定向功能再次执行代码，与刚才执行结果进行比较，观察执行效率的不同。"><a href="#4、使用定向功能再次执行代码，与刚才执行结果进行比较，观察执行效率的不同。" class="headerlink" title="4、使用定向功能再次执行代码，与刚才执行结果进行比较，观察执行效率的不同。"></a>4、使用定向功能再次执行代码，与刚才执行结果进行比较，观察执行效率的不同。</h3><ul><li><p>内存中的数组</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200514193632.jpg" alt="2020-05-14_193627" style="zoom:80%"><p>结果正确。</p></li><li><p>部分时钟周期图</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200514211946.jpg" alt="2020-05-14_193708" style="zoom:80%"><p>在使用定向技术后，发现停顿明显减少。</p></li><li><p>统计</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200514211954.jpg" alt="2020-05-14_194050" style="zoom:80%"><p>发现RAW停顿有175个周期，停顿周期数比没有定向技术时的417个少了很多；</p><p>共执行了834个周期，比没有定向技术时的1076个也少了很多；</p><p>RAW停顿占周期总数的百分比为20.98321%，较没有定向技术时的38.75465%也减少了很多；</p><p>所有的停顿为295个周期，占周期总数的百分比为35.3717%，较没有定向技术时的49.90706%也减少了很多；</p><p>$$<br>吞吐率TP_2=\frac{538}{834\Delta{t}}<br>$$</p><p>$$<br>加速比S_2=\frac{538\times{5\Delta{t}}}{834\Delta{t}}\approx{3.23}<br>$$<br>吞吐率和加速比是没有定向技术时的$\frac{1076}{834}\approx{1.29}$倍。</p></li></ul><h3 id="5、采用静态调度方法重排指令序列，减少相关，优化程序"><a href="#5、采用静态调度方法重排指令序列，减少相关，优化程序" class="headerlink" title="5、采用静态调度方法重排指令序列，减少相关，优化程序"></a>5、采用静态调度方法重排指令序列，减少相关，优化程序</h3><p>因为主要是DSUB命令与BGTZ命令的RAW停顿，分支指令的操作数需要用到前面的结果，因此将后面pass中执行的<code>ADDIU $r4, $r4, 1</code>和<code>DSUB $r8, $r2, $r4</code>拿到loop2中执行，从而减少RAW停顿。</p><p><strong><em>PS：静态调度后的汇编程序见附录。</em></strong></p><ul><li><p>载入代码</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200514205322.jpg" alt="2020-05-14_205303" style="zoom:80%"></li><li><p>内存中的数组</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200514205458.jpg" alt="2020-05-14_205419" style="zoom:80%"><p>结果正确。</p></li><li><p>部分时钟周期图</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200514212233.jpg" alt="2020-05-14_211607" style="zoom:80%"><p>在使用静态调度后，发现停顿少了很多。</p></li><li><p>统计</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200514212255.jpg" alt="2020-05-14_211624" style="zoom:80%"><p>发现RAW停顿有142个周期，停顿周期数比没有静态调度时的417个少了很多；</p><p>共执行了801个周期，比没有静态调度时的1076个也少了很多；</p><p>RAW停顿占周期总数的百分比为17.72784%，较没有静态调度时的38.75465%也减少了很多；</p><p>所有的停顿为262个周期，占周期总数的百分比为32.70911%，较没有静态调度时的49.90706%也减少了很多；</p><p>$$<br>吞吐率TP_3=\frac{538}{801\Delta{t}}<br>$$</p><p>$$<br>加速比S_3=\frac{538\times{5\Delta{t}}}{801\Delta{t}}\approx{3.36}<br>$$</p><p>吞吐率和加速比是没有静态调度时的$\frac{1076}{801}\approx{1.34}$倍。</p></li></ul><h3 id="6、对优化后的程序使用定向功能执行，与刚才执行结果进行比较，观察执行效率的不同。"><a href="#6、对优化后的程序使用定向功能执行，与刚才执行结果进行比较，观察执行效率的不同。" class="headerlink" title="6、对优化后的程序使用定向功能执行，与刚才执行结果进行比较，观察执行效率的不同。"></a>6、对优化后的程序使用定向功能执行，与刚才执行结果进行比较，观察执行效率的不同。</h3><ul><li><p>内存中的数组</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200514205458.jpg" alt="2020-05-14_205419" style="zoom:80%"><p>结果正确。</p></li><li><p>部分时钟周期图</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200514212858.jpg" alt="2020-05-14_211701" style="zoom:80%"><p>在使用静态调度和定向技术后，发现所有的RAW停顿几乎没有了，几乎只剩下了控制停顿。</p></li><li><p>统计</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200514212914.jpg" alt="2020-05-14_211714" style="zoom:80%"><p>发现RAW停顿有10个周期，停顿周期数比没有静态调度和定向技术时的417个少了非常多；</p><p>共执行了669个周期，比没有静态调度和定向技术时的1076个也少了非常多；</p><p>RAW停顿占周期总数的百分比为1.494768%，较没有静态调度和定向技术时的38.75465%也减少了非常多；</p><p>所有的停顿为130个周期，占周期总数的百分比为19.43199%，较没有静态调度和定向技术时的49.90706%也减少了很多；</p><p>$$<br>吞吐率TP_4=\frac{538}{669\Delta{t}}<br>$$</p><p>$$<br>加速比S_4=\frac{538\times{5\Delta{t}}}{669\Delta{t}}\approx{4.02}<br>$$</p><p>吞吐率和加速比是没有静态调度和定向技术时的$\frac{1076}{669}\approx{1.61}$倍。</p></li></ul><h2 id="四、实验遇到的问题"><a href="#四、实验遇到的问题" class="headerlink" title="四、实验遇到的问题"></a>四、实验遇到的问题</h2><p>​ 本次实验中遇到了一个问题，如果main到下一个标签（比如loop1）只有一行汇编代码，在载入程序时，loop1的基地址就会和main重合，变为0x00000000，这样就导致loop1被覆盖，使载入的程序与自己编写的汇编程序不符，产生错误或者结果出错。但是如果&gt;=2行汇编代码就不会有问题，我怀疑是MIPSsim程序的bug。</p><h2 id="五、附录"><a href="#五、附录" class="headerlink" title="五、附录"></a>五、附录</h2><h3 id="1、初始的汇编代码"><a href="#1、初始的汇编代码" class="headerlink" title="1、初始的汇编代码"></a>1、初始的汇编代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">.text</span><br><span class="line">main:</span><br><span class="line">ADDIU $r1, $r0, 11# 数组长度n&#x3D;11</span><br><span class="line">ADDIU $r2, $r1, -1# 外循环i&#x3D;n-1&#x3D;10</span><br><span class="line"></span><br><span class="line">loop1:</span><br><span class="line">ADDIU $r3, $r0, array# 数组起始地址</span><br><span class="line">ADDIU $r4, $r0, 0# 内循环j&#x3D;0</span><br><span class="line"></span><br><span class="line">loop2:</span><br><span class="line">LW $r5, 0($r3)# a[j]</span><br><span class="line">LW $r6, 4($r3)# a[j+1]</span><br><span class="line">DSUB $r7, $r6, $r5# a[j+1]-a[j]</span><br><span class="line">BGTZ $r7, pass# a[j+1]&gt;a[j]，不交换，跳到pass；</span><br><span class="line"></span><br><span class="line">SW $r6, 0($r3)# a[j+1]&lt;a[j]，交换</span><br><span class="line">SW $r5, 4($r3)</span><br><span class="line"></span><br><span class="line">pass:</span><br><span class="line">ADDIU $r4, $r4, 1# j++</span><br><span class="line">ADDIU $r3, $r3, 4# 取数组的下一个元素</span><br><span class="line">DSUB $r8, $r2, $r4# i-j</span><br><span class="line">BGTZ $r8, loop2# i&gt;j，跳转到loop2，继续内循环</span><br><span class="line"></span><br><span class="line">ADDIU $r2, $r2, -1# i--</span><br><span class="line">BGTZ $r2, loop1# i&gt;0，跳转到loop1，继续外循环</span><br><span class="line"></span><br><span class="line">TEQ $r0, $r0</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">array: .word 5,4,11,3,7,1,10,6,8,9,2</span><br></pre></td></tr></table></figure><h3 id="2、经过静态调度后的汇编代码"><a href="#2、经过静态调度后的汇编代码" class="headerlink" title="2、经过静态调度后的汇编代码"></a>2、经过静态调度后的汇编代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">.text</span><br><span class="line">main:</span><br><span class="line">ADDIU $r1, $r0, 11# 数组长度n&#x3D;11</span><br><span class="line">ADDIU $r2, $r1, -1# 外循环i&#x3D;n-1&#x3D;10</span><br><span class="line"></span><br><span class="line">loop1:</span><br><span class="line">ADDIU $r3, $r0, array# 数组起始地址</span><br><span class="line">ADDIU $r4, $r0, 0# 内循环j&#x3D;0</span><br><span class="line"></span><br><span class="line">loop2:</span><br><span class="line">LW $r5, 0($r3)# a[j]</span><br><span class="line">LW $r6, 4($r3)# a[j+1]</span><br><span class="line">ADDIU $r4, $r4, 1# j++</span><br><span class="line">DSUB $r7, $r6, $r5# a[j+1]-a[j]</span><br><span class="line">DSUB $r8, $r2, $r4# i-j</span><br><span class="line">BGTZ $r7, pass# a[j+1]&gt;a[j]，不交换，跳到pass；</span><br><span class="line"></span><br><span class="line">SW $r6, 0($r3)# a[j+1]&lt;a[j]，交换</span><br><span class="line">SW $r5, 4($r3)</span><br><span class="line"></span><br><span class="line">pass:</span><br><span class="line">ADDIU $r3, $r3, 4# 取数组的下一个元素</span><br><span class="line">BGTZ $r8, loop2# i&gt;j，跳转到loop2，继续内循环</span><br><span class="line"></span><br><span class="line">ADDIU $r2, $r2, -1# i--</span><br><span class="line">BGTZ $r2, loop1# i&gt;0，跳转到loop1，继续外循环</span><br><span class="line"></span><br><span class="line">TEQ $r0, $r0</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">array: .word 5,4,11,3,7,1,10,6,8,9,2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是关于计算机系统结构实验四，使用MIPS指令实现冒泡排序法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机系统结构" scheme="https://666wxy666.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/"/>
    
      <category term="实验" scheme="https://666wxy666.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/%E5%AE%9E%E9%AA%8C/"/>
    
    
      <category term="实验" scheme="https://666wxy666.github.io/tags/%E5%AE%9E%E9%AA%8C/"/>
    
      <category term="计算机系统结构" scheme="https://666wxy666.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/"/>
    
      <category term="汇编" scheme="https://666wxy666.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
      <category term="MIPS" scheme="https://666wxy666.github.io/tags/MIPS/"/>
    
  </entry>
  
  <entry>
    <title>计算机系统结构 实验 使用MIPS指令实现求两个数组的点积</title>
    <link href="https://666wxy666.github.io/2020/05/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C-%E4%BD%BF%E7%94%A8MIPS%E6%8C%87%E4%BB%A4%E5%AE%9E%E7%8E%B0%E6%B1%82%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E7%82%B9%E7%A7%AF/"/>
    <id>https://666wxy666.github.io/2020/05/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C-%E4%BD%BF%E7%94%A8MIPS%E6%8C%87%E4%BB%A4%E5%AE%9E%E7%8E%B0%E6%B1%82%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E7%82%B9%E7%A7%AF/</id>
    <published>2020-05-18T12:51:25.120Z</published>
    <updated>2020-05-18T12:57:55.901Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文是关于计算机系统结构实验三，使用MIPS指令实现求两个数组的点积。</p><a id="more"></a><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h2><ol><li>通过实验熟悉实验 1 和实验 2 的内容。</li><li>增强汇编语言编程能力。</li><li>学会使用模拟器中的定向功能进行优化。</li><li>了解对代码进行优化的方法。</li></ol><h2 id="二、实验原理"><a href="#二、实验原理" class="headerlink" title="二、实验原理"></a>二、实验原理</h2><p>​ 通过编写MIPS汇编程序，实现向量点积的功能。在模拟器MIPSsim上执行所写的汇编程序，连续执行，查看寄存器相关结果，判断所写的汇编程序是否正确。然后观察时钟周期图窗口的执行过程和冲突的指令，查看统计窗口的信息，来判断定向前后和优化前后的执行效率高低。</p><h2 id="三、实验步骤及结果分析"><a href="#三、实验步骤及结果分析" class="headerlink" title="三、实验步骤及结果分析"></a>三、实验步骤及结果分析</h2><h3 id="1、自行编写一个计算两个向量点积的汇编程序，该程序要求可以实现求两个向量点积计算后的结果。"><a href="#1、自行编写一个计算两个向量点积的汇编程序，该程序要求可以实现求两个向量点积计算后的结果。" class="headerlink" title="1、自行编写一个计算两个向量点积的汇编程序，该程序要求可以实现求两个向量点积计算后的结果。"></a>1、自行编写一个计算两个向量点积的汇编程序，该程序要求可以实现求两个向量点积计算后的结果。</h3><p>向量的点积：假设有两个 n 维向量 a、b，则 a 与 b 的点积为：<br>$$<br>a{\cdot}b=\sum_{i=1}^na_ib_i=a_1b_1+a_2b_2+\cdots+a_nb_n<br>$$<br>两个向量元素使用数组进行数据存储，要求向量的维度不得小于10</p><p><strong><em>PS：汇编程序见附录。</em></strong></p><h3 id="2、启动-MIPSsim。"><a href="#2、启动-MIPSsim。" class="headerlink" title="2、启动 MIPSsim。"></a>2、启动 MIPSsim。</h3><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507175654.jpg" alt="2020-05-07_175631" style="zoom:50%"><h3 id="3、载入自己编写的程序，观察流水线输出结果。"><a href="#3、载入自己编写的程序，观察流水线输出结果。" class="headerlink" title="3、载入自己编写的程序，观察流水线输出结果。"></a>3、载入自己编写的程序，观察流水线输出结果。</h3><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507175822.jpg" alt="2020-05-07_175742" style="zoom:50%"><p>载入的代码：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507175853.jpg" alt="2020-05-07_175807" style="zoom:80%"><p>执行：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507175940.jpg" alt="2020-05-07_175927" style="zoom:50%"><p>执行到结束：</p><ul><li><p>寄存器</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507180201.jpg" alt="2020-05-07_180059" style="zoom:80%"><p>我编写的汇编程序是向量$(1,2,3,4,5,6,7,8,9,10,11,12)\cdot(1,2,3,4,5,6,7,8,9,10,11,12)$=650，R7为结果寄存器，发现结果符合预期，说明编写的汇编程序正确。</p></li><li><p>时钟周期图</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507180230.jpg" alt="2020-05-07_180040" style="zoom:50%"><p>可以看到有较多停顿，主要是LW命令与MUL命令，MUL命令与ADD命令和一些控制停顿。</p></li><li><p>统计</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507180242.jpg" alt="2020-05-07_180112" style="zoom:80%"><p>发现RAW停顿有72个周期，停顿次数较多，可以进行优化。共执行了187个周期，RAW停顿占周期总数的百分比为38.50267%，所有的停顿为84个周期，占周期总数的百分比为44.91978%，效率很低。<br>$$<br>吞吐率TP_1=\frac{102}{187\Delta{t}}<br>$$</p><p>$$<br>加速比S_1=\frac{102\times{5\Delta{t}}}{187\Delta{t}}\approx{2.73}<br>$$</p></li></ul><h3 id="4、使用定向功能再次执行代码，与刚才执行结果进行比较，观察执行效率的不同。"><a href="#4、使用定向功能再次执行代码，与刚才执行结果进行比较，观察执行效率的不同。" class="headerlink" title="4、使用定向功能再次执行代码，与刚才执行结果进行比较，观察执行效率的不同。"></a>4、使用定向功能再次执行代码，与刚才执行结果进行比较，观察执行效率的不同。</h3><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507181100.jpg" alt="2020-05-07_181050" style="zoom:50%"><ul><li><p>寄存器</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507181210.jpg" alt="2020-05-07_181031" style="zoom:80%"><p>结果正确。</p></li><li><p>时钟周期图</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507181322.jpg" alt="2020-05-07_181255" style="zoom:50%"><p>在使用定向技术后，发现停顿明显减少。</p></li><li><p>统计</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507181345.jpg" alt="2020-05-07_181305" style="zoom:80%"><p>发现RAW停顿有24个周期，停顿次数比没有定向技术时的72个少了很多。共执行了139个周期，比没有定向技术时的187个也少了很多，RAW停顿占周期总数的百分比为17.26619%，所有的停顿为36个周期，占周期总数的百分比为25.89928%，较没有定向技术时的44.91978%也减少了很多。</p></li></ul><p>$$<br>吞吐率TP_2=\frac{102}{139\Delta{t}}<br>$$</p><p>$$<br>加速比S_2=\frac{102\times{5\Delta{t}}}{139\Delta{t}}\approx{3.67}<br>$$<br>吞吐率和加速比是没有定向技术时的$\frac{187}{139}\approx{1.35}$倍。</p><h3 id="5、采用静态调度方法重排指令序列，减少相关，优化程序"><a href="#5、采用静态调度方法重排指令序列，减少相关，优化程序" class="headerlink" title="5、采用静态调度方法重排指令序列，减少相关，优化程序"></a>5、采用静态调度方法重排指令序列，减少相关，优化程序</h3><p><strong><em>PS：静态调度后的汇编程序见附录。</em></strong></p><ul><li><p>载入代码</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507194134.jpg" alt="2020-05-07_193938" style="zoom:80%"></li><li><p>寄存器</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507194149.jpg" alt="2020-05-07_193959" style="zoom:80%"><p>结果正确。</p></li><li><p>时钟周期图</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507194226.jpg" alt="2020-05-07_194041" style="zoom:50%"><p>在使用静态调度后，发现停顿几乎没有了。</p></li><li><p>统计</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507194203.jpg" alt="2020-05-07_194021" style="zoom:80%"><p>发现RAW停顿有12个周期，停顿次数比没有静态调度时的72个少了很多。共执行了127个周期，比没有静态调度时的187个也少了很多，RAW停顿占周期总数的百分比为9.448819%，所有的停顿为24个周期，占周期总数的百分比为18.89764%，较没有静态调度时的44.91978%也减少了很多。</p></li></ul><p>$$<br>吞吐率TP_3=\frac{102}{127\Delta{t}}<br>$$</p><p>$$<br>加速比S_2=\frac{102\times{5\Delta{t}}}{127\Delta{t}}\approx{4.02}<br>$$<br>吞吐率和加速比是没有静态调度时的$\frac{187}{127}\approx{1.47}$倍。</p><h3 id="6、对优化后的程序使用定向功能执行，与刚才执行结果进行比较，观察执行效率的不同。"><a href="#6、对优化后的程序使用定向功能执行，与刚才执行结果进行比较，观察执行效率的不同。" class="headerlink" title="6、对优化后的程序使用定向功能执行，与刚才执行结果进行比较，观察执行效率的不同。"></a>6、对优化后的程序使用定向功能执行，与刚才执行结果进行比较，观察执行效率的不同。</h3><ul><li><p>寄存器</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507195018.jpg" alt="2020-05-07_194713" style="zoom:80%"><p>结果正确。</p></li><li><p>时钟周期图</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507195031.jpg" alt="2020-05-07_194926" style="zoom:50%"><p>在使用静态调度和分支技术后，发现所有的RAW停顿都没有了，只剩下了控制停顿。</p></li><li><p>统计</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507195110.jpg" alt="2020-05-07_195000" style="zoom:80%"><p>发现没有RAW停顿。共执行了115个周期，比没有静态调度和定向技术时的187个也少了非常多，RAW停顿占周期总数的百分比为0%，所有的停顿为12个周期，全都是控制停顿，占周期总数的百分比为10.43478%，较没有静态调度和定向技术时的44.91978%也减少了非常多，没有RAW停顿也说明这个静态调度是最优调度。</p></li></ul><p>$$<br>吞吐率TP_4=\frac{102}{115\Delta{t}}<br>$$</p><p>$$<br>加速比S_2=\frac{102\times{5\Delta{t}}}{115\Delta{t}}\approx{4.43}<br>$$<br>吞吐率和加速比是没有静态调度和定向技术时的$\frac{187}{115}\approx{1.63}$倍。</p><h2 id="四、附录"><a href="#四、附录" class="headerlink" title="四、附录"></a>四、附录</h2><h3 id="1、初始的汇编代码"><a href="#1、初始的汇编代码" class="headerlink" title="1、初始的汇编代码"></a>1、初始的汇编代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.text</span><br><span class="line">main:</span><br><span class="line">ADDIU $r1,$r0,array1</span><br><span class="line">ADDIU $r2,$r0,array2</span><br><span class="line">ADDIU $r3,$r0,12</span><br><span class="line">ADDIU $r7,$r0,0</span><br><span class="line">loop:</span><br><span class="line">LW $r4,0($r1)</span><br><span class="line">LW $r5,0($r2)</span><br><span class="line">MUL $r6,$r4,$r5</span><br><span class="line">ADD $r7,$r7,$r6</span><br><span class="line">ADDI $r1,$r1,4</span><br><span class="line">ADDI $r2,$r2,4</span><br><span class="line">ADDI $r3,$r3,-1</span><br><span class="line">BGTZ $r3,loop</span><br><span class="line">TEQ $r0,$r0</span><br><span class="line">.data</span><br><span class="line">array1: .word 1,2,3,4,5,6,7,8,9,10,11,12</span><br><span class="line">array2: .word 1,2,3,4,5,6,7,8,9,10,11,12</span><br></pre></td></tr></table></figure><h3 id="2、经过静态调度后的汇编代码"><a href="#2、经过静态调度后的汇编代码" class="headerlink" title="2、经过静态调度后的汇编代码"></a>2、经过静态调度后的汇编代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.text</span><br><span class="line">main:</span><br><span class="line">ADDIU $r1,$r0,array1</span><br><span class="line">ADDIU $r2,$r0,array2</span><br><span class="line">ADDIU $r3,$r0,12</span><br><span class="line">ADDIU $r7,$r0,0</span><br><span class="line">loop:</span><br><span class="line">LW $r4,0($r1)</span><br><span class="line">LW $r5,0($r2)</span><br><span class="line">ADDI $r1,$r1,4</span><br><span class="line">ADDI $r2,$r2,4</span><br><span class="line">MUL $r6,$r4,$r5</span><br><span class="line">ADDI $r3,$r3,-1</span><br><span class="line">ADD $r7,$r7,$r6</span><br><span class="line">BGTZ $r3,loop</span><br><span class="line">TEQ $r0,$r0</span><br><span class="line">.data</span><br><span class="line">array1: .word 1,2,3,4,5,6,7,8,9,10,11,12</span><br><span class="line">array2: .word 1,2,3,4,5,6,7,8,9,10,11,12</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是关于计算机系统结构实验三，使用MIPS指令实现求两个数组的点积。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机系统结构" scheme="https://666wxy666.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/"/>
    
      <category term="实验" scheme="https://666wxy666.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/%E5%AE%9E%E9%AA%8C/"/>
    
    
      <category term="实验" scheme="https://666wxy666.github.io/tags/%E5%AE%9E%E9%AA%8C/"/>
    
      <category term="计算机系统结构" scheme="https://666wxy666.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/"/>
    
      <category term="汇编" scheme="https://666wxy666.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
      <category term="MIPS" scheme="https://666wxy666.github.io/tags/MIPS/"/>
    
  </entry>
  
  <entry>
    <title>计算机系统结构 实验 1和2遇到的问题</title>
    <link href="https://666wxy666.github.io/2020/05/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C-1%E5%92%8C2%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://666wxy666.github.io/2020/05/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84-%E5%AE%9E%E9%AA%8C-1%E5%92%8C2%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-05-18T12:51:07.129Z</published>
    <updated>2020-05-18T13:11:54.425Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文是关于计算机系统结构实验一（MIPS指令系统和MIPS体系结构）和实验二（流水线及流水线中的冲突），遇到的一些问题。</p><a id="more"></a><h2 id="一、关于字"><a href="#一、关于字" class="headerlink" title="一、关于字"></a>一、关于字</h2><p>B:byte 字节指令</p><p>H:half word 半字节指令</p><p>W:word 字节指令</p><h2 id="二、关于访存"><a href="#二、关于访存" class="headerlink" title="二、关于访存"></a>二、关于访存</h2><p>按字或半字访存，无论给定地址是字（半字）中的哪一个字节的地址，都会自动转换为该字（半字）的首字节的地址。例如：MIPS中字长4字节，32位（红色框）；半字2字节，16位（蓝色框）。无论你给定的是第一个红框里的7C(0x00000000)/00(0x00000001)/08(0x00000002)/24(0x00000003)的哪一的地址，只要是按字访存，都会自动转换为7C的地址0x00000000，取出的内容都是2408007C，<strong><em>一定要注意，这里是小端法存储</em></strong>。</p><ul><li><p>小端法：高内存地址放整数的高位，低内存地址放整数的低位，这种方式叫倒着放，术语叫小端对齐。电脑X86和手机ARM都是小端对齐的。</p></li><li><p>大端法：高内存地址放整数的低位，低内存地址放整数的高位，这种方式叫正着放，术语叫大端对齐。很多Unix服务器的cpu都是大端对齐的。</p></li></ul><p>大端和小端字节序不是由操作系统决定的，而是由cpu架构决定的。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200419150741.png" alt="2020-04-19_150338" style="zoom:80%"><h2 id="三、关于返回地址"><a href="#三、关于返回地址" class="headerlink" title="三、关于返回地址"></a>三、关于返回地址</h2><p>关于这里的<strong><em>返回地址</em></strong>，后面的所有其他跳转指令的返回地址均指的是：当前指令的下一条指令的地址，也就是跳转指令如果不跳转（分支失败）的下一条指令的地址。例如：当前的指令的地址是0x00000068，那么返回地址就是0x00000072。还要注意offset要左移两位并进行符号位扩展后才能与PC相加得到转移地址。这里左移两位的目的是，将offset*4，使之成为4的倍数。也就是说PC+offset&lt;&lt;2代表了PC的后offset+1（因为PC+offset&lt;&lt;2的PC已经+1了）条指令为转移指令。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200419152615.png" alt="QQ图片20200419152549" style="zoom:80%"><h2 id="四、关于定向技术"><a href="#四、关于定向技术" class="headerlink" title="四、关于定向技术"></a>四、关于定向技术</h2><p>在定向技术中，因为其采用的是静态指令调度。非运算类指令必须在 ID段 得到之前指令的定向数据。并不能像运算类执行一样在 EX段 得到定向数据；如图所示：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200518210441.jpg" alt="307-实验二-第二组" style="zoom:80%"><h2 id="五、关于STALL"><a href="#五、关于STALL" class="headerlink" title="五、关于STALL"></a>五、关于STALL</h2><p>“绿色<font color="red">ID</font>后跟绿色ID” 和 “绿色STALL后跟绿色ID”的区别：<br>绿色<font color="red">ID</font>表示该周期ID可以执行，但是存在RAW冲突，因此执行失败，因此紧接着要做绿色ID；<br>绿色STALL表示该周期由于上一条指令的红色STALL，导致该指令此周期停顿，下一周期执行绿色ID。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是关于计算机系统结构实验一（MIPS指令系统和MIPS体系结构）和实验二（流水线及流水线中的冲突），遇到的一些问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机系统结构" scheme="https://666wxy666.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/"/>
    
      <category term="实验" scheme="https://666wxy666.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/%E5%AE%9E%E9%AA%8C/"/>
    
    
      <category term="实验" scheme="https://666wxy666.github.io/tags/%E5%AE%9E%E9%AA%8C/"/>
    
      <category term="计算机系统结构" scheme="https://666wxy666.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/"/>
    
      <category term="汇编" scheme="https://666wxy666.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
      <category term="MIPS" scheme="https://666wxy666.github.io/tags/MIPS/"/>
    
  </entry>
  
  <entry>
    <title>现代交换原理 MOOC习题 5~6章</title>
    <link href="https://666wxy666.github.io/2020/05/18/%E7%8E%B0%E4%BB%A3%E4%BA%A4%E6%8D%A2%E5%8E%9F%E7%90%86-MOOC%E4%B9%A0%E9%A2%98-5~6%E7%AB%A0/"/>
    <id>https://666wxy666.github.io/2020/05/18/%E7%8E%B0%E4%BB%A3%E4%BA%A4%E6%8D%A2%E5%8E%9F%E7%90%86-MOOC%E4%B9%A0%E9%A2%98-5~6%E7%AB%A0/</id>
    <published>2020-05-18T01:45:04.913Z</published>
    <updated>2020-06-14T02:42:25.014Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>自己随便整理了一下在学习“现代交换原理”网课时遇到的一些习题，易错点之类的。接上文<a href="/2020/05/07/现代交换原理-MOOC习题-1~4章/">现代交换原理 MOOC习题 1~4章</a>。</p><a id="more"></a><h2 id="第五章-信令与协议"><a href="#第五章-信令与协议" class="headerlink" title="第五章 信令与协议"></a>第五章 信令与协议</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200518094712.jpg" alt="2020-05-18_094257" style="zoom:80%"><blockquote><p>通话所需的媒体资源可以理解为控制呼叫的接续和拆线和通信网管理和维护的信息资源。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200518094755.png" alt="QQ图片20200518094332" style="zoom:80%"><blockquote><p>通信网中为用户建立连接和拆除连接，需要网中各个相关设备协调工作，为此在各个设备间传输的控制信号和规约称为信令。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200518095101.jpg" alt="2020-05-18_094308" style="zoom:80%"><blockquote><p>路由标记供MTP3级进行消息寻址和路由，而MTP3的路由标记是由信令点编码实现的。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200518095738.jpg" alt="20200518094345" style="zoom:80%"><blockquote><ol start="4"><li><p>电信网（现代通信网）的三大支撑网络：同步网，管理网，信令网。</p></li><li><p>SIP与普通电话用户进行通话时要进行协议转换，SIP-&gt;七号信令。SIP协议中SDP的媒体端口号由网关（中继网关）保存。中继网关是分组网和电路网边界设备，实现不同媒体协议的转换。</p><p>注意中继网关（Trunk Gateway）跟代理服务器（Proxy Server）不是一个东西。</p><p>中继网关也叫落地设备，简称TG。用于VOIP网络电话系统或呼叫中心、软交换等，将模拟信号与数字信号相互转换。是voip解决方案的重要组成部分，它位于NGN网络的边缘接入层，连接PSTN和voip网络，实现IP包转TDM的功能。 承载着IP域与电路域的语音汇接任务。</p></li><li><p>常识问题。</p></li></ol></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200518095251.jpg" alt="2020-05-18_094440" style="zoom:80%"><blockquote><ol start="7"><li><p>显然错误，MTP1的通路也要经过TST交换网络。</p></li><li><p>错误，不多解释。</p></li><li><p>模拟用户信令：主要包括用户向交换机发送的监视信令和选择信令，交换机向用户发送的铃流和忙音等音信号。<strong><em>用于PSTN</em></strong>。</p><ul><li>状态信令：用户线的忙闲状态，如主、被叫的摘、挂机状态；</li><li>地址信令：主叫所拨的被叫号码，直流脉冲或双音频；</li><li>铃流和信号音：交换机向用户发送的信号。振铃信号、信号音、来电显示的FSK信号；</li></ul><p>数字用户信令：通过消息的形式传送以上信息，<strong><em>用于ISDN用户</em></strong>。例如：DSS1 30B+D</p><p>在用户线上传输的信令叫用户线信令，No.7信令是专为电话局之间交互控制信息而设计的，所以是局间信令，也就是在中继线上交互的信令，以数字信号方式传送。它跟能否携带电话号码没关系。</p></li></ol></blockquote><h2 id="第六章-移动交换"><a href="#第六章-移动交换" class="headerlink" title="第六章 移动交换"></a>第六章 移动交换</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200531205352.jpg" alt="2020-05-31_205201" style="zoom:80%"><blockquote><p>MSC是移动交换中心，主要功能有：</p><ol><li>信道的管理和分配；</li><li>呼叫的处理和控制；</li><li>用户位置信息的登记与管理；</li><li>越区切换和漫游的控制；</li><li>号码的登记和管理；</li><li>服务类型的鉴权；</li><li>用户的鉴权；</li><li>提供链路接口；</li></ol></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200531210710.jpg" alt="2020-05-31_205837" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200531210722.jpg" alt="2020-05-31_210158" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200531210742.jpg" alt="2020-05-31_210414" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200531210756.jpg" alt="2020-05-31_210611" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200531210809.jpg" alt="2020-05-31_210653" style="zoom:80%"><blockquote><p>相关签约信息及4G位置信息不是存在MME中，而是HSS。</p></blockquote><details><summary><p>所有的习题：</p></summary><div class="content"><p><a href="/2020/05/07/现代交换原理-MOOC习题-1~4章/">现代交换原理 MOOC习题 1~4章</a></p><p><a href="/2020/05/18/现代交换原理-MOOC习题-5~6章/">现代交换原理 MOOC习题 5~6章</a></p></div></details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己随便整理了一下在学习“现代交换原理”网课时遇到的一些习题，易错点之类的。接上文&lt;a href=&quot;/2020/05/07/现代交换原理-MOOC习题-1~4章/&quot;&gt;现代交换原理 MOOC习题 1~4章&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="现代交换原理" scheme="https://666wxy666.github.io/categories/%E7%8E%B0%E4%BB%A3%E4%BA%A4%E6%8D%A2%E5%8E%9F%E7%90%86/"/>
    
      <category term="习题" scheme="https://666wxy666.github.io/categories/%E7%8E%B0%E4%BB%A3%E4%BA%A4%E6%8D%A2%E5%8E%9F%E7%90%86/%E4%B9%A0%E9%A2%98/"/>
    
    
      <category term="习题" scheme="https://666wxy666.github.io/tags/%E4%B9%A0%E9%A2%98/"/>
    
      <category term="易错点" scheme="https://666wxy666.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="网课" scheme="https://666wxy666.github.io/tags/%E7%BD%91%E8%AF%BE/"/>
    
      <category term="MOOC" scheme="https://666wxy666.github.io/tags/MOOC/"/>
    
      <category term="现代交换原理" scheme="https://666wxy666.github.io/tags/%E7%8E%B0%E4%BB%A3%E4%BA%A4%E6%8D%A2%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Linux 上机实战2 遍历目录</title>
    <link href="https://666wxy666.github.io/2020/05/08/Linux-%E4%B8%8A%E6%9C%BA%E5%AE%9E%E6%88%982-%E9%81%8D%E5%8E%86%E7%9B%AE%E5%BD%95/"/>
    <id>https://666wxy666.github.io/2020/05/08/Linux-%E4%B8%8A%E6%9C%BA%E5%AE%9E%E6%88%982-%E9%81%8D%E5%8E%86%E7%9B%AE%E5%BD%95/</id>
    <published>2020-05-08T14:10:54.416Z</published>
    <updated>2020-06-14T02:16:50.897Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本文是关于Linux中的ls的简化版，遍历目录小程序。</strong></p><a id="more"></a><h2 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h2><p><strong>编程实现程序list.c，列表普通磁盘文件，包括文件名和文件大小。</strong></p><ol><li>使用vi编辑文件，熟悉工具vi。</li><li>使用Linux的系统调用和库函数。</li><li>体会Shell文件通配符的处理方式以及命令对选项的处理方式。</li></ol><p><strong>对选项的处理，自行编程逐个分析命令行参数。不考虑多选项挤在一个命令行<br>参数内的情况。</strong></p><p><strong>与ls命令类似，处理对象可以有0到多个</strong></p><ul><li><p>0个：列出当前目录下所有文件</p></li><li><p>普通文件：列出文件</p></li><li><p>目录：列出目录下所有文件</p></li></ul><p><strong>实现自定义选项r,a,l,h,m以及–</strong></p><ul><li>r 递归方式列出子目录（每项要含路径，类似find的-print输出风格，需<br>要设计递归程序）</li><li>a 列出文件名第一个字符为圆点的普通文件（默认情况下不列出文件名<br>首字符为圆点的文件）</li><li>l 后跟一整数，限定文件大小的最小值（字节）</li><li>h 后跟一整数，限定文件大小的最大值（字节）</li><li>m 后跟一整数n，限定文件的最近修改时间必须在n天内</li><li>– 显式地终止命令选项分析</li></ul><p><strong>编辑，编译</strong></p><ul><li>vi list.c</li><li>make list 或者gcc list.c –o list</li></ul><p><strong>运行举例</strong></p><ul><li>./list –l 100 –h 5000 /bin /etc 列出大小在100~5000之间的文件</li><li>./list –a -r -l 50000 –m 2 递归式列出当前目录树下大小超50KB且2天内修改过的文件（包括文件名首字符为圆点的文件）</li><li>./list – -l</li><li>./list *</li></ul><h2 id="二、基本步骤"><a href="#二、基本步骤" class="headerlink" title="二、基本步骤"></a>二、基本步骤</h2><ol><li>使用<strong><em>Xshell</em></strong>登录到Ubuntu服务器</li></ol><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413160150.jpg" alt="2020-04-13_160129" style="zoom:67%"><ol start="2"><li><p>开始编写代码<strong><em>list.c</em></strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim list.c</span><br></pre></td></tr></table></figure></li><li><p>编写代码（代码源码见附件list.c和list2.c和本文最后的附录）</p></li></ol><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413160407.jpg" alt="2020-04-13_160309" style="zoom:67%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413160427.jpg" alt="2020-04-13_160349" style="zoom:67%"><ol start="4"><li><p>编写完成后保存退出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure></li><li><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -Wall list.c -o list</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -Wall list2.c -o list2</span><br></pre></td></tr></table></figure></li></ol><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413160759.jpg" alt="2020-04-13_160739"><h2 id="三、测试样例"><a href="#三、测试样例" class="headerlink" title="三、测试样例"></a>三、测试样例</h2><h3 id="1、说明（重要）"><a href="#1、说明（重要）" class="headerlink" title="1、说明（重要）"></a><strong><em>1、说明（重要）</em></strong></h3><p><strong><em>v1.0是基本要求，但是在基础要求上增加了</em></strong>：</p><ul><li>-？帮助选项</li><li>-d 详细模式选项，类似ls命令，可以显示权限，类型，link数，所有者，修改日期，路径……</li><li>选项在路径之前和之后均可分析</li><li>不同种类的文件分不同颜色显示：白色为普通磁盘文件，黄色为目录文件，青色为其他文件，红色为ERROR</li><li>完备的差错控制，从分析指令到执行指令阶段，均有完善的差错控制。在执行阶段遇到的文件权限等非致命错误不会打断程序的运行，程序会在屏幕上输出错误信息后继续读取下面的文件</li></ul><p><strong><em>v2.0是在v1.0的基础上进行修改的版本，除保留有v1.0的全部功能外，又增加了：</em></strong></p><ul><li>支持输入长选项（具体使用请使用–help或-？查看）</li><li>支持长短选项混合</li></ul><h3 id="2、测试样例"><a href="#2、测试样例" class="headerlink" title="2、测试样例"></a>2、测试样例</h3><h4 id="①帮助"><a href="#①帮助" class="headerlink" title="①帮助"></a>①帮助</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list -?</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413161225.jpg" alt="2020-04-13_161216" style="zoom:80%"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list2 -?</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413161333.jpg" alt="2020-04-13_161323" style="zoom:80%"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list2 --help</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413161419.jpg" alt="2020-04-13_161411" style="zoom:80%"><h4 id="②正常运行"><a href="#②正常运行" class="headerlink" title="②正常运行"></a>②正常运行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list -l 100 -h 5000 /bin /etc</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413161518.jpg" alt="2020-04-13_161128" style="zoom:67%"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list2 -low=100 -high=5000 /bin /etc</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413161840.jpg" alt="2020-04-13_161825" style="zoom:67%"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list -a -r -l 50000 -m 2</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413163601.jpg" alt="2020-04-13_163455" style="zoom:67%"><p>也可以混合输入长短选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list2 --all --r --low=50000 -m 2</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/2020041316373.jpg" alt="2020-04-13_163646" style="zoom:67%"><p>使用–终止选项分析</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list -- -l</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413164245.jpg" alt="2020-04-13_164002" style="zoom:67%"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list2 -- -l</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413164302.jpg" alt="2020-04-13_164044" style="zoom:67%"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list *</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413164504.jpg" alt="2020-04-13_164426" style="zoom:67%"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list2 *</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413164514.jpg" alt="2020-04-13_164443" style="zoom:67%"><p>增加的-d(–detail)功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list -d -a</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413165924.jpg" alt="2020-04-13_165909" style="zoom:67%"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list2 --detail --recursive</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413170102.jpg" alt="2020-04-13_170054" style="zoom:67%"><h4 id="③出错处理"><a href="#③出错处理" class="headerlink" title="③出错处理"></a>③出错处理</h4><p>两个版本的出错控制基本一致，就不对每一个命令都展示两个版本了</p><p>例如输错了选项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list -la /home/wxy</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413165459.jpg" alt="2020-04-13_165447" style="zoom:67%"><p>-h后面没有参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list /home/wxy -h</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413170152.jpg" alt="2020-04-13_170142" style="zoom:67%"><p>-l后面虽然有参数，但是不是整数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list2 --low=abc /home/wxy</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413170255.jpg" alt="2020-04-13_170248" style="zoom:67%"><p>长选项格式输入错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list2 -l=12a</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413170339.jpg" alt="2020-04-13_170328" style="zoom:67%"><p>长选项格式输入错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list2 --m1abc</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413170450.jpg" alt="2020-04-13_170443" style="zoom:67%"><p>路径不存在</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list /12345</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413170535.jpg" alt="2020-04-13_170527"></p><p>没有权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list2 /root -all -recursive</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200413170649.jpg" alt="2020-04-13_170614"></p><p>等等情况，不再一一展示</p><h2 id="四、附录"><a href="#四、附录" class="headerlink" title="四、附录"></a>四、附录</h2><p><strong><em>PS:程序源码均有详细的注释</em></strong></p><h3 id="1、list-c"><a href="#1、list-c" class="headerlink" title="1、list.c"></a>1、list.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Copyright: Copyright (c) 2020 苇名一心 All Rights Reserved.</span></span><br><span class="line"><span class="comment"> * @Description: 列表Linux文件，在Ubuntu 18.04上进行的编程</span></span><br><span class="line"><span class="comment"> * @Version: 1.0</span></span><br><span class="line"><span class="comment"> * @Author: 苇名一心</span></span><br><span class="line"><span class="comment"> * @Date: 2020-04-09 17:57:29</span></span><br><span class="line"><span class="comment"> * @LastEditors: 苇名一心</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-04-13 14:08:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;grp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//颜色</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NONE <span class="meta-string">"\e[0m"</span>      <span class="comment">//复原</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RED <span class="meta-string">"\e[0;31m"</span>    <span class="comment">//ERROR</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> YELLOW <span class="meta-string">"\e[0;33m"</span> <span class="comment">//目录</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CYAN <span class="meta-string">"\e[0;36m"</span>   <span class="comment">//除普通文件和目录文件外的文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OPTION_NUM 7      <span class="comment">//选项种类数目（除'--'以外）</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//****************选项枚举****************</span></span><br><span class="line"><span class="keyword">enum</span> OPT</span><br><span class="line">&#123;</span><br><span class="line">    _r,    <span class="comment">//-r 递归方式列出子目录</span></span><br><span class="line">    _a,    <span class="comment">//-a 列出文件名第一个字符为圆点的普通文件</span></span><br><span class="line">    _d,    <span class="comment">//-d 展示文件的详细信息（默认只展示文件路径）</span></span><br><span class="line">    _l,    <span class="comment">//-l 后跟一整数，限定文件大小的最小值（字节）</span></span><br><span class="line">    _h,    <span class="comment">//-h 后跟一整数，限定文件大小的最大值（字节）</span></span><br><span class="line">    _m,    <span class="comment">//-m 后跟一整数n，限定文件的最近修改时间必须在n天内</span></span><br><span class="line">    _help, <span class="comment">//-? 显示帮助</span></span><br><span class="line">&#125; opt;</span><br><span class="line"><span class="comment">//-- 显式地终止命令选项分析</span></span><br><span class="line"><span class="comment">//**************************************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> split[] = <span class="string">"****************************************\n"</span>; <span class="comment">//分割线</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> version[] = <span class="string">"1.0"</span>;     <span class="comment">//版本号</span></span><br><span class="line"><span class="keyword">char</span> **path;                <span class="comment">//路径</span></span><br><span class="line"><span class="keyword">int</span> path_num = <span class="number">0</span>;           <span class="comment">//用于记录路径的数目</span></span><br><span class="line"><span class="keyword">int</span> opts[OPTION_NUM] = &#123;<span class="number">0</span>&#125;; <span class="comment">//用来存储选项是否开启，数组的每个位置对应相应选项，值为0表示未开启，为1表示开启</span></span><br><span class="line"><span class="keyword">long</span> max_size = <span class="number">0</span>;          <span class="comment">//最大文件尺寸</span></span><br><span class="line"><span class="keyword">long</span> min_size = <span class="number">0</span>;          <span class="comment">//最小文件尺寸</span></span><br><span class="line"><span class="keyword">time_t</span> limit_day = <span class="number">0</span>;       <span class="comment">//最早修改在几天前</span></span><br><span class="line"><span class="keyword">time_t</span> current_time = <span class="number">0</span>;    <span class="comment">//当前系统时间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_path</span><span class="params">()</span></span>;                                 <span class="comment">//释放path分配的空间</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">()</span></span>;                                      <span class="comment">//打印帮助信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">analyse_input</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span>; <span class="comment">//分析输入的命令的函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_analyse_result</span><span class="params">()</span></span>;                       <span class="comment">//输出命令解析的结果</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">char</span> *path)</span></span>;                             <span class="comment">//对一个路径按照选项运行命令</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_mode</span><span class="params">(<span class="keyword">mode_t</span> mode)</span></span>;                      <span class="comment">//输出文件的权限及文件类型（用于-d选项中）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(struct stat st, <span class="keyword">char</span> *path)</span></span>;            <span class="comment">//展示文件信息</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    time(&amp;current_time);       <span class="comment">//获取指令执行时的时间</span></span><br><span class="line">    analyse_input(argc, argv); <span class="comment">//分析用户的输入</span></span><br><span class="line">    <span class="comment">//用户加了帮助选项，输出帮助信息后退出</span></span><br><span class="line">    <span class="keyword">if</span> (opts[_help])</span><br><span class="line">    &#123;</span><br><span class="line">        help();</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用户没有帮助选项，输出命令解析的结果并运行该命令</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        show_analyse_result();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; path_num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">run</span>(path[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    free_path();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @name: free_path</span></span><br><span class="line"><span class="comment"> * @author: 苇名一心</span></span><br><span class="line"><span class="comment"> * @msg: 释放path分配的空间</span></span><br><span class="line"><span class="comment"> * @param: 无</span></span><br><span class="line"><span class="comment"> * @return: 无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_path</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; path_num; i++)</span><br><span class="line">        <span class="built_in">free</span>(path[i]);</span><br><span class="line">    <span class="built_in">free</span>(path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @name: help</span></span><br><span class="line"><span class="comment"> * @author: 苇名一心</span></span><br><span class="line"><span class="comment"> * @msg: 打印帮助信息</span></span><br><span class="line"><span class="comment"> * @param: 无</span></span><br><span class="line"><span class="comment"> * @return: 无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%18sHELP%18s\n%s"</span>, <span class="string">""</span>, <span class="string">""</span>, split);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"List %s by 苇名一心 Apr 10 2020\n"</span>, version);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Usage: ./list [OPTION]... [PATH]...\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"List informaton about the FILEs in these PATHs(the current directory by default)\nOptions:\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t-r\t\tList subdirectories recursively\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t-a\t\tDo not hide entries starting with .\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t-d\t\tShow detail information of file(only file path by default)\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t-l &lt;bytes&gt;\tMinmum of file size\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t-h &lt;bytes&gt;\tMaxmum of file size\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t-m &lt;days&gt;\tLimit file last changed time\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t-?\t\tDisplay this help and exit\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Color:\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\tWHITE: Regular file\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(YELLOW <span class="string">"\tYELLOW: Directory file\n"</span> NONE);</span><br><span class="line">    <span class="built_in">printf</span>(CYAN <span class="string">"\tCYAN: Other file\n"</span> NONE);</span><br><span class="line">    <span class="built_in">printf</span>(RED <span class="string">"\tRED: Error\n"</span> NONE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, split);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @name: analyse_input</span></span><br><span class="line"><span class="comment"> * @author: 苇名一心</span></span><br><span class="line"><span class="comment"> * @msg: 分析输入的命令的函数</span></span><br><span class="line"><span class="comment"> * @param: 同main函数</span></span><br><span class="line"><span class="comment"> * @return: 无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">analyse_input</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    path = (<span class="keyword">char</span> **)<span class="built_in">malloc</span>(argc * <span class="keyword">sizeof</span>(<span class="keyword">char</span> *));</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>; <span class="comment">//记录选项分析是否终止，终止为0，未终止为1</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; argc; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//以-开头的是选项</span></span><br><span class="line">        <span class="keyword">if</span> (flag &amp;&amp; argv[i][<span class="number">0</span>] == <span class="string">'-'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strlen</span>(argv[i]) == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option wrong, please input the right option\n"</span> NONE);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                help();</span><br><span class="line">                free_path();</span><br><span class="line">                <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strlen</span>(argv[i]) == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">switch</span> (argv[i][<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'r'</span>:</span><br><span class="line">                    opts[_r] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                    opts[_a] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">                    opts[_d] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'l'</span>:</span><br><span class="line">                    opts[_l] = <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">//判断-l选项后面有没有参数</span></span><br><span class="line">                    <span class="keyword">if</span> (i &lt; argc - <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">char</span> *<span class="built_in">stop</span>;</span><br><span class="line">                        <span class="keyword">long</span> <span class="keyword">int</span> <span class="built_in">size</span> = strtol(argv[++i], &amp;<span class="built_in">stop</span>, <span class="number">10</span>);</span><br><span class="line">                        <span class="comment">//stop长度为0代表进行了有效的转换</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">strlen</span>(<span class="built_in">stop</span>) == <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            min_size = <span class="built_in">size</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option -l wrong, there is no required min size, please input the right option\n"</span> NONE);</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                            help();</span><br><span class="line">                            free_path();</span><br><span class="line">                            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option -l wrong, there is no required min size, please input the right option\n"</span> NONE);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                        help();</span><br><span class="line">                        free_path();</span><br><span class="line">                        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line">                    opts[_h] = <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">//判断-h选项后面有没有参数</span></span><br><span class="line">                    <span class="keyword">if</span> (i &lt; argc - <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">char</span> *<span class="built_in">stop</span>;</span><br><span class="line">                        <span class="keyword">long</span> <span class="keyword">int</span> <span class="built_in">size</span> = strtol(argv[++i], &amp;<span class="built_in">stop</span>, <span class="number">10</span>);</span><br><span class="line">                        <span class="comment">//stop长度为0代表进行了有效的转换</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">strlen</span>(<span class="built_in">stop</span>) == <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            max_size = <span class="built_in">size</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option -h wrong, there is no required max size, please input the right option\n"</span> NONE);</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                            help();</span><br><span class="line">                            free_path();</span><br><span class="line">                            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option -h wrong, there is no required max size, please input the right option\n"</span> NONE);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                        help();</span><br><span class="line">                        free_path();</span><br><span class="line">                        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'m'</span>:</span><br><span class="line">                    opts[_m] = <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">//判断-m选项后面有没有参数</span></span><br><span class="line">                    <span class="keyword">if</span> (i &lt; argc - <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">char</span> *<span class="built_in">stop</span>;</span><br><span class="line">                        <span class="keyword">long</span> <span class="keyword">int</span> day = strtol(argv[++i], &amp;<span class="built_in">stop</span>, <span class="number">10</span>);</span><br><span class="line">                        <span class="comment">//stop长度为0代表进行了有效的转换</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">strlen</span>(<span class="built_in">stop</span>) == <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            limit_day = day;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option -m wrong, there is no required limit day, please input the right option\n"</span> NONE);</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                            help();</span><br><span class="line">                            free_path();</span><br><span class="line">                            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option -m wrong, there is no required limit day, please input the right option\n"</span> NONE);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                        help();</span><br><span class="line">                        free_path();</span><br><span class="line">                        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'?'</span>:</span><br><span class="line">                    opts[_help] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option wrong, please input the right option\n"</span> NONE);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                    help();</span><br><span class="line">                    free_path();</span><br><span class="line">                    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option wrong, please input the right option\n"</span> NONE);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                help();</span><br><span class="line">                free_path();</span><br><span class="line">                <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//不是-开头的认为是路径或者--后面的全部认为是路径</span></span><br><span class="line">            path[path_num] = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(argv[i]) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">            <span class="built_in">strcpy</span>(path[path_num++], argv[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (opts[_l] &amp;&amp; opts[_h])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (min_size &gt; max_size)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(RED <span class="string">"ERROR: Min size of file is less than Max size of file, please input the right option\n"</span> NONE);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">            help();</span><br><span class="line">            free_path();</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有输入路径，默认为当前工作目录</span></span><br><span class="line">    <span class="keyword">if</span> (path_num == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        path[path_num] = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">255</span>);</span><br><span class="line">        <span class="keyword">if</span> (!getcwd(path[path_num++], <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">255</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(RED <span class="string">"ERROR: Get current work path wrong\n"</span> NONE);</span><br><span class="line">            free_path();</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @name: show_analyse_result</span></span><br><span class="line"><span class="comment"> * @author: 苇名一心</span></span><br><span class="line"><span class="comment"> * @msg: 输出命令解析的结果</span></span><br><span class="line"><span class="comment"> * @param: 无</span></span><br><span class="line"><span class="comment"> * @return: 无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_analyse_result</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Input Analyse Results are:\n"</span>);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; OPTION_NUM; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (i)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> _r:</span><br><span class="line">            <span class="keyword">if</span> (opts[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-r: True\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-r: False\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> _a:</span><br><span class="line">            <span class="keyword">if</span> (opts[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-a: True\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-a: False\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> _d:</span><br><span class="line">            <span class="keyword">if</span> (opts[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-d: True\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-d: False\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> _l:</span><br><span class="line">            <span class="keyword">if</span> (opts[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-l: True\tMin Size:%ld\n"</span>, min_size);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-l: False\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> _h:</span><br><span class="line">            <span class="keyword">if</span> (opts[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-h: True\tMax Size:%ld\n"</span>, max_size);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-h: False\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> _m:</span><br><span class="line">            <span class="keyword">if</span> (opts[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-m: True\tLimit Day:%ld\n"</span>, limit_day);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-m: False\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> _help:</span><br><span class="line">            <span class="keyword">if</span> (opts[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-?: True\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-?: False\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(RED <span class="string">"ERROR: Unknown error, please consult me\n"</span> NONE);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, split);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Path Count is: %d\nPath:\n"</span>, path_num);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; path_num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, path[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, split);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @name: run</span></span><br><span class="line"><span class="comment"> * @msg: 对一个路径按照选项运行命令</span></span><br><span class="line"><span class="comment"> * @param： path为这个路径</span></span><br><span class="line"><span class="comment"> * @return: 无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">char</span> *path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span>         <span class="comment">//stat结构体</span></span><br><span class="line">    DIR *dir;               <span class="comment">//目录句柄</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">entry</span>;</span>   <span class="comment">//dirent结构体</span></span><br><span class="line">    <span class="keyword">char</span> current_path[<span class="number">255</span>]; <span class="comment">//当前的路径，最长255</span></span><br><span class="line">    <span class="comment">//note:一定要用lstat，否则可能会出现有些文件打不开的情况，下面同理</span></span><br><span class="line">    <span class="keyword">int</span> ret = lstat(path, &amp;st); <span class="comment">//取出当前路径的i节点信息</span></span><br><span class="line">    <span class="comment">//成功获取stat</span></span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果是目录</span></span><br><span class="line">        <span class="keyword">if</span> (S_ISDIR(st.st_mode))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//打开目录</span></span><br><span class="line">            dir = opendir(path);</span><br><span class="line">            <span class="comment">//打开失败</span></span><br><span class="line">            <span class="keyword">if</span> (dir == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(RED <span class="string">"ERROR[%d] open dir \"%s\": %s\n"</span> NONE, errno, path, strerror(errno));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//打开成功</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                entry = readdir(dir);</span><br><span class="line">                <span class="comment">//只要没有读到目录尾就一直读</span></span><br><span class="line">                <span class="keyword">while</span> (entry != <span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//去掉目录中的.和..</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(entry-&gt;d_name, <span class="string">"."</span>) != <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(entry-&gt;d_name, <span class="string">".."</span>) != <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//构造当前目录下各文件路径</span></span><br><span class="line">                        <span class="built_in">strcpy</span>(current_path, path);</span><br><span class="line">                        <span class="comment">//忽略路径最后一个字符为‘/’</span></span><br><span class="line">                        <span class="keyword">if</span> (current_path[<span class="built_in">strlen</span>(current_path) - <span class="number">1</span>] != <span class="string">'/'</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">strcat</span>(current_path, <span class="string">"/"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="built_in">strcat</span>(current_path, entry-&gt;d_name);</span><br><span class="line">                        <span class="comment">//获取当前目录下面各文件的stat</span></span><br><span class="line">                        ret = lstat(current_path, &amp;st);</span><br><span class="line">                        <span class="comment">//成功获取stat</span></span><br><span class="line">                        <span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">//输出</span></span><br><span class="line">                            <span class="comment">//是否显示.开头的文件(包括目录文件)</span></span><br><span class="line">                            <span class="keyword">if</span> (opts[_a] || entry-&gt;d_name[<span class="number">0</span>] != <span class="string">'.'</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                show(st, current_path);</span><br><span class="line">                                <span class="comment">//如果还是目录并且指定了选项-r，则进行递归</span></span><br><span class="line">                                <span class="comment">//也就是说current_path一定是目录</span></span><br><span class="line">                                <span class="keyword">if</span> (S_ISDIR(st.st_mode) &amp;&amp; opts[_r])</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="built_in">run</span>(current_path);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//失败输出错误信息</span></span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(RED <span class="string">"ERROR[%d] read file \"%s\": %s\n"</span> NONE, errno, current_path, strerror(errno));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//继续读下一个</span></span><br><span class="line">                    entry = readdir(dir);</span><br><span class="line">                &#125;</span><br><span class="line">                closedir(dir);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果是文件，直接打印</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            show(st, path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//失败输出错误信息</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(RED <span class="string">"ERROR[%d] read file \"%s\": %s\n"</span> NONE, errno, path, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @name: show_mode</span></span><br><span class="line"><span class="comment"> * @author: 苇名一心</span></span><br><span class="line"><span class="comment"> * @msg: //输出文件的权限及文件类型（用于-d选项中）</span></span><br><span class="line"><span class="comment"> * @param：mode_t mode，文件的mode </span></span><br><span class="line"><span class="comment"> * @return: 无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_mode</span><span class="params">(<span class="keyword">mode_t</span> mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> str[] = <span class="string">"----------"</span>;</span><br><span class="line">    <span class="keyword">if</span> (S_ISREG(mode))</span><br><span class="line">        str[pos] = <span class="string">'-'</span>; <span class="comment">//普通文件</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (S_ISBLK(mode))</span><br><span class="line">        str[pos] = <span class="string">'b'</span>; <span class="comment">//块设备文件</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (S_ISDIR(mode))</span><br><span class="line">        str[pos] = <span class="string">'d'</span>; <span class="comment">//目录文件</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (S_ISCHR(mode))</span><br><span class="line">        str[pos] = <span class="string">'c'</span>; <span class="comment">//字符设备文件</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (S_ISLNK(mode))</span><br><span class="line">        str[pos] = <span class="string">'l'</span>; <span class="comment">//符号连接文件</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (S_ISFIFO(mode))</span><br><span class="line">        str[pos] = <span class="string">'p'</span>; <span class="comment">//命名管道文件</span></span><br><span class="line">    <span class="comment">//按位取与，获得文件所有者权限</span></span><br><span class="line">    pos++;</span><br><span class="line">    <span class="keyword">if</span> (S_IRUSR &amp; mode)</span><br><span class="line">        str[pos] = <span class="string">'r'</span>;</span><br><span class="line">    pos++;</span><br><span class="line">    <span class="keyword">if</span> (S_IWUSR &amp; mode)</span><br><span class="line">        str[pos] = <span class="string">'w'</span>;</span><br><span class="line">    pos++;</span><br><span class="line">    <span class="keyword">if</span> (S_IXUSR &amp; mode)</span><br><span class="line">        str[pos] = <span class="string">'x'</span>;</span><br><span class="line">    <span class="comment">//按位取与，获得同组用户权限</span></span><br><span class="line">    pos++;</span><br><span class="line">    <span class="keyword">if</span> (S_IRGRP &amp; mode)</span><br><span class="line">        str[pos] = <span class="string">'r'</span>;</span><br><span class="line">    pos++;</span><br><span class="line">    <span class="keyword">if</span> (S_IWGRP &amp; mode)</span><br><span class="line">        str[pos] = <span class="string">'w'</span>;</span><br><span class="line">    pos++;</span><br><span class="line">    <span class="keyword">if</span> (S_IXGRP &amp; mode)</span><br><span class="line">        str[pos] = <span class="string">'x'</span>;</span><br><span class="line">    <span class="comment">//按位取与，获得其他用户权限</span></span><br><span class="line">    pos++;</span><br><span class="line">    <span class="keyword">if</span> (S_IROTH &amp; mode)</span><br><span class="line">        str[pos] = <span class="string">'r'</span>;</span><br><span class="line">    pos++;</span><br><span class="line">    <span class="keyword">if</span> (S_IWOTH &amp; mode)</span><br><span class="line">        str[pos] = <span class="string">'w'</span>;</span><br><span class="line">    pos++;</span><br><span class="line">    <span class="keyword">if</span> (S_IXOTH &amp; mode)</span><br><span class="line">        str[pos] = <span class="string">'x'</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @name: show</span></span><br><span class="line"><span class="comment"> * @author: 苇名一心</span></span><br><span class="line"><span class="comment"> * @msg: 展示文件信息</span></span><br><span class="line"><span class="comment"> * @param: st为文件stat结构体，path为文件路径 </span></span><br><span class="line"><span class="comment"> * @return: 无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(struct stat st, <span class="keyword">char</span> *path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//是否对文件大小最小值有要求</span></span><br><span class="line">    <span class="comment">//如果opts[_l]为1，说明有要求，!opts[_l]=0</span></span><br><span class="line">    <span class="comment">//0||st.st_size &gt; min_size=st.st_size &gt; min_size</span></span><br><span class="line">    <span class="comment">//因此刚好可以限制文件大小</span></span><br><span class="line">    <span class="comment">//如果opts[_l]为0，说明没有要求，!opts[_l]=1</span></span><br><span class="line">    <span class="comment">//1||st.st_size &gt; min_size=1</span></span><br><span class="line">    <span class="comment">//因此限制无效，直接通过，没有限制文件大小</span></span><br><span class="line">    <span class="comment">//以下其他命令同理</span></span><br><span class="line">    <span class="keyword">if</span> (!opts[_l] || st.st_size &gt;= min_size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//是否对文件大小最大值有要求</span></span><br><span class="line">        <span class="keyword">if</span> (!opts[_h] || st.st_size &lt;= max_size)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//是否对文件修改时间有要求</span></span><br><span class="line">            <span class="comment">//st_mtime域代表了文件的最近改变时间</span></span><br><span class="line">            <span class="comment">//((current_time - st.st_mtime) / (24 * 60 * 60))可以得到天数</span></span><br><span class="line">            <span class="keyword">if</span> (!opts[_m] || ((current_time - st.st_mtime) / (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>)) &lt; limit_day)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (opts[_d])</span><br><span class="line">                &#123;</span><br><span class="line">                    show_mode(st.st_mode);</span><br><span class="line">                    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> *<span class="title">user</span>;</span></span><br><span class="line">                    user = getpwuid(st.st_uid);</span><br><span class="line">                    <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">group</span>;</span></span><br><span class="line">                    group = getgrgid(st.st_gid);</span><br><span class="line">                    <span class="keyword">char</span> *time_str;</span><br><span class="line">                    time_str = ctime(&amp;st.st_ctime);</span><br><span class="line">                    <span class="comment">//将日期最后的'\n'去掉</span></span><br><span class="line">                    time_str[<span class="built_in">strlen</span>(time_str) - <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">                    <span class="keyword">if</span> (S_ISDIR(st.st_mode))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%5lu  %-10s%-10s%-15ld%s  "</span> YELLOW <span class="string">"%s\n"</span> NONE,</span><br><span class="line">                               st.st_nlink, user-&gt;pw_name, group-&gt;gr_name, st.st_size, time_str, path);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (S_ISREG(st.st_mode))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%5lu  %-10s%-10s%-15ld%s  %s\n"</span>,</span><br><span class="line">                               st.st_nlink, user-&gt;pw_name, group-&gt;gr_name, st.st_size, time_str, path);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%5lu  %-10s%-10s%-15ld%s  "</span> CYAN <span class="string">"%s\n"</span> NONE,</span><br><span class="line">                               st.st_nlink, user-&gt;pw_name, group-&gt;gr_name, st.st_size, time_str, path);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (S_ISDIR(st.st_mode))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(YELLOW <span class="string">"%s\n"</span> NONE, path);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (S_ISREG(st.st_mode))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, path);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(CYAN <span class="string">"%s\n"</span> NONE, path);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、list2-c"><a href="#2、list2-c" class="headerlink" title="2、list2.c"></a>2、list2.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Copyright: Copyright (c) 2020 苇名一心 All Rights Reserved.</span></span><br><span class="line"><span class="comment"> * @Description: 列表Linux文件，在Ubuntu 18.04上进行的编程，较1.0版本增加了长选项分析的功能</span></span><br><span class="line"><span class="comment"> * @Version: 2.0</span></span><br><span class="line"><span class="comment"> * @Author: 苇名一心</span></span><br><span class="line"><span class="comment"> * @Date: 2020-04-09 17:57:29</span></span><br><span class="line"><span class="comment"> * @LastEditors: 苇名一心</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-04-13 14:10:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;grp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//颜色</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NONE <span class="meta-string">"\e[0m"</span>      <span class="comment">//复原</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RED <span class="meta-string">"\e[0;31m"</span>    <span class="comment">//ERROR</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> YELLOW <span class="meta-string">"\e[0;33m"</span> <span class="comment">//目录</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CYAN <span class="meta-string">"\e[0;36m"</span>   <span class="comment">//除普通文件和目录文件外的文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OPTION_NUM 7      <span class="comment">//选项种类数目（除'--'以外）</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//****************选项枚举****************</span></span><br><span class="line"><span class="keyword">enum</span> OPT</span><br><span class="line">&#123;</span><br><span class="line">    _r,    <span class="comment">//-r, --recursive 递归方式列出子目录</span></span><br><span class="line">    _a,    <span class="comment">//-a, --all       列出文件名第一个字符为圆点的普通文件</span></span><br><span class="line">    _d,    <span class="comment">//-d, --detail    展示文件的详细信息（默认只展示文件路径）</span></span><br><span class="line">    _l,    <span class="comment">//-l, --low       后跟一整数，限定文件大小的最小值（字节）</span></span><br><span class="line">    _h,    <span class="comment">//-h, --high      后跟一整数，限定文件大小的最大值（字节）</span></span><br><span class="line">    _m,    <span class="comment">//-m, --mdays     后跟一整数n，限定文件的最近修改时间必须在n天内</span></span><br><span class="line">    _help, <span class="comment">//-?, --help      显示帮助</span></span><br><span class="line">&#125; opt;</span><br><span class="line"><span class="comment">//-- 显式地终止命令选项分析</span></span><br><span class="line"><span class="comment">//**************************************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> split[] = <span class="string">"****************************************\n"</span>; <span class="comment">//分割线</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> version[] = <span class="string">"2.0"</span>;     <span class="comment">//版本号</span></span><br><span class="line"><span class="keyword">char</span> **path;                <span class="comment">//路径</span></span><br><span class="line"><span class="keyword">int</span> path_num = <span class="number">0</span>;           <span class="comment">//用于记录路径的数目</span></span><br><span class="line"><span class="keyword">int</span> opts[OPTION_NUM] = &#123;<span class="number">0</span>&#125;; <span class="comment">//用来存储选项是否开启，数组的每个位置对应相应选项，值为0表示未开启，为1表示开启</span></span><br><span class="line"><span class="keyword">long</span> max_size = <span class="number">0</span>;          <span class="comment">//最大文件尺寸</span></span><br><span class="line"><span class="keyword">long</span> min_size = <span class="number">0</span>;          <span class="comment">//最小文件尺寸</span></span><br><span class="line"><span class="keyword">time_t</span> limit_day = <span class="number">0</span>;       <span class="comment">//最早修改在几天前</span></span><br><span class="line"><span class="keyword">time_t</span> current_time = <span class="number">0</span>;    <span class="comment">//当前系统时间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_path</span><span class="params">()</span></span>;                                 <span class="comment">//释放path分配的空间</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">()</span></span>;                                      <span class="comment">//打印帮助信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">analyse_input</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span>; <span class="comment">//分析输入的命令的函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_analyse_result</span><span class="params">()</span></span>;                       <span class="comment">//输出命令解析的结果</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">char</span> *path)</span></span>;                             <span class="comment">//对一个路径按照选项运行命令</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_mode</span><span class="params">(<span class="keyword">mode_t</span> mode)</span></span>;                      <span class="comment">//输出文件的权限及文件类型（用于-d选项中）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(struct stat st, <span class="keyword">char</span> *path)</span></span>;            <span class="comment">//展示文件信息</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    time(&amp;current_time);       <span class="comment">//获取指令执行时的时间</span></span><br><span class="line">    analyse_input(argc, argv); <span class="comment">//分析用户的输入</span></span><br><span class="line">    <span class="comment">//用户加了帮助选项，输出帮助信息后退出</span></span><br><span class="line">    <span class="keyword">if</span> (opts[_help])</span><br><span class="line">    &#123;</span><br><span class="line">        help();</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用户没有帮助选项，输出命令解析的结果并运行该命令</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        show_analyse_result();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; path_num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">run</span>(path[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    free_path();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @name: free_path</span></span><br><span class="line"><span class="comment"> * @author: 苇名一心</span></span><br><span class="line"><span class="comment"> * @msg: 释放path分配的空间</span></span><br><span class="line"><span class="comment"> * @param: 无</span></span><br><span class="line"><span class="comment"> * @return: 无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_path</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; path_num; i++)</span><br><span class="line">        <span class="built_in">free</span>(path[i]);</span><br><span class="line">    <span class="built_in">free</span>(path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @name: help</span></span><br><span class="line"><span class="comment"> * @author: 苇名一心</span></span><br><span class="line"><span class="comment"> * @msg: 打印帮助信息</span></span><br><span class="line"><span class="comment"> * @param: 无</span></span><br><span class="line"><span class="comment"> * @return: 无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%18sHELP%18s\n%s"</span>, <span class="string">""</span>, <span class="string">""</span>, split);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"List %s by 苇名一心 Apr 13 2020\n"</span>, version);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Usage: ./list [OPTION]... [PATH]...\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"List informaton about the FILEs in these PATHs(the current directory by default)\nOptions:\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t-r, --recursive\t\tList subdirectories recursively\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t-a, --all\t\tDo not hide entries starting with .\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t-d, --detail\t\tShow detail information of file(only file path by default)\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t-l, --low=&lt;bytes&gt;\tMinmum of file size\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t-h, --high=&lt;bytes&gt;\tMaxmum of file size\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t-m, --mdays=&lt;days&gt;\tLimit file last changed time\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\t-?, --help\t\tDisplay this help and exit\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Color:\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\tWHITE: Regular file\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(YELLOW <span class="string">"\tYELLOW: Directory file\n"</span> NONE);</span><br><span class="line">    <span class="built_in">printf</span>(CYAN <span class="string">"\tCYAN: Other file\n"</span> NONE);</span><br><span class="line">    <span class="built_in">printf</span>(RED <span class="string">"\tRED: Error\n"</span> NONE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, split);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @name: analyse_input</span></span><br><span class="line"><span class="comment"> * @author: 苇名一心</span></span><br><span class="line"><span class="comment"> * @msg: 分析输入的命令的函数</span></span><br><span class="line"><span class="comment"> * @param: 同main函数</span></span><br><span class="line"><span class="comment"> * @return: 无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">analyse_input</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    path = (<span class="keyword">char</span> **)<span class="built_in">malloc</span>(argc * <span class="keyword">sizeof</span>(<span class="keyword">char</span> *));</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>; <span class="comment">//记录选项分析是否终止，终止为0，未终止为1</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; argc; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//以-开头的是选项</span></span><br><span class="line">        <span class="keyword">if</span> (flag &amp;&amp; argv[i][<span class="number">0</span>] == <span class="string">'-'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strlen</span>(argv[i]) == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option wrong, please input the right option\n"</span> NONE);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                help();</span><br><span class="line">                free_path();</span><br><span class="line">                <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strlen</span>(argv[i]) == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">switch</span> (argv[i][<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'r'</span>:</span><br><span class="line">                    opts[_r] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                    opts[_a] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">                    opts[_d] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'l'</span>:</span><br><span class="line">                    opts[_l] = <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">//判断-l选项后面有没有参数</span></span><br><span class="line">                    <span class="keyword">if</span> (i &lt; argc - <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">char</span> *<span class="built_in">stop</span>;</span><br><span class="line">                        <span class="keyword">long</span> <span class="keyword">int</span> <span class="built_in">size</span> = strtol(argv[++i], &amp;<span class="built_in">stop</span>, <span class="number">10</span>);</span><br><span class="line">                        <span class="comment">//stop长度为0代表进行了有效的转换</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">strlen</span>(<span class="built_in">stop</span>) == <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            min_size = <span class="built_in">size</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option -l wrong, there is no required min size, please input the right option\n"</span> NONE);</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                            help();</span><br><span class="line">                            free_path();</span><br><span class="line">                            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option -l wrong, there is no required min size, please input the right option\n"</span> NONE);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                        help();</span><br><span class="line">                        free_path();</span><br><span class="line">                        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line">                    opts[_h] = <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">//判断-h选项后面有没有参数</span></span><br><span class="line">                    <span class="keyword">if</span> (i &lt; argc - <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">char</span> *<span class="built_in">stop</span>;</span><br><span class="line">                        <span class="keyword">long</span> <span class="keyword">int</span> <span class="built_in">size</span> = strtol(argv[++i], &amp;<span class="built_in">stop</span>, <span class="number">10</span>);</span><br><span class="line">                        <span class="comment">//stop长度为0代表进行了有效的转换</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">strlen</span>(<span class="built_in">stop</span>) == <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            max_size = <span class="built_in">size</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option -h wrong, there is no required max size, please input the right option\n"</span> NONE);</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                            help();</span><br><span class="line">                            free_path();</span><br><span class="line">                            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option -h wrong, there is no required max size, please input the right option\n"</span> NONE);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                        help();</span><br><span class="line">                        free_path();</span><br><span class="line">                        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'m'</span>:</span><br><span class="line">                    opts[_m] = <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">//判断-m选项后面有没有参数</span></span><br><span class="line">                    <span class="keyword">if</span> (i &lt; argc - <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">char</span> *<span class="built_in">stop</span>;</span><br><span class="line">                        <span class="keyword">long</span> <span class="keyword">int</span> day = strtol(argv[++i], &amp;<span class="built_in">stop</span>, <span class="number">10</span>);</span><br><span class="line">                        <span class="comment">//stop长度为0代表进行了有效的转换</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">strlen</span>(<span class="built_in">stop</span>) == <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            limit_day = day;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option -m wrong, there is no required limit day, please input the right option\n"</span> NONE);</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                            help();</span><br><span class="line">                            free_path();</span><br><span class="line">                            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option -m wrong, there is no required limit day, please input the right option\n"</span> NONE);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                        help();</span><br><span class="line">                        free_path();</span><br><span class="line">                        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'?'</span>:</span><br><span class="line">                    opts[_help] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option wrong, please input the right option\n"</span> NONE);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                    help();</span><br><span class="line">                    free_path();</span><br><span class="line">                    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//长度&gt;2的情况，也就是长选项</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">strchr</span>(argv[i], <span class="string">'='</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">strstr</span>(argv[i], <span class="string">"--low="</span>))</span><br><span class="line">                    &#123;</span><br><span class="line">                        opts[_l] = <span class="number">1</span>;</span><br><span class="line">                        <span class="comment">//判断--low选项后面有没有参数</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">strlen</span>(argv[i]) &gt; <span class="number">6</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">char</span> *<span class="built_in">stop</span>;</span><br><span class="line">                            <span class="keyword">long</span> <span class="keyword">int</span> <span class="built_in">size</span> = strtol(argv[i] + <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">6</span>, &amp;<span class="built_in">stop</span>, <span class="number">10</span>);</span><br><span class="line">                            <span class="comment">//stop长度为0代表进行了有效的转换</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="built_in">strlen</span>(<span class="built_in">stop</span>) == <span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                min_size = <span class="built_in">size</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option --low wrong, there is no required min size, please input the right option\n"</span> NONE);</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                                help();</span><br><span class="line">                                free_path();</span><br><span class="line">                                <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option --low wrong, there is no required min size, please input the right option\n"</span> NONE);</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                            help();</span><br><span class="line">                            free_path();</span><br><span class="line">                            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strstr</span>(argv[i], <span class="string">"--high="</span>))</span><br><span class="line">                    &#123;</span><br><span class="line">                        opts[_h] = <span class="number">1</span>;</span><br><span class="line">                        <span class="comment">//判断--high选项后面有没有参数</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">strlen</span>(argv[i]) &gt; <span class="number">7</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">char</span> *<span class="built_in">stop</span>;</span><br><span class="line">                            <span class="keyword">long</span> <span class="keyword">int</span> <span class="built_in">size</span> = strtol(argv[i] + <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">7</span>, &amp;<span class="built_in">stop</span>, <span class="number">10</span>);</span><br><span class="line">                            <span class="comment">//stop长度为0代表进行了有效的转换</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="built_in">strlen</span>(<span class="built_in">stop</span>) == <span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                max_size = <span class="built_in">size</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option --high wrong, there is no required max size, please input the right option\n"</span> NONE);</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                                help();</span><br><span class="line">                                free_path();</span><br><span class="line">                                <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option --high wrong, there is no required max size, please input the right option\n"</span> NONE);</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                            help();</span><br><span class="line">                            free_path();</span><br><span class="line">                            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strstr</span>(argv[i], <span class="string">"--mdays="</span>))</span><br><span class="line">                    &#123;</span><br><span class="line">                        opts[_m] = <span class="number">1</span>;</span><br><span class="line">                        <span class="comment">//判断--mdays选项后面有没有参数</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">strlen</span>(argv[i]) &gt; <span class="number">8</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">char</span> *<span class="built_in">stop</span>;</span><br><span class="line">                            <span class="keyword">long</span> <span class="keyword">int</span> day = strtol(argv[i] + <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">8</span>, &amp;<span class="built_in">stop</span>, <span class="number">10</span>);</span><br><span class="line">                            <span class="comment">//stop长度为0代表进行了有效的转换</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="built_in">strlen</span>(<span class="built_in">stop</span>) == <span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                limit_day = day;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option --mdays wrong, there is no required limit day, please input the right option\n"</span> NONE);</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                                help();</span><br><span class="line">                                free_path();</span><br><span class="line">                                <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option --mdays wrong, there is no required limit day, please input the right option\n"</span> NONE);</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                            help();</span><br><span class="line">                            free_path();</span><br><span class="line">                            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option wrong, please input the right option\n"</span> NONE);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                        help();</span><br><span class="line">                        free_path();</span><br><span class="line">                        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">"--recursive"</span>, argv[i]) == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        opts[_r] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">"--all"</span>, argv[i]) == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        opts[_a] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">"--detail"</span>, argv[i]) == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        opts[_d] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">"--help"</span>, argv[i]) == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        opts[_help] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(RED <span class="string">"ERROR: Input option wrong, please input the right option\n"</span> NONE);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">                        help();</span><br><span class="line">                        free_path();</span><br><span class="line">                        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//不是-开头的认为是路径或者--后面的全部认为是路径</span></span><br><span class="line">            path[path_num] = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(argv[i]) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">            <span class="built_in">strcpy</span>(path[path_num++], argv[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (opts[_l] &amp;&amp; opts[_h])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (min_size &gt; max_size)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(RED <span class="string">"ERROR: Min size of file is less than Max size of file, please input the right option\n"</span> NONE);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Here are some tips:\n"</span>);</span><br><span class="line">            help();</span><br><span class="line">            free_path();</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有输入路径，默认为当前工作目录</span></span><br><span class="line">    <span class="keyword">if</span> (path_num == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        path[path_num] = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">255</span>);</span><br><span class="line">        <span class="keyword">if</span> (!getcwd(path[path_num++], <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">255</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(RED <span class="string">"ERROR: Get current work path wrong\n"</span> NONE);</span><br><span class="line">            free_path();</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @name: show_analyse_result</span></span><br><span class="line"><span class="comment"> * @author: 苇名一心</span></span><br><span class="line"><span class="comment"> * @msg: 输出命令解析的结果</span></span><br><span class="line"><span class="comment"> * @param: 无</span></span><br><span class="line"><span class="comment"> * @return: 无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_analyse_result</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Input Analyse Results are:\n"</span>);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; OPTION_NUM; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (i)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> _r:</span><br><span class="line">            <span class="keyword">if</span> (opts[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-r, --recursive: True\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-r, --recursive: False\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> _a:</span><br><span class="line">            <span class="keyword">if</span> (opts[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-a, --all:\t True\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-a, --all:\t False\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> _d:</span><br><span class="line">            <span class="keyword">if</span> (opts[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-d, --detail:\t True\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-d, --detail:\t False\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> _l:</span><br><span class="line">            <span class="keyword">if</span> (opts[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-l, --low:\t True\tMin Size:%ld\n"</span>, min_size);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-l, --low:\t False\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> _h:</span><br><span class="line">            <span class="keyword">if</span> (opts[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-h, --high:\t True\tMax Size:%ld\n"</span>, max_size);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-h, --high:\t False\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> _m:</span><br><span class="line">            <span class="keyword">if</span> (opts[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-m, --mdays:\t True\tLimit Day:%ld\n"</span>, limit_day);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-m, --mdays:\t False\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> _help:</span><br><span class="line">            <span class="keyword">if</span> (opts[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-?, --help:\t True\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-?, --help:\t False\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(RED <span class="string">"ERROR: Unknown error, please consult me\n"</span> NONE);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, split);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Path Count is: %d\nPath:\n"</span>, path_num);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; path_num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, path[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, split);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @name: run</span></span><br><span class="line"><span class="comment"> * @msg: 对一个路径按照选项运行命令</span></span><br><span class="line"><span class="comment"> * @param： path为这个路径</span></span><br><span class="line"><span class="comment"> * @return: 无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">char</span> *path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span>         <span class="comment">//stat结构体</span></span><br><span class="line">    DIR *dir;               <span class="comment">//目录句柄</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">entry</span>;</span>   <span class="comment">//dirent结构体</span></span><br><span class="line">    <span class="keyword">char</span> current_path[<span class="number">255</span>]; <span class="comment">//当前的路径，最长255</span></span><br><span class="line">    <span class="comment">//note:一定要用lstat，否则可能会出现有些文件打不开的情况，下面同理</span></span><br><span class="line">    <span class="keyword">int</span> ret = lstat(path, &amp;st); <span class="comment">//取出当前路径的i节点信息</span></span><br><span class="line">    <span class="comment">//成功获取stat</span></span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果是目录</span></span><br><span class="line">        <span class="keyword">if</span> (S_ISDIR(st.st_mode))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//打开目录</span></span><br><span class="line">            dir = opendir(path);</span><br><span class="line">            <span class="comment">//打开失败</span></span><br><span class="line">            <span class="keyword">if</span> (dir == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(RED <span class="string">"ERROR[%d] open dir \"%s\": %s\n"</span> NONE, errno, path, strerror(errno));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//打开成功</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                entry = readdir(dir);</span><br><span class="line">                <span class="comment">//只要没有读到目录尾就一直读</span></span><br><span class="line">                <span class="keyword">while</span> (entry != <span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//去掉目录中的.和..</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(entry-&gt;d_name, <span class="string">"."</span>) != <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(entry-&gt;d_name, <span class="string">".."</span>) != <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//构造当前目录下各文件路径</span></span><br><span class="line">                        <span class="built_in">strcpy</span>(current_path, path);</span><br><span class="line">                        <span class="comment">//忽略路径最后一个字符为‘/’</span></span><br><span class="line">                        <span class="keyword">if</span> (current_path[<span class="built_in">strlen</span>(current_path) - <span class="number">1</span>] != <span class="string">'/'</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">strcat</span>(current_path, <span class="string">"/"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="built_in">strcat</span>(current_path, entry-&gt;d_name);</span><br><span class="line">                        <span class="comment">//获取当前目录下面各文件的stat</span></span><br><span class="line">                        ret = lstat(current_path, &amp;st);</span><br><span class="line">                        <span class="comment">//成功获取stat</span></span><br><span class="line">                        <span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">//输出</span></span><br><span class="line">                            <span class="comment">//是否显示.开头的文件(包括目录文件)</span></span><br><span class="line">                            <span class="keyword">if</span> (opts[_a] || entry-&gt;d_name[<span class="number">0</span>] != <span class="string">'.'</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                show(st, current_path);</span><br><span class="line">                                <span class="comment">//如果还是目录并且指定了选项-r，则进行递归</span></span><br><span class="line">                                <span class="comment">//也就是说current_path一定是目录</span></span><br><span class="line">                                <span class="keyword">if</span> (S_ISDIR(st.st_mode) &amp;&amp; opts[_r])</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="built_in">run</span>(current_path);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//失败输出错误信息</span></span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(RED <span class="string">"ERROR[%d] read file \"%s\": %s\n"</span> NONE, errno, current_path, strerror(errno));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//继续读下一个</span></span><br><span class="line">                    entry = readdir(dir);</span><br><span class="line">                &#125;</span><br><span class="line">                closedir(dir);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果是文件，直接打印</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            show(st, path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//失败输出错误信息</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(RED <span class="string">"ERROR[%d] read file \"%s\": %s\n"</span> NONE, errno, path, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @name: show_mode</span></span><br><span class="line"><span class="comment"> * @author: 苇名一心</span></span><br><span class="line"><span class="comment"> * @msg: //输出文件的权限及文件类型（用于-d选项中）</span></span><br><span class="line"><span class="comment"> * @param：mode_t mode，文件的mode </span></span><br><span class="line"><span class="comment"> * @return: 无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_mode</span><span class="params">(<span class="keyword">mode_t</span> mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> str[] = <span class="string">"----------"</span>;</span><br><span class="line">    <span class="keyword">if</span> (S_ISREG(mode))</span><br><span class="line">        str[pos] = <span class="string">'-'</span>; <span class="comment">//普通文件</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (S_ISBLK(mode))</span><br><span class="line">        str[pos] = <span class="string">'b'</span>; <span class="comment">//块设备文件</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (S_ISDIR(mode))</span><br><span class="line">        str[pos] = <span class="string">'d'</span>; <span class="comment">//目录文件</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (S_ISCHR(mode))</span><br><span class="line">        str[pos] = <span class="string">'c'</span>; <span class="comment">//字符设备文件</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (S_ISLNK(mode))</span><br><span class="line">        str[pos] = <span class="string">'l'</span>; <span class="comment">//符号连接文件</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (S_ISFIFO(mode))</span><br><span class="line">        str[pos] = <span class="string">'p'</span>; <span class="comment">//命名管道文件</span></span><br><span class="line">    <span class="comment">//按位取与，获得文件所有者权限</span></span><br><span class="line">    pos++;</span><br><span class="line">    <span class="keyword">if</span> (S_IRUSR &amp; mode)</span><br><span class="line">        str[pos] = <span class="string">'r'</span>;</span><br><span class="line">    pos++;</span><br><span class="line">    <span class="keyword">if</span> (S_IWUSR &amp; mode)</span><br><span class="line">        str[pos] = <span class="string">'w'</span>;</span><br><span class="line">    pos++;</span><br><span class="line">    <span class="keyword">if</span> (S_IXUSR &amp; mode)</span><br><span class="line">        str[pos] = <span class="string">'x'</span>;</span><br><span class="line">    <span class="comment">//按位取与，获得同组用户权限</span></span><br><span class="line">    pos++;</span><br><span class="line">    <span class="keyword">if</span> (S_IRGRP &amp; mode)</span><br><span class="line">        str[pos] = <span class="string">'r'</span>;</span><br><span class="line">    pos++;</span><br><span class="line">    <span class="keyword">if</span> (S_IWGRP &amp; mode)</span><br><span class="line">        str[pos] = <span class="string">'w'</span>;</span><br><span class="line">    pos++;</span><br><span class="line">    <span class="keyword">if</span> (S_IXGRP &amp; mode)</span><br><span class="line">        str[pos] = <span class="string">'x'</span>;</span><br><span class="line">    <span class="comment">//按位取与，获得其他用户权限</span></span><br><span class="line">    pos++;</span><br><span class="line">    <span class="keyword">if</span> (S_IROTH &amp; mode)</span><br><span class="line">        str[pos] = <span class="string">'r'</span>;</span><br><span class="line">    pos++;</span><br><span class="line">    <span class="keyword">if</span> (S_IWOTH &amp; mode)</span><br><span class="line">        str[pos] = <span class="string">'w'</span>;</span><br><span class="line">    pos++;</span><br><span class="line">    <span class="keyword">if</span> (S_IXOTH &amp; mode)</span><br><span class="line">        str[pos] = <span class="string">'x'</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @name: show</span></span><br><span class="line"><span class="comment"> * @author: 苇名一心</span></span><br><span class="line"><span class="comment"> * @msg: 展示文件信息</span></span><br><span class="line"><span class="comment"> * @param: st为文件stat结构体，path为文件路径 </span></span><br><span class="line"><span class="comment"> * @return: 无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(struct stat st, <span class="keyword">char</span> *path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//是否对文件大小最小值有要求</span></span><br><span class="line">    <span class="comment">//如果opts[_l]为1，说明有要求，!opts[_l]=0</span></span><br><span class="line">    <span class="comment">//0||st.st_size &gt; min_size=st.st_size &gt; min_size</span></span><br><span class="line">    <span class="comment">//因此刚好可以限制文件大小</span></span><br><span class="line">    <span class="comment">//如果opts[_l]为0，说明没有要求，!opts[_l]=1</span></span><br><span class="line">    <span class="comment">//1||st.st_size &gt; min_size=1</span></span><br><span class="line">    <span class="comment">//因此限制无效，直接通过，没有限制文件大小</span></span><br><span class="line">    <span class="comment">//以下其他命令同理</span></span><br><span class="line">    <span class="keyword">if</span> (!opts[_l] || st.st_size &gt;= min_size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//是否对文件大小最大值有要求</span></span><br><span class="line">        <span class="keyword">if</span> (!opts[_h] || st.st_size &lt;= max_size)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//是否对文件修改时间有要求</span></span><br><span class="line">            <span class="comment">//st_mtime域代表了文件的最近改变时间</span></span><br><span class="line">            <span class="comment">//((current_time - st.st_mtime) / (24 * 60 * 60))可以得到天数</span></span><br><span class="line">            <span class="keyword">if</span> (!opts[_m] || ((current_time - st.st_mtime) / (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>)) &lt; limit_day)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (opts[_d])</span><br><span class="line">                &#123;</span><br><span class="line">                    show_mode(st.st_mode);</span><br><span class="line">                    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> *<span class="title">user</span>;</span></span><br><span class="line">                    user = getpwuid(st.st_uid);</span><br><span class="line">                    <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">group</span>;</span></span><br><span class="line">                    group = getgrgid(st.st_gid);</span><br><span class="line">                    <span class="keyword">char</span> *time_str;</span><br><span class="line">                    time_str = ctime(&amp;st.st_ctime);</span><br><span class="line">                    <span class="comment">//将日期最后的'\n'去掉</span></span><br><span class="line">                    time_str[<span class="built_in">strlen</span>(time_str) - <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">                    <span class="keyword">if</span> (S_ISDIR(st.st_mode))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%5lu  %-10s%-10s%-15ld%s  "</span> YELLOW <span class="string">"%s\n"</span> NONE,</span><br><span class="line">                               st.st_nlink, user-&gt;pw_name, group-&gt;gr_name, st.st_size, time_str, path);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (S_ISREG(st.st_mode))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%5lu  %-10s%-10s%-15ld%s  %s\n"</span>,</span><br><span class="line">                               st.st_nlink, user-&gt;pw_name, group-&gt;gr_name, st.st_size, time_str, path);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%5lu  %-10s%-10s%-15ld%s  "</span> CYAN <span class="string">"%s\n"</span> NONE,</span><br><span class="line">                               st.st_nlink, user-&gt;pw_name, group-&gt;gr_name, st.st_size, time_str, path);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (S_ISDIR(st.st_mode))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(YELLOW <span class="string">"%s\n"</span> NONE, path);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (S_ISREG(st.st_mode))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, path);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(CYAN <span class="string">"%s\n"</span> NONE, path);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文是关于Linux中的ls的简化版，遍历目录小程序。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://666wxy666.github.io/categories/Linux/"/>
    
      <category term="上机实战" scheme="https://666wxy666.github.io/categories/Linux/%E4%B8%8A%E6%9C%BA%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="Linux" scheme="https://666wxy666.github.io/tags/Linux/"/>
    
      <category term="实战" scheme="https://666wxy666.github.io/tags/%E5%AE%9E%E6%88%98/"/>
    
      <category term="ls" scheme="https://666wxy666.github.io/tags/ls/"/>
    
      <category term="遍历目录" scheme="https://666wxy666.github.io/tags/%E9%81%8D%E5%8E%86%E7%9B%AE%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux 上机实战3 shell脚本程序设计</title>
    <link href="https://666wxy666.github.io/2020/05/08/Linux-%E4%B8%8A%E6%9C%BA%E5%AE%9E%E6%88%983-shell%E8%84%9A%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>https://666wxy666.github.io/2020/05/08/Linux-%E4%B8%8A%E6%9C%BA%E5%AE%9E%E6%88%983-shell%E8%84%9A%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</id>
    <published>2020-05-08T14:10:54.414Z</published>
    <updated>2020-05-21T14:17:53.842Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本文是关于Linux中的shell脚本程序设计，有几个小Demo。</strong></p><a id="more"></a><h2 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h2><h3 id="1、生成TCP-活动状况报告"><a href="#1、生成TCP-活动状况报告" class="headerlink" title="1、生成TCP 活动状况报告"></a>1、生成TCP 活动状况报告</h3><p>​ netstat –statistics 命令可以列出tcp等协议的统计信息。编写 shell 脚本程序，每隔1分钟生成1行信息：当前时间；这一分钟内 TCP 发送了多少报文；接收了多少报文；收发报文总数；行尾给出符号+或-或空格（+表示这分钟收发报文数比上分钟多10包以上，差别在 10 包或以内用空格，否则用符号-）。</p><p>运行示例如下：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501212725.jpg" alt="2020-05-01_212705" style="zoom:80%"><h3 id="2、下载bing-图库中图片"><a href="#2、下载bing-图库中图片" class="headerlink" title="2、下载bing 图库中图片"></a>2、下载bing 图库中图片</h3><p>​ 编写脚本程序bing.sh ，将访问<a href="https://bing.ioliu.cn/?p=23" target="_blank" rel="external nofollow noopener noreferrer">这个图库</a>中照片全部下载下来存放到本地 bing 目录中，上面 URL 中p=23 可以换成 p=1 到p=126 可访问 126 个页，每页有 12 个图，每个图的日期，中文说明信息和下载地址及文件名 html 文件中可提取。要求下载后的文件命名为“ 日期 中文说明 .jpg ”</p><p>例如</p><p>2019-08-03 野花草甸上的一只欧亚雕鸮，德国莱茵兰 普法尔茨 .jpg</p><ul><li><p>命令行参数<br>./bing.sh 后面可以跟两个参数，通过指定页号区间限定下载范围，没有参数时页号区间为 1-126。</p></li><li><p>要允许多个程序并发</p><p>例如：一个终端上启动 ./bing.sh 1 63 ，另一个终端上启动 ./bing.sh 64 126 ，这样在两个终端上同时下载，以加快任务完成的速度。</p></li><li><p>不重复下载已下载的图片</p><p>检查图片是否已下载，如果已下载，则不再下载，这样在一定程度上支持批量任务在被中断后可以从断点继续。</p></li><li><p>考虑下载文件出现故障的情况</p><p>如果一 个图片有 5MB ，接收 1.5MB 后网络断开，则残存一个不完整的图片文件。避免这种现象发生的一种方法是， wget 下载时使用一个临时文件名。判断 wget 是否成功，若成功则将文件改名为正式名称；若失败，删除临时文件。临时文件名的选取要考虑前述的并发问题，至少不可以固定一个名字导致两进程的争夺。</p></li></ul><h3 id="3、选做：获取更多图片"><a href="#3、选做：获取更多图片" class="headerlink" title="3、选做：获取更多图片"></a>3、选做：获取更多图片</h3><p>对已设计好的bing sh 进一步扩充，允许下面的命令行参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bing.sh rand 500</span><br></pre></td></tr></table></figure><p>实现的功能为：执行500 次随机获取。每次成功的随机获取会得到一个图片，检查一下这个图片是否本地已存在。如果已存在，丢弃，否则保存。</p><p>访问https ://bing.ioliu.cn/v1/rand? json 可得到一个 json 数据，每次得到的内容是随机的，其中含有图片的日期、说明信息和获取它的 url 网址。新获得的文件命名方式与以前的程序相同。要求：文件名不同但是内容完全相同的图片丢弃，例如，下面两个文件虽然名字不同，但是内容是一样的，只保留其中一个文件。</p><p>2019-05-03 Ruff male displaying its plumage, Varanger Peninsula, Norway.jpg</p><p>2019-05-02 挪威瓦朗厄尔半岛上一只展示翎颌的雄性涉禽.jpg</p><h2 id="二、实验环境"><a href="#二、实验环境" class="headerlink" title="二、实验环境"></a>二、实验环境</h2><p>系统：Manjaro 20.0 基于 Arc Linux</p><p>编辑器：Visual Studio Code</p><h2 id="三、实验步骤"><a href="#三、实验步骤" class="headerlink" title="三、实验步骤"></a>三、实验步骤</h2><h3 id="1、生成TCP-活动状况报告-1"><a href="#1、生成TCP-活动状况报告-1" class="headerlink" title="1、生成TCP 活动状况报告"></a>1、生成TCP 活动状况报告</h3><ol><li><p>先在终端中运行命令查看输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat --statistics</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501213718.jpg" alt="Screenshot_20200430_200332" style="zoom:80%"></li><li><p>可以在Tcp下看到相关信息，我们感兴趣的内容是的上图红框圈起的部分，因此我们可以使用正则表达式配合grep、sed、awk命令，将它取出来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat --statistics | grep segments</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501214005.jpg" alt="Screenshot_20200430_200930" style="zoom:80%"></li><li><p>发现还不够，继续使用grep提取：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat --statistics | grep '[0-9][0-9]* segments</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501214057.jpg" alt="Screenshot_20200430_201017" style="zoom:80%"></li><li><p>再添加一个过滤条件，最终成功获取了所需信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat --statistics | grep '[0-9][0-9]* segments [rs][e][cn]</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501214307.jpg" alt="Screenshot_20200430_201123" style="zoom:80%"></li><li><p>这样，我们就可以直接使用awk命令，获取所需的列即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat --statistics | awk '/[0-9][0-9]* segments [rs][e][cn]/ &#123;print $1&#125;'</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501214431.jpg" alt="Screenshot_20200430_201208" style="zoom:80%"></li><li><p>使用date命令，可以获取当前日期时间。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date '+%Y-%m-%d %H:%M'</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501214633.jpg" alt="Screenshot_20200430_201338" style="zoom:80%"></li><li><p>因为要隔一分钟获取一次，程序的基本框架就是：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501214925.jpg" alt="2020-05-01_214903" style="zoom:80%"></li><li><p>详细的代码以及注释在最后的附录中，这里不再展示。</p></li><li><p>编写完后运行net.sh，发现不能运行，加上可执行权限即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x net.sh</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501215103.jpg" alt="Screenshot_20200430_201754"></p></li><li><p>运行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./net.sh</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501215216.jpg" alt="Screenshot_20200430_203848" style="zoom:80%"></li></ol><h3 id="2、下载bing-图库中图片-1"><a href="#2、下载bing-图库中图片-1" class="headerlink" title="2、下载bing 图库中图片"></a>2、下载bing 图库中图片</h3><ol><li><p>先去<a href="https://bing.ioliu.cn/?p=1" target="_blank" rel="external nofollow noopener noreferrer">bing图库</a>看一下网页的源码。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501215608.jpg" alt="Screenshot_20200430_204133" style="zoom:80%"><p>打开开发者工具。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501215644.jpg" alt="Screenshot_20200430_204302" style="zoom:80%"><p>我们感兴趣的内容即为下图中用红框圈起的3个部分。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501215728.jpg" alt="Screenshot_20200430_204405" style="zoom:80%"></li><li><p>使用wget命令尝试下载网页和图片。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -O 1.html https://bing.ioliu.cn/\?p\=1</span><br><span class="line">wget -O photo.jpg http://h1.ioliu.cn/bing/WhiteStorksNest_ZH-CN9809680903_640x480.jpg\?imageslim</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501220206.jpg" alt="Screenshot_20200430_205012" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501220218.jpg" alt="Screenshot_20200430_204759" style="zoom:80%"></li><li><p>查看下载的内容。</p><p>网页：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi 1.html</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501220338.jpg" alt="Screenshot_20200430_205434" style="zoom:80%"><p>图片：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501220424.jpg" alt="photo" style="zoom:80%"></li><li><p>下面进行把html中我们感兴趣的内容通过正则表达式配合grep、sed、awk命令，将它取出来。</p><ul><li><p><strong><em>文字介绍</em></strong></p><ol><li><p>先将无用的标签删除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 1.html | sed 's/&lt;[^&lt;&gt;]*&gt;/\n/g' | more</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501220914.jpg" alt="Screenshot_20200501_202154" style="zoom:80%"></li><li><p>发现我们想要的文字介绍都有符号“©”，因此使用awk可以轻松取出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 1.html | sed 's/&lt;[^&lt;&gt;]*&gt;/\n/g' | awk '/©/ &#123; print $0 &#125;' | more</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501221054.jpg" alt="Screenshot_20200501_202308" style="zoom:80%"></li><li><p>最后，使用sed把后面无用的（）中的内容去掉即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 1.html | sed 's/&lt;[^&lt;&gt;]*&gt;/\n/g' | awk '/©/ &#123; print $0 &#125;' | sed 's/(.*)//g' | more</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501221223.jpg" alt="Screenshot_20200501_202347" style="zoom:80%"></li></ol></li><li><p><strong><em>日期</em></strong></p><p>同样是先将无用的标签去掉，发现日期有共同的特点就是“数字-数字-数字”，因此用awk即可取出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 1.html | sed 's/&lt;[^&lt;&gt;]*&gt;/\n/g' | awk '/[0-9][0-9]*-[0-9][0-9]*-[0-9][0-9]*/ &#123; print $0 &#125;' | more</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501221416.jpg" alt="Screenshot_20200501_202429"></p></li><li><p><strong><em>网址</em></strong></p><ol><li><p>因为网址在标签中，我们就不能先将标签取出了。发现我们所需的内容在一行中，不好操作，因此先将“src=””替换为换行，刚好使我们所需的网址位于每行的开头。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 1.html | sed 's/src="/\n/g' | more</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501221727.jpg" alt="Screenshot_20200501_202520" style="zoom:80%"></li><li><p>发现所有的网址都以“http:”开头，因此使用awk即可轻松取出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 1.html | sed 's/src="/\n/g' | awk '/^http:/ &#123; print $1 &#125;' | more</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501222020.jpg" alt="Screenshot_20200501_203215" style="zoom:80%"></li><li><p>最后，用sed删掉行尾无用的内容即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 1.html | sed 's/src="/\n/g' | awk '/^http:/ &#123; print $1 &#125;' | sed 's/"&gt;&lt;a//g' | more</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501222136.jpg" alt="Screenshot_20200501_203246" style="zoom:80%"></li><li><p>最新版本修复了分辨率的问题，再使用sed将640x480改为1920x1080即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 1.html | sed 's/src="/\n/g' | awk '/^http:/ &#123; print $1 &#125;' | sed -e 's/"&gt;&lt;a//g' -e 's/640x480/1920x1080/g' | more</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200505220912.jpg" alt="Screenshot_20200505_215024" style="zoom:80%"></li></ol></li></ul></li><li><p>详细的代码和注释见最后的附录。</p></li><li><p>运行程序，依然需要先赋予执行权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod u+x bing.sh</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501222341.jpg" alt="Screenshot_20200501_203357" style="zoom:80%"><ul><li><p>不带参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bing.sh</span><br></pre></td></tr></table></figure><p>发现程序正常运行。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501225218.jpg" alt="Screenshot_20200501_224148" style="zoom:80%"><p>在运行过程中故意强制退出。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501225230.jpg" alt="Screenshot_20200501_224207" style="zoom:80%"><p>因为程序强制退出，会留下一个下载未完全的文件。但是完全不会受到影响，下一次运行时，会自动接续下载。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501225355.jpg" alt="Screenshot_20200501_224246" style="zoom:80%"></li><li><p>两个参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bing.sh 1 3</span><br></pre></td></tr></table></figure><p>因为上一个命令已经下载了一部分，已经下载过的不会再下载，接着上一次下载的位置继续下载。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501225413.jpg" alt="Screenshot_20200501_203751" style="zoom:80%"><p>下载完成。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501225521.jpg" alt="Screenshot_20200501_203831" style="zoom:80%"><p>查看下载的图片，发现是刚好36张，1-3页。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501225606.jpg" alt="Screenshot_20200501_203644" style="zoom:80%"></li><li><p>一个参数（自己额外实现的功能）</p><p>如果只输入一个参数，那么将从第一页下载到输入的参数页数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bing 2</span><br></pre></td></tr></table></figure><p>因为上面已经下载了1-3页，因此不会重复下载。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501225758.jpg" alt="Screenshot_20200501_204728" style="zoom:80%"></li><li><p>并发执行（自己额外实现的功能，下载的内容有冲突）</p><p>终端1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bing.sh</span><br></pre></td></tr></table></figure><p>终端2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bing.sh 1 3</span><br></pre></td></tr></table></figure><p>我写的代码，专门考虑了并发的情况，使用当前进程id作为缓冲文件名，从而不会与其他的程序产生冲突。我额外实现了，并发执行时，即使下载的内容有冲突，也不会产生错误。但是可能有一个小问题就是如果第一个程序检测到了a图片没有下载，开始下载了，但是在第一个程序还没下载完成时，刚好第二个程序也检测到了a图片没有下载，可能会重复下载，但是如果第二个程序检测到了a图片已经下载完成，则不会重复下载，所以也无伤大雅，不会产生致命错误。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501230410.jpg" alt="Screenshot_20200501_205414" style="zoom:80%"><p>查看下载的图片：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501230450.jpg" alt="Screenshot_20200501_205654" style="zoom:80%"></li><li><p>并发执行（下载的内容无冲突）</p><p>终端1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bing.sh 1 3</span><br></pre></td></tr></table></figure><p>终端2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bing.sh 4 6</span><br></pre></td></tr></table></figure><p>如果下载的内容没有冲突就更不会产生任何问题了。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501230501.jpg" alt="Screenshot_20200501_205800" style="zoom:80%"><p>完美下载完成。</p><p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501230518.jpg" alt="Screenshot_20200501_205820"></p><p>查看下载的图片，刚好是72张，1-6页。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501230548.jpg" alt="Screenshot_20200501_205857" style="zoom:80%"></li><li><p>差错处理</p><p>各种错误处理的情况：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200501230858.jpg" alt="Screenshot_20200501_204336" style="zoom:80%"></li></ul></li></ol><h3 id="3、选做：获取更多图片-1"><a href="#3、选做：获取更多图片-1" class="headerlink" title="3、选做：获取更多图片"></a>3、选做：获取更多图片</h3><ol><li><p>先访问网址<a href="https://bing.ioliu.cn/v1/rand?type=json" target="_blank" rel="external nofollow noopener noreferrer">https://bing.ioliu.cn/v1/rand?type=json</a>查看json文件的格式</p><p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200502182121.jpg" alt="2020-05-02_182006"></p></li><li><p>把json中我们感兴趣的内容通过正则表达式配合grep、sed、awk命令，将它取出来：</p><p>这些都比较简单，根据json的key就很轻松的取出来了</p><ul><li><p><strong>文字介绍</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat bing/$$.json | sed 's/.*"copyright":"\(.*\)(.*©.*)"&#125;,.*/\1/g'</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200502184129.jpg" alt="Screenshot_20200502_183642" style="zoom:80%"></li><li><p><strong>日期</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat bing/$$.json | sed 's/.*"enddate":"\([0-9][0-9][0-9][0-9]\)\([0-9][0-9]\)\([0-9][0-9]\)",.*/\1-\2-\3/g'</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200502184145.jpg" alt="Screenshot_20200502_183756" style="zoom:80%"></li><li><p><strong>网址</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat bing/$$.json | sed 's/.*"url":"\(http:.*imageslim\)",.*/\1/g'</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200502184156.jpg" alt="Screenshot_20200502_183849" style="zoom:80%"></li></ul></li><li><p>详细的代码和注释见最后的附录。</p></li><li><p>运行程序，依然需要先赋予执行权限。</p><p><strong><em>PS：v2.0在v1.0的基础上进行了修改，优化了部分代码，除了这次的功能，完全保留了v1.0的功能，并且random模式也可以并发，就不展示了。</em></strong></p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200502184252.jpg" alt="Screenshot_20200502_171455" style="zoom:80%"><p>查看下载的图片：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200502184324.jpg" alt="Screenshot_20200502_173042" style="zoom:80%"></li><li><p>差错处理</p><p>各种错误处理的情况：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200502184415.jpg" alt="Screenshot_20200502_171600" style="zoom:80%"></li></ol><h3 id="4、升级版bing-sh"><a href="#4、升级版bing-sh" class="headerlink" title="4、升级版bing.sh"></a>4、升级版bing.sh</h3><p>在bing2.sh的基础上升级的v3.0版的bing3.sh，优化了bing2.sh的部分判断逻辑和代码，相较于bing2.sh移除了diff和cmp比较，使用了更为高效的md5比较，且将md5校验信息存到文件中，供下次使用，加速判断。</p><p>运行截图：</p><p>这里都是展示了更为高级的并发下载的情况，非并发就不再展示了。</p><ol><li><p>两个终端分别进行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bing3.sh 1 3</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bing3.sh 1 4</span><br></pre></td></tr></table></figure><p>结果：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200504110120.jpg" alt="Screenshot_20200504_104053" style="zoom:80%"><p>完美执行成功，且已经下载过的不会重复下载：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200504110205.jpg" alt="Screenshot_20200504_104113" style="zoom:80%"><p>查看图片：</p><p>刚好1-4页48个图片加1个md5校验文件，共49个文件</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200504110222.jpg" alt="Screenshot_20200504_104143" style="zoom:80%"><p>md5校验文件md5.txt也成功生成了。</p></li><li><p>两个终端分别进行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bing3.sh rand 10</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bing3.sh rand 10</span><br></pre></td></tr></table></figure><p>结果：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200504110546.jpg" alt="Screenshot_20200504_101820" style="zoom:80%"><p>查看图片：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200504110616.jpg" alt="Screenshot_20200504_101905" style="zoom:80%"></li></ol><h3 id="5、小修复"><a href="#5、小修复" class="headerlink" title="5、小修复"></a>5、小修复</h3><p>修复了分辨率过小，导致下载的图片不清晰的问题，现在分辨率统一为1920x1080。</p><p>由文件大小也可以看出，分辨率已经给更改。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200505220602.jpg" alt="Screenshot_20200505_214913" style="zoom:80%"><p>打开图片查看，图片已经很清晰了，分辨率为1920x1080。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200505220644.jpg" alt="Screenshot_20200505_215821" style="zoom:80%"><h2 id="四、实验总结及感受"><a href="#四、实验总结及感受" class="headerlink" title="四、实验总结及感受"></a>四、实验总结及感受</h2><p>​ 在这次实验中，明显感受到了shell脚本程序的编程和C语言等有很大的差别，尤为要注意各种双引号，单引号，空格啊之类的，拉下来就完全错误。在实验中还遇到了一个很有意思的小问题，就是echo命令如果后面的变量中有换行的话，直接使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $xxx</span><br></pre></td></tr></table></figure><p>会将换行变成空格，但是如果加上双引号括起来，就能正常输出换行了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "$xxx"</span><br></pre></td></tr></table></figure><p>在实验中还熟悉了各种分支循环命令的使用，在shell中的printf格式化输出，并且复习了前面学习的正则表达式和grep、sed、awk文本处理三剑客，收获很大。</p><h2 id="五、附录"><a href="#五、附录" class="headerlink" title="五、附录"></a>五、附录</h2><h3 id="1、net-sh"><a href="#1、net-sh" class="headerlink" title="1、net.sh"></a>1、net.sh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @Copyright: Copyright (c) 2020 苇名一心 All Rights Reserved.</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @Description: 生成TCP 活动状况报告</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @Version: v1.0</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @Author: 苇名一心</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @Date: 2020-04-30 11:26:28</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @LastEditors: 苇名一心</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @LastEditTime: 2020-05-01 23:19:04</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取时间</span></span><br><span class="line">date_time=`date '+%Y-%m-%d %H:%M'`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这一分钟开始时的TCP报文数</span></span><br><span class="line">data1=`netstat --statistics | grep '[0-9][0-9]* segments [rs][e][cn]'`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 发送</span></span><br><span class="line">send1=`echo $data1 | awk '&#123;print $4&#125;'`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 接收</span></span><br><span class="line">recv1=`echo $data1 | awk '&#123;print $1&#125;'`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 等60s</span></span><br><span class="line">sleep 60</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这一分钟结束时的TCP报文数</span></span><br><span class="line">data_temp=`netstat --statistics | grep '[0-9][0-9]* segments [rs][e][cn]'`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 发送</span></span><br><span class="line">send_temp=`echo $data_temp | awk '&#123;print $4&#125;'`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 接收</span></span><br><span class="line">recv_temp=`echo $data_temp | awk '&#123;print $1&#125;'`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这一分钟内发送的TCP报文数</span></span><br><span class="line">send=`expr $send_temp - $send1`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这一分钟内接收的TCP报文数</span></span><br><span class="line">recv=`expr $recv_temp - $recv1`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这一分钟内收发TCP报文总数</span></span><br><span class="line">sum_temp=`expr $send + $recv`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出,第一次输出不加最后的符号</span></span><br><span class="line">printf '%-16s%8s%8s%8s\n' "$date_time" "$send" "$recv" "$sum_temp"</span><br><span class="line"></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    # 获取时间</span><br><span class="line">    date_time=`date '+%Y-%m-%d %H:%M'`</span><br><span class="line">    # 等60s</span><br><span class="line">    sleep 60</span><br><span class="line">    # 一分钟后的TCP报文数</span><br><span class="line">    data2=`netstat --statistics | grep '[0-9][0-9]* segments [rs][e][cn]'`</span><br><span class="line">    # 发送</span><br><span class="line">    send2=`echo $data2 | awk '&#123;print $4&#125;'`</span><br><span class="line">    # 接收</span><br><span class="line">    recv2=`echo $data2 | awk '&#123;print $1&#125;'`</span><br><span class="line">    # 这一分钟内发送的TCP报文数</span><br><span class="line">    send=`expr $send2 - $send_temp`</span><br><span class="line">    # 这一分钟内接收的TCP报文数</span><br><span class="line">    recv=`expr $recv2 - $recv_temp`</span><br><span class="line">    # 这一分钟内收发TCP报文总数</span><br><span class="line">    sum2=`expr $send + $recv`</span><br><span class="line">    # 判断最后的符号</span><br><span class="line">    # 后-前&gt;10,为+</span><br><span class="line">    if [ `expr $sum2 - $sum_temp` -gt 10 ]</span><br><span class="line">    then</span><br><span class="line">        sign='+'</span><br><span class="line">    # 前-后&gt;10,为-</span><br><span class="line">    elif [ `expr $sum_temp - $sum2` -gt 10 ]</span><br><span class="line">    then</span><br><span class="line">        sign='-'</span><br><span class="line">    # 其他情况,为空格</span><br><span class="line">    else</span><br><span class="line">        sign=' '</span><br><span class="line">    fi</span><br><span class="line">    # 输出</span><br><span class="line">    printf '%-16s%8s%8s%8s%5s\n' "$date_time" "$send" "$recv" "$sum2" "$sign"</span><br><span class="line">    # 保留上一次的数据,用于下一次比较</span><br><span class="line">    send_temp=$send2</span><br><span class="line">    recv_temp=$recv2</span><br><span class="line">    sum_temp=$sum2</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="2、bing-sh"><a href="#2、bing-sh" class="headerlink" title="2、bing.sh"></a>2、bing.sh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @Copyright: Copyright (c) 2020 苇名一心 All Rights Reserved.</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @Description: 下载bing 图库中图片</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @Version: 1.0</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @Author: 苇名一心</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @Date: 2020-05-01 08:54:37</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @LastEditors: 苇名一心</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @LastEditTime: 2020-05-05 21:55:22</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 错误代号:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1: 参数输入格式错误</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2: 输入的页数非整数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3: 输入的页数范围不在[1,126]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4: 开始页数&lt;结束页数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5: 获取下载页面失败</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6: 获取下载图片失败</span></span><br><span class="line"></span><br><span class="line">NONE="\e[0m"</span><br><span class="line">RED="\e[0;31m"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 读取命令行参数，并进行错误处理</span></span><br><span class="line">if [ $# = 0 ]</span><br><span class="line">then</span><br><span class="line">    start_page=1</span><br><span class="line">    end_page=126</span><br><span class="line"><span class="meta">#</span><span class="bash"> 额外增加了一个，如果只输入一个参数，代表从第1页到输入的参数的页数</span></span><br><span class="line">elif [ $# = 1 ]</span><br><span class="line">then</span><br><span class="line">    start_page=1</span><br><span class="line">    end_page=$1</span><br><span class="line">elif [ $# = 2 ]</span><br><span class="line">then</span><br><span class="line">    start_page=$1</span><br><span class="line">    end_page=$2</span><br><span class="line">else</span><br><span class="line">    printf $RED'Error: Please input the right arguments\n'$NONE</span><br><span class="line">    echo "Usage: $0 [start page] [end page]  download photos in pages from [start page] to [end page]"</span><br><span class="line">    echo "   or: $0 [end page]               download photos in pages from [1] to [end page]"</span><br><span class="line">    echo "   or: $0 (with no arguments)      download photos in pages from 1 to 126 by default"</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入的页数非整数</span></span><br><span class="line">if ! expr $start_page + 0 &gt; /dev/null 2&gt;&amp;1 || ! expr $end_page + 0 &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">then</span><br><span class="line">    printf $RED'Error: Your input page is not an integer\n'$NONE</span><br><span class="line">    echo "Usage: $0 [start page] [end page]  download photos in pages from [start page] to [end page]"</span><br><span class="line">    echo "   or: $0 [end page]               download photos in pages from [1] to [end page]"</span><br><span class="line">    echo "   or: $0 (with no arguments)      download photos in pages from 1 to 126 by default"</span><br><span class="line">    exit 2</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入的页数范围不在[1,126]</span></span><br><span class="line">if [ $start_page -lt 1 -o $end_page -lt 1 -o $start_page -gt 126 -o $end_page -gt 126 ]</span><br><span class="line">then</span><br><span class="line">    printf $RED'Error: Your input page not in the range [1,126]\n'$NONE</span><br><span class="line">    echo "Usage: $0 [start page] [end page]  download photos in pages from [start page] to [end page]"</span><br><span class="line">    echo "   or: $0 [end page]               download photos in pages from [1] to [end page]"</span><br><span class="line">    echo "   or: $0 (with no arguments)      download photos in pages from 1 to 126 by default"</span><br><span class="line">    exit 3</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开始页数&lt;结束页数</span></span><br><span class="line">if [ $start_page -gt $end_page ]</span><br><span class="line">then</span><br><span class="line">    printf $RED'Error: Your input [start_page] &gt; [end page]\n'$NONE</span><br><span class="line">    echo "Usage: $0 [start page] [end page]  download photos in pages from [start page] to [end page]"</span><br><span class="line">    echo "   or: $0 [end page]               download photos in pages from [1] to [end page]"</span><br><span class="line">    echo "   or: $0 (with no arguments)      download photos in pages from 1 to 126 by default"</span><br><span class="line">    exit 4</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo "Your input page range is [$start_page,$end_page]"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断并创建目录</span></span><br><span class="line">if [ ! -d bing ]</span><br><span class="line">then</span><br><span class="line">    mkdir bing</span><br><span class="line">    echo "Work directory bing is created"</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 缓存目录这里使用当前进程ID号作为区分，防止受到影响，下面下载图片使用$$.jpg作为缓存也是同样的道理</span></span><br><span class="line">if [ ! -d bing/html_$$ ]</span><br><span class="line">then</span><br><span class="line">    mkdir bing/html_$$</span><br><span class="line">    echo "Cache directory bing/html_$$ is created"</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对页范围内的循环下载</span></span><br><span class="line">for i in `seq $start_page $end_page`</span><br><span class="line">do</span><br><span class="line">    # 判断是否已经下载</span><br><span class="line">    if [ ! -f bing/html_$$/$i.html ]</span><br><span class="line">    then</span><br><span class="line">        echo "Download page $i……"</span><br><span class="line">        if wget -O bing/html_$$/$i.html "https://bing.ioliu.cn/?p=$i" &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">        then</span><br><span class="line">            echo "Page $i download successfully"</span><br><span class="line">        else</span><br><span class="line">            if [ -f bing/html_$$/$i.html ]</span><br><span class="line">            then</span><br><span class="line">                rm bing/html_$$/$i.html</span><br><span class="line">            fi</span><br><span class="line">            printf $RED"Error: Page $i download failed\n"$NONE</span><br><span class="line">            exit 5</span><br><span class="line">        fi</span><br><span class="line">    else</span><br><span class="line">        echo "Page $i already exists"</span><br><span class="line">    fi</span><br><span class="line">    # 获取该页所以图片信息</span><br><span class="line">    name_list=`cat bing/html_$$/$i.html | sed 's/&lt;[^&lt;&gt;]*&gt;/\n/g' | awk '/©/ &#123; print $0 &#125;' | sed 's/(.*)//g'`</span><br><span class="line">    date_list=`cat bing/html_$$/$i.html | sed 's/&lt;[^&lt;&gt;]*&gt;/\n/g' | awk '/[0-9][0-9]*-[0-9][0-9]*-[0-9][0-9]*/ &#123; print $0 &#125;'`</span><br><span class="line">    url_list=`cat bing/html_$$/$i.html | sed 's/src="/\n/g' | awk '/^http:/ &#123; print $1 &#125;' | sed -e 's/"&gt;&lt;a//g' -e 's/640x480/1920x1080/g'`</span><br><span class="line">    # 对该页内图片循环下载</span><br><span class="line">    for j in `seq 1 12`</span><br><span class="line">    do</span><br><span class="line">        # 获取图片信息</span><br><span class="line">        name=`echo "$name_list" | awk "NR==$j"`</span><br><span class="line">        date=`echo "$date_list" | awk "NR==$j"`</span><br><span class="line">        url=`echo "$url_list" | awk "NR==$j"`</span><br><span class="line">        file_name="$date $name.jpg"</span><br><span class="line">        # 清理残留缓存</span><br><span class="line">        if [ -f "bing/$$.jpg" ]</span><br><span class="line">        then</span><br><span class="line">            rm "bing/$$.jpg"</span><br><span class="line">        fi</span><br><span class="line">        # 判断是否已经下载</span><br><span class="line">        if [ ! -f "bing/$file_name" ]</span><br><span class="line">        then</span><br><span class="line">            echo "Download photo $i-$j……"</span><br><span class="line">            if wget -O bing/$$.jpg "$url" &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">            then</span><br><span class="line">                mv "bing/$$.jpg" "bing/$file_name"</span><br><span class="line">                echo "Photo $i-$j download successfully"</span><br><span class="line">            else</span><br><span class="line">                printf $RED"Error: Photo $i-$j download failed\n"$NONE</span><br><span class="line">                exit 6</span><br><span class="line">            fi</span><br><span class="line">        else</span><br><span class="line">            echo "Photo $i-$j already exists"</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"> 清理缓存</span></span><br><span class="line">echo "Cleaning……"</span><br><span class="line">if [ -d bing/html_$$ ]</span><br><span class="line">then</span><br><span class="line">    rm -r bing/html_$$</span><br><span class="line">fi</span><br><span class="line">echo "All done,Thanks for using!"</span><br></pre></td></tr></table></figure><h3 id="3、bing2-sh"><a href="#3、bing2-sh" class="headerlink" title="3、bing2.sh"></a>3、bing2.sh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @Copyright: Copyright (c) 2020 苇名一心 All Rights Reserved.</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @Description: </span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @Version: 2.0</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @Author: 苇名一心</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @Date: 2020-05-01 08:54:37</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @LastEditors: 苇名一心</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @LastEditTime: 2020-05-08 22:01:41</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 错误代号:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1: 参数输入格式错误</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2: 输入的页数非整数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3: 输入的页数范围不在[1,126]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4: 开始页数&lt;结束页数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5: 下载页面失败</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6: 下载图片失败</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 7: 输入的随机次数非整数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 8: 输入的随机次数&lt;1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 9: 下载json失败</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 10: 未知错误</span></span><br><span class="line"></span><br><span class="line">NONE="\e[0m"</span><br><span class="line">RED="\e[0;31m"</span><br><span class="line"><span class="meta">#</span><span class="bash"> rand=0，代表普通模式；rand&gt;0代表随机模式，rand的数值代表随机的次数</span></span><br><span class="line">rand=0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 读取命令行参数，并进行错误处理</span></span><br><span class="line">if [ $# = 0 ]</span><br><span class="line">then</span><br><span class="line">    start_page=1</span><br><span class="line">    end_page=126</span><br><span class="line"><span class="meta">#</span><span class="bash"> 额外增加了一个，如果只输入一个参数，代表从第1页到输入的参数的页数</span></span><br><span class="line">elif [ $# = 1 ]</span><br><span class="line">then</span><br><span class="line">    start_page=1</span><br><span class="line">    end_page=$1</span><br><span class="line">elif [ $# = 2 ]</span><br><span class="line">then</span><br><span class="line">    # 随机模式</span><br><span class="line">    if [ $1 = 'rand' ]</span><br><span class="line">    then</span><br><span class="line">        # 判断第二个参数是否为整数</span><br><span class="line">        if expr $2 + 0 &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">        then</span><br><span class="line">            # 输入的随机次数&lt;1</span><br><span class="line">            if [ $2 -lt 1 ]</span><br><span class="line">            then</span><br><span class="line">                printf $RED'Error: Your input [rand times] &lt; 1\n'$NONE</span><br><span class="line">                echo "Usage: $0 [start page] [end page]  download photos in pages from [start page] to [end page]"</span><br><span class="line">                echo "   or: $0 [end page]               download photos in pages from [1] to [end page]"</span><br><span class="line">                echo "   or: $0 (with no arguments)      download photos in pages from [1] to [126] by default"</span><br><span class="line">                echo "   or: $0 rand [rand times]          rand download photos of [rand times]"</span><br><span class="line">                exit 8</span><br><span class="line">            else</span><br><span class="line">                rand=$2</span><br><span class="line">            fi</span><br><span class="line">        # 输入的随机次数非整数</span><br><span class="line">        else</span><br><span class="line">            printf $RED'Error: Your input [rand times] is not an integer\n'$NONE</span><br><span class="line">            echo "Usage: $0 [start page] [end page]  download photos in pages from [start page] to [end page]"</span><br><span class="line">            echo "   or: $0 [end page]               download photos in pages from [1] to [end page]"</span><br><span class="line">            echo "   or: $0 (with no arguments)      download photos in pages from [1] to [126] by default"</span><br><span class="line">            echo "   or: $0 rand [rand times]          rand download photos of [rand times]"</span><br><span class="line">            exit 7</span><br><span class="line">        fi</span><br><span class="line">    # 普通模式</span><br><span class="line">    else</span><br><span class="line">        start_page=$1</span><br><span class="line">        end_page=$2</span><br><span class="line">        # 输入的页数非整数</span><br><span class="line">        if ! expr $start_page + 0 &gt; /dev/null 2&gt;&amp;1 || ! expr $end_page + 0 &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">        then</span><br><span class="line">            printf $RED'Error: Your input page is not an integer\n'$NONE</span><br><span class="line">            echo "Usage: $0 [start page] [end page]  download photos in pages from [start page] to [end page]"</span><br><span class="line">            echo "   or: $0 [end page]               download photos in pages from [1] to [end page]"</span><br><span class="line">            echo "   or: $0 (with no arguments)      download photos in pages from [1] to [126] by default"</span><br><span class="line">            echo "   or: $0 rand [rand times]        rand download photos of [rand times]"</span><br><span class="line">            exit 2</span><br><span class="line">        fi</span><br><span class="line">        # 输入的页数范围不在[1,126]</span><br><span class="line">        if [ $start_page -lt 1 -o $end_page -lt 1 -o $start_page -gt 126 -o $end_page -gt 126 ]</span><br><span class="line">        then</span><br><span class="line">            printf $RED'Error: Your input page not in the range [1,126]\n'$NONE</span><br><span class="line">            echo "Usage: $0 [start page] [end page]  download photos in pages from [start page] to [end page]"</span><br><span class="line">            echo "   or: $0 [end page]               download photos in pages from [1] to [end page]"</span><br><span class="line">            echo "   or: $0 (with no arguments)      download photos in pages from [1] to [126] by default"</span><br><span class="line">            echo "   or: $0 rand [rand times]        rand download photos of [rand times]"</span><br><span class="line">            exit 3</span><br><span class="line">        fi</span><br><span class="line">        # 开始页数&lt;结束页数</span><br><span class="line">        if [ $start_page -gt $end_page ]</span><br><span class="line">        then</span><br><span class="line">            printf $RED'Error: Your input [start_page] &gt; [end page]\n'$NONE</span><br><span class="line">            echo "Usage: $0 [start page] [end page]  download photos in pages from [start page] to [end page]"</span><br><span class="line">            echo "   or: $0 [end page]               download photos in pages from [1] to [end page]"</span><br><span class="line">            echo "   or: $0 (with no arguments)      download photos in pages from [1] to [126] by default"</span><br><span class="line">            echo "   or: $0 rand [rand times]        rand download photos of [rand times]"</span><br><span class="line">            exit 4</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数输入格式错误</span></span><br><span class="line">else</span><br><span class="line">    printf $RED'Error: Please input the right arguments\n'$NONE</span><br><span class="line">    echo "Usage: $0 [start page] [end page]  download photos in pages from [start page] to [end page]"</span><br><span class="line">    echo "   or: $0 [end page]               download photos in pages from [1] to [end page]"</span><br><span class="line">    echo "   or: $0 (with no arguments)      download photos in pages from [1] to [126] by default"</span><br><span class="line">    echo "   or: $0 rand [rand times]        rand download photos of [rand times]"</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断并创建工作目录</span></span><br><span class="line">if [ ! -d bing ]</span><br><span class="line">then</span><br><span class="line">    mkdir bing</span><br><span class="line">    echo "Work directory bing is created"</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 普通模式</span></span><br><span class="line">if [ $rand -eq 0 ]</span><br><span class="line">then</span><br><span class="line">    echo "##############Regular Mode##############"</span><br><span class="line">    echo "Your input page range is [$start_page,$end_page]"</span><br><span class="line">    # 对页范围内的循环下载</span><br><span class="line">    for i in `seq $start_page $end_page`</span><br><span class="line">    do</span><br><span class="line">        # 缓存文件使用当前进程ID号$$.html命名，防止受到影响，下面下载图片使用$$.jpg作为缓存也是同样的道理</span><br><span class="line">        echo "Download page $i……"</span><br><span class="line">        if wget -O bing/$$.html "https://bing.ioliu.cn/?p=$i" &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">        then</span><br><span class="line">            echo "Page $i download successfully"</span><br><span class="line">        else</span><br><span class="line">            if [ -f bing/$$.html ]</span><br><span class="line">            then</span><br><span class="line">                rm bing/$$.html</span><br><span class="line">            fi</span><br><span class="line">            printf $RED"Error: Page $i download failed\n"$NONE</span><br><span class="line">            exit 5</span><br><span class="line">        fi</span><br><span class="line">        # 获取该页所以图片信息</span><br><span class="line">        name_list=`cat bing/$$.html | sed 's/&lt;[^&lt;&gt;]*&gt;/\n/g' | awk '/©/ &#123; print $0 &#125;' | sed 's/(.*)//g'`</span><br><span class="line">        date_list=`cat bing/$$.html | sed 's/&lt;[^&lt;&gt;]*&gt;/\n/g' | awk '/[0-9][0-9]*-[0-9][0-9]*-[0-9][0-9]*/ &#123; print $0 &#125;'`</span><br><span class="line">        url_list=`cat bing/$$.html | sed 's/src="/\n/g' | awk '/^http:/ &#123; print $1 &#125;' | sed -e 's/"&gt;&lt;a//g' -e 's/640x480/1920x1080/g'`</span><br><span class="line">        # 对该页内图片循环下载</span><br><span class="line">        for j in `seq 1 12`</span><br><span class="line">        do</span><br><span class="line">            # 获取图片信息</span><br><span class="line">            name=`echo "$name_list" | awk "NR==$j"`</span><br><span class="line">            date=`echo "$date_list" | awk "NR==$j"`</span><br><span class="line">            url=`echo "$url_list" | awk "NR==$j"`</span><br><span class="line">            file_name="$date $name.jpg"</span><br><span class="line">            # 判断是否已经下载</span><br><span class="line">            if [ ! -f "bing/$file_name" ]</span><br><span class="line">            then</span><br><span class="line">                echo "Download photo $i-$j……"</span><br><span class="line">                if wget -O bing/$$.jpg "$url" &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">                then</span><br><span class="line">                    mv "bing/$$.jpg" "bing/$file_name"</span><br><span class="line">                    echo "Photo $i-$j download successfully"</span><br><span class="line">                else</span><br><span class="line">                    printf $RED"Error: Photo $i-$j download failed\n"$NONE</span><br><span class="line">                    exit 6</span><br><span class="line">                fi</span><br><span class="line">            else</span><br><span class="line">                echo "Photo $i-$j already exists"</span><br><span class="line">            fi</span><br><span class="line">        done</span><br><span class="line">    done</span><br><span class="line">    # 清理缓存</span><br><span class="line">    echo "Cleaning……"</span><br><span class="line">    rm bing/$$.html</span><br><span class="line"><span class="meta">#</span><span class="bash"> 随机模式</span></span><br><span class="line">elif [ $rand -gt 0 ]</span><br><span class="line">then</span><br><span class="line">    echo "##############Random Mode##############"</span><br><span class="line">    echo "Your input rand times is $rand"</span><br><span class="line">    # 循环随机下载</span><br><span class="line">    for k in `seq 1 $rand`</span><br><span class="line">    do</span><br><span class="line">        # 获取json</span><br><span class="line">        if wget -O bing/$$.json "https://bing.ioliu.cn/v1/rand?type=json" &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">        then</span><br><span class="line">            # 获取图片信息</span><br><span class="line">            name=`cat bing/$$.json | sed 's/.*"copyright":"\(.*\)(.*©.*)"&#125;,.*/\1/g'`</span><br><span class="line">            date=`cat bing/$$.json | sed 's/.*"enddate":"\([0-9][0-9][0-9][0-9]\)\([0-9][0-9]\)\([0-9][0-9]\)",.*/\1-\2-\3/g'`</span><br><span class="line">            url=`cat bing/$$.json | sed 's/.*"url":"\(http:.*imageslim\)",.*/\1/g'`</span><br><span class="line">            file_name="$date $name.jpg"</span><br><span class="line">            # 判断是否已经下载，先用文件名判断</span><br><span class="line">            if [ ! -f "bing/$file_name" ]</span><br><span class="line">            then</span><br><span class="line">                echo "Download photo $k……"</span><br><span class="line">                if wget -O bing/$$ "$url" &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">                then</span><br><span class="line">                    # 文件名不存在的，判断是否有文件大小相同的和内容相同的</span><br><span class="line">                    same=0</span><br><span class="line">                    for file in bing/*.jpg</span><br><span class="line">                    do</span><br><span class="line">                        # 先判断bing文件夹中是否有.jpg文件，如果没有的话*不会被替换，会出错</span><br><span class="line">                        if [ "$file" = 'bing/*.jpg' ]</span><br><span class="line">                        then</span><br><span class="line">                            break</span><br><span class="line">                        fi</span><br><span class="line">                        # 先比较文件大小是否相同，加快速度</span><br><span class="line">                        if [ `stat -c%s "$file"` = `ls -l "bing/$$" | awk '&#123; print $5 &#125;'` ]</span><br><span class="line">                        then</span><br><span class="line">                            # 大小相同再比较内容</span><br><span class="line">                            # diff命令主要用于比较文本文件，比较二进制文件效率较低</span><br><span class="line">                            # if diff "$file" "bing/$$" &gt; /dev/null</span><br><span class="line">                            # then</span><br><span class="line">                            #     # 相同</span><br><span class="line">                            #     same=1</span><br><span class="line">                            #     break</span><br><span class="line">                            # fi</span><br><span class="line">                            # md5sum计算文件md5值，进行比较</span><br><span class="line">                            # if [ `md5sum "$file" | awk '&#123; print $1 &#125;'` = `md5sum "bing/$$" | awk '&#123; print $1 &#125;'` ]</span><br><span class="line">                            # then</span><br><span class="line">                            #     # 相同</span><br><span class="line">                            #     same=1</span><br><span class="line">                            #     break</span><br><span class="line">                            # fi</span><br><span class="line">                            # cmp命令是逐字节比较</span><br><span class="line">                            if cmp -s "$file" "bing/$$"</span><br><span class="line">                            then</span><br><span class="line">                                # 相同</span><br><span class="line">                                same=1</span><br><span class="line">                                break</span><br><span class="line">                            fi</span><br><span class="line">                        fi</span><br><span class="line">                    done</span><br><span class="line">                    if [ $same = 1 ]</span><br><span class="line">                    then</span><br><span class="line">                        rm bing/$$</span><br><span class="line">                        echo "Photo $k already exists"</span><br><span class="line">                    else</span><br><span class="line">                        mv "bing/$$" "bing/$file_name"</span><br><span class="line">                        echo "Photo $k download successfully"</span><br><span class="line">                    fi</span><br><span class="line">                else</span><br><span class="line">                    printf $RED"Error: Photo $k download failed\n"$NONE</span><br><span class="line">                    exit 6</span><br><span class="line">                fi</span><br><span class="line">            else</span><br><span class="line">                echo "Photo $k already exists"</span><br><span class="line">            fi</span><br><span class="line">        else</span><br><span class="line">            if [ -f bing/$$.json ]</span><br><span class="line">            then</span><br><span class="line">                rm bing/$$.json</span><br><span class="line">            fi</span><br><span class="line">            printf $RED"Error: Json $k download failed\n"$NONE</span><br><span class="line">            exit 9</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">    # 清理缓存</span><br><span class="line">    echo "Cleaning……"</span><br><span class="line">    rm bing/$$.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 未知错误</span></span><br><span class="line">else</span><br><span class="line">    printf $RED"Error: Unkonwn error\n"$NONE</span><br><span class="line">    exit 10</span><br><span class="line">fi</span><br><span class="line">echo "All done,Thanks for using!"</span><br></pre></td></tr></table></figure><h3 id="3、bing3-sh"><a href="#3、bing3-sh" class="headerlink" title="3、bing3.sh"></a>3、bing3.sh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @Copyright: Copyright (c) 2020 苇名一心 All Rights Reserved.</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @Description: </span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @Version: 3.0</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @Author: 苇名一心</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @Date: 2020-05-01 08:54:37</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @LastEditors: 苇名一心</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> @LastEditTime: 2020-05-08 22:04:23</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 错误代号:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1: 参数输入格式错误</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2: 输入的页数非整数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3: 输入的页数范围不在[1,126]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4: 开始页数&lt;结束页数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5: 下载页面失败</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6: 下载图片失败</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 7: 输入的随机次数非整数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 8: 输入的随机次数&lt;1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 9: 下载json失败</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 10: 未知错误</span></span><br><span class="line"></span><br><span class="line">NONE="\e[0m"</span><br><span class="line">RED="\e[0;31m"</span><br><span class="line"><span class="meta">#</span><span class="bash"> rand=0，代表普通模式；rand&gt;0代表随机模式，rand的数值代表随机的次数</span></span><br><span class="line">rand=0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 读取命令行参数，并进行错误处理</span></span><br><span class="line">if [ $# = 0 ]</span><br><span class="line">then</span><br><span class="line">    start_page=1</span><br><span class="line">    end_page=126</span><br><span class="line"><span class="meta">#</span><span class="bash"> 额外增加了一个，如果只输入一个参数，代表从第1页到输入的参数的页数</span></span><br><span class="line">elif [ $# = 1 ]</span><br><span class="line">then</span><br><span class="line">    start_page=1</span><br><span class="line">    end_page=$1</span><br><span class="line">elif [ $# = 2 ]</span><br><span class="line">then</span><br><span class="line">    # 随机模式</span><br><span class="line">    if [ $1 = 'rand' ]</span><br><span class="line">    then</span><br><span class="line">        # 判断第二个参数是否为整数</span><br><span class="line">        if expr $2 + 0 &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">        then</span><br><span class="line">            # 输入的随机次数&lt;1</span><br><span class="line">            if [ $2 -lt 1 ]</span><br><span class="line">            then</span><br><span class="line">                printf $RED'Error: Your input [rand times] &lt; 1\n'$NONE</span><br><span class="line">                echo "Usage: $0 [start page] [end page]  download photos in pages from [start page] to [end page]"</span><br><span class="line">                echo "   or: $0 [end page]               download photos in pages from [1] to [end page]"</span><br><span class="line">                echo "   or: $0 (with no arguments)      download photos in pages from [1] to [126] by default"</span><br><span class="line">                echo "   or: $0 rand [rand times]          rand download photos of [rand times]"</span><br><span class="line">                exit 8</span><br><span class="line">            else</span><br><span class="line">                rand=$2</span><br><span class="line">            fi</span><br><span class="line">        # 输入的随机次数非整数</span><br><span class="line">        else</span><br><span class="line">            printf $RED'Error: Your input [rand times] is not an integer\n'$NONE</span><br><span class="line">            echo "Usage: $0 [start page] [end page]  download photos in pages from [start page] to [end page]"</span><br><span class="line">            echo "   or: $0 [end page]               download photos in pages from [1] to [end page]"</span><br><span class="line">            echo "   or: $0 (with no arguments)      download photos in pages from [1] to [126] by default"</span><br><span class="line">            echo "   or: $0 rand [rand times]          rand download photos of [rand times]"</span><br><span class="line">            exit 7</span><br><span class="line">        fi</span><br><span class="line">    # 普通模式</span><br><span class="line">    else</span><br><span class="line">        start_page=$1</span><br><span class="line">        end_page=$2</span><br><span class="line">        # 输入的页数非整数</span><br><span class="line">        if ! expr $start_page + 0 &gt; /dev/null 2&gt;&amp;1 || ! expr $end_page + 0 &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">        then</span><br><span class="line">            printf $RED'Error: Your input page is not an integer\n'$NONE</span><br><span class="line">            echo "Usage: $0 [start page] [end page]  download photos in pages from [start page] to [end page]"</span><br><span class="line">            echo "   or: $0 [end page]               download photos in pages from [1] to [end page]"</span><br><span class="line">            echo "   or: $0 (with no arguments)      download photos in pages from [1] to [126] by default"</span><br><span class="line">            echo "   or: $0 rand [rand times]        rand download photos of [rand times]"</span><br><span class="line">            exit 2</span><br><span class="line">        fi</span><br><span class="line">        # 输入的页数范围不在[1,126]</span><br><span class="line">        if [ $start_page -lt 1 -o $end_page -lt 1 -o $start_page -gt 126 -o $end_page -gt 126 ]</span><br><span class="line">        then</span><br><span class="line">            printf $RED'Error: Your input page not in the range [1,126]\n'$NONE</span><br><span class="line">            echo "Usage: $0 [start page] [end page]  download photos in pages from [start page] to [end page]"</span><br><span class="line">            echo "   or: $0 [end page]               download photos in pages from [1] to [end page]"</span><br><span class="line">            echo "   or: $0 (with no arguments)      download photos in pages from [1] to [126] by default"</span><br><span class="line">            echo "   or: $0 rand [rand times]        rand download photos of [rand times]"</span><br><span class="line">            exit 3</span><br><span class="line">        fi</span><br><span class="line">        # 开始页数&lt;结束页数</span><br><span class="line">        if [ $start_page -gt $end_page ]</span><br><span class="line">        then</span><br><span class="line">            printf $RED'Error: Your input [start_page] &gt; [end page]\n'$NONE</span><br><span class="line">            echo "Usage: $0 [start page] [end page]  download photos in pages from [start page] to [end page]"</span><br><span class="line">            echo "   or: $0 [end page]               download photos in pages from [1] to [end page]"</span><br><span class="line">            echo "   or: $0 (with no arguments)      download photos in pages from [1] to [126] by default"</span><br><span class="line">            echo "   or: $0 rand [rand times]        rand download photos of [rand times]"</span><br><span class="line">            exit 4</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数输入格式错误</span></span><br><span class="line">else</span><br><span class="line">    printf $RED'Error: Please input the right arguments\n'$NONE</span><br><span class="line">    echo "Usage: $0 [start page] [end page]  download photos in pages from [start page] to [end page]"</span><br><span class="line">    echo "   or: $0 [end page]               download photos in pages from [1] to [end page]"</span><br><span class="line">    echo "   or: $0 (with no arguments)      download photos in pages from [1] to [126] by default"</span><br><span class="line">    echo "   or: $0 rand [rand times]        rand download photos of [rand times]"</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断并创建工作目录</span></span><br><span class="line">if [ ! -d bing ]</span><br><span class="line">then</span><br><span class="line">    mkdir bing</span><br><span class="line">    echo "Work directory bing is created"</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 普通模式</span></span><br><span class="line">if [ $rand -eq 0 ]</span><br><span class="line">then</span><br><span class="line">    echo "##############Regular Mode##############"</span><br><span class="line">    echo "Your input page range is [$start_page,$end_page]"</span><br><span class="line">    # 对页范围内的循环下载</span><br><span class="line">    for i in `seq $start_page $end_page`</span><br><span class="line">    do</span><br><span class="line">        # 缓存文件使用当前进程ID号$$.html命名，防止受到影响，下面下载图片使用$$.jpg作为缓存也是同样的道理</span><br><span class="line">        echo "Download page $i……"</span><br><span class="line">        if wget -O bing/$$.html "https://bing.ioliu.cn/?p=$i" &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">        then</span><br><span class="line">            echo "Page $i download successfully"</span><br><span class="line">        else</span><br><span class="line">            if [ -f bing/$$.html ]</span><br><span class="line">            then</span><br><span class="line">                rm bing/$$.html</span><br><span class="line">            fi</span><br><span class="line">            printf $RED"Error: Page $i download failed\n"$NONE</span><br><span class="line">            exit 5</span><br><span class="line">        fi</span><br><span class="line">        # 获取该页所以图片信息</span><br><span class="line">        name_list=`cat bing/$$.html | sed 's/&lt;[^&lt;&gt;]*&gt;/\n/g' | awk '/©/ &#123; print $0 &#125;' | sed 's/(.*)//g'`</span><br><span class="line">        date_list=`cat bing/$$.html | sed 's/&lt;[^&lt;&gt;]*&gt;/\n/g' | awk '/[0-9][0-9]*-[0-9][0-9]*-[0-9][0-9]*/ &#123; print $0 &#125;'`</span><br><span class="line">        url_list=`cat bing/$$.html | sed 's/src="/\n/g' | awk '/^http:/ &#123; print $1 &#125;' | sed -e 's/"&gt;&lt;a//g' -e 's/640x480/1920x1080/g'`</span><br><span class="line">        # 对该页内图片循环下载</span><br><span class="line">        for j in `seq 1 12`</span><br><span class="line">        do</span><br><span class="line">            # 获取图片信息</span><br><span class="line">            name=`echo "$name_list" | awk "NR==$j"`</span><br><span class="line">            date=`echo "$date_list" | awk "NR==$j"`</span><br><span class="line">            url=`echo "$url_list" | awk "NR==$j"`</span><br><span class="line">            file_name="$date $name.jpg"</span><br><span class="line">            # 判断是否已经下载</span><br><span class="line">            if [ ! -f "bing/$file_name" ]</span><br><span class="line">            then</span><br><span class="line">                echo "Download photo $i-$j……"</span><br><span class="line">                if wget -O bing/$$.jpg "$url" &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">                then</span><br><span class="line">                    same=0</span><br><span class="line">                    # 先判断md5文件是否存在，如果不存在，说明bing空目录，直接改名</span><br><span class="line">                    if [ -f "bing/md5.txt" ]</span><br><span class="line">                    then</span><br><span class="line">                        # 文件名不存在的，判断是否有文件大小相同的和md5相同的</span><br><span class="line">                        cat bing/md5.txt | while read line</span><br><span class="line">                        do</span><br><span class="line">                            # 先比较文件大小是否相同，加快速度</span><br><span class="line">                            if [ `stat -c%s "bing/$$.jpg"` = `echo "$line" | awk '&#123; print $1 &#125;'` ]</span><br><span class="line">                            then</span><br><span class="line">                                # md5sum计算文件md5值，进行比较</span><br><span class="line">                                if [ `md5sum "bing/$$.jpg" | awk '&#123; print $1 &#125;'` = `echo "$line" | awk '&#123; print $2 &#125;'` ]</span><br><span class="line">                                then</span><br><span class="line">                                    # 相同</span><br><span class="line">                                    same=1</span><br><span class="line">                                    break</span><br><span class="line">                                fi</span><br><span class="line">                            fi</span><br><span class="line">                        done</span><br><span class="line">                    fi</span><br><span class="line">                    if [ $same = 1 ]</span><br><span class="line">                    then</span><br><span class="line">                        rm "bing/$$.jpg"</span><br><span class="line">                        echo "Photo $i-$j already exists"</span><br><span class="line">                    else</span><br><span class="line">                        mv "bing/$$.jpg" "bing/$file_name"</span><br><span class="line">                        echo "Photo $i-$j download successfully"</span><br><span class="line">                        # 生成文件大小和MD5校验信息</span><br><span class="line">                        echo "`stat -c%s "bing/$file_name"` "`md5sum "bing/$file_name"` &gt;&gt; bing/md5.txt</span><br><span class="line">                    fi</span><br><span class="line">                else</span><br><span class="line">                    printf $RED"Error: Photo $i-$j download failed\n"$NONE</span><br><span class="line">                    exit 6</span><br><span class="line">                fi</span><br><span class="line">            else</span><br><span class="line">                echo "Photo $i-$j already exists"</span><br><span class="line">            fi</span><br><span class="line">        done</span><br><span class="line">    done</span><br><span class="line">    # 清理缓存</span><br><span class="line">    echo "Cleaning……"</span><br><span class="line">    rm bing/$$.html</span><br><span class="line"><span class="meta">#</span><span class="bash"> 随机模式</span></span><br><span class="line">elif [ $rand -gt 0 ]</span><br><span class="line">then</span><br><span class="line">    echo "##############Random Mode##############"</span><br><span class="line">    echo "Your input rand times is $rand"</span><br><span class="line">    # 循环随机下载</span><br><span class="line">    for k in `seq 1 $rand`</span><br><span class="line">    do</span><br><span class="line">        # 获取json</span><br><span class="line">        if wget -O "bing/$$.json" "https://bing.ioliu.cn/v1/rand?type=json" &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">        then</span><br><span class="line">            # 获取图片信息</span><br><span class="line">            name=`cat bing/$$.json | sed 's/.*"copyright":"\(.*\)(.*©.*)"&#125;,.*/\1/g'`</span><br><span class="line">            date=`cat bing/$$.json | sed 's/.*"enddate":"\([0-9][0-9][0-9][0-9]\)\([0-9][0-9]\)\([0-9][0-9]\)",.*/\1-\2-\3/g'`</span><br><span class="line">            url=`cat bing/$$.json | sed 's/.*"url":"\(http:.*imageslim\)",.*/\1/g'`</span><br><span class="line">            file_name="$date $name.jpg"</span><br><span class="line">            # 判断是否已经下载，先用文件名判断</span><br><span class="line">            if [ ! -f "bing/$file_name" ]</span><br><span class="line">            then</span><br><span class="line">                echo "Download photo $k……"</span><br><span class="line">                if wget -O "bing/$$.jpg" "$url" &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">                then</span><br><span class="line">                    same=0</span><br><span class="line">                    # 先判断md5文件是否存在，如果不存在，说明bing空目录，直接改名</span><br><span class="line">                    if [ -f "bing/md5.txt" ]</span><br><span class="line">                    then</span><br><span class="line">                        # 文件名不存在的，判断是否有文件大小相同的和md5相同的</span><br><span class="line">                        cat bing/md5.txt | while read line</span><br><span class="line">                        do</span><br><span class="line">                            # 先比较文件大小是否相同，加快速度</span><br><span class="line">                            if [ `stat -c%s "bing/$$.jpg"` = `echo "$line" | awk '&#123; print $1 &#125;'` ]</span><br><span class="line">                            then</span><br><span class="line">                                # md5sum计算文件md5值，进行比较</span><br><span class="line">                                if [ `md5sum "bing/$$.jpg" | awk '&#123; print $1 &#125;'` = `echo "$line" | awk '&#123; print $2 &#125;'` ]</span><br><span class="line">                                then</span><br><span class="line">                                    # 相同</span><br><span class="line">                                    same=1</span><br><span class="line">                                    break</span><br><span class="line">                                fi</span><br><span class="line">                            fi</span><br><span class="line">                        done</span><br><span class="line">                    fi</span><br><span class="line">                    if [ $same = 1 ]</span><br><span class="line">                    then</span><br><span class="line">                        rm "bing/$$.jpg"</span><br><span class="line">                        echo "Photo $k already exists"</span><br><span class="line">                    else</span><br><span class="line">                        mv "bing/$$.jpg" "bing/$file_name"</span><br><span class="line">                        echo "Photo $k download successfully"</span><br><span class="line">                        # 生成文件大小和MD5校验信息</span><br><span class="line">                        echo "`stat -c%s "bing/$file_name"` "`md5sum "bing/$file_name"` &gt;&gt; bing/md5.txt</span><br><span class="line">                    fi</span><br><span class="line">                else</span><br><span class="line">                    printf $RED"Error: Photo $k download failed\n"$NONE</span><br><span class="line">                    exit 6</span><br><span class="line">                fi</span><br><span class="line">            else</span><br><span class="line">                echo "Photo $k already exists"</span><br><span class="line">            fi</span><br><span class="line">        else</span><br><span class="line">            if [ -f bing/$$.json ]</span><br><span class="line">            then</span><br><span class="line">                rm bing/$$.json</span><br><span class="line">            fi</span><br><span class="line">            printf $RED"Error: Json $k download failed\n"$NONE</span><br><span class="line">            exit 9</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">    # 清理缓存</span><br><span class="line">    echo "Cleaning……"</span><br><span class="line">    rm bing/$$.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 未知错误</span></span><br><span class="line">else</span><br><span class="line">    printf $RED"Error: Unkonwn error\n"$NONE</span><br><span class="line">    exit 10</span><br><span class="line">fi</span><br><span class="line">echo "All done,Thanks for using!"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文是关于Linux中的shell脚本程序设计，有几个小Demo。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://666wxy666.github.io/categories/Linux/"/>
    
      <category term="上机实战" scheme="https://666wxy666.github.io/categories/Linux/%E4%B8%8A%E6%9C%BA%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="Linux" scheme="https://666wxy666.github.io/tags/Linux/"/>
    
      <category term="实战" scheme="https://666wxy666.github.io/tags/%E5%AE%9E%E6%88%98/"/>
    
      <category term="shell脚本程序" scheme="https://666wxy666.github.io/tags/shell%E8%84%9A%E6%9C%AC%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>大数据 习题</title>
    <link href="https://666wxy666.github.io/2020/05/07/%E5%A4%A7%E6%95%B0%E6%8D%AE-%E4%B9%A0%E9%A2%98/"/>
    <id>https://666wxy666.github.io/2020/05/07/%E5%A4%A7%E6%95%B0%E6%8D%AE-%E4%B9%A0%E9%A2%98/</id>
    <published>2020-05-07T13:47:17.443Z</published>
    <updated>2020-06-14T02:18:14.989Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>自己随便整理了一下在学习“大数据”时遇到的一些习题，易错点之类的。</p><a id="more"></a><h2 id="1、关于Spark中task，block，partition，split，core的关系"><a href="#1、关于Spark中task，block，partition，split，core的关系" class="headerlink" title="1、关于Spark中task，block，partition，split，core的关系"></a>1、关于Spark中task，block，partition，split，core的关系</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507215355.png" alt="第5讲-第4章-大数据处理-Spark框架" style="zoom:67%"><blockquote><p>每一个过程的任务数，对应一个inputSplit, Partition输入可能以多个文件的形式存储在HDFS上，每个File都包含了很多块，称为Block。</p><p>当Spark读取这些文件作为输入时，会根据具体数据格式对应的InputFormat进行解析，一般是将若干个Block合并成一个输入分片，称为InputSplit，注意InputSplit不能跨越文件。</p><p>随后将为这些输入分片生成具体的Task。InputSplit与Task是一一对应的关系。随后这些具体的Task每个都会被分配到集群上的某个节点的某个Executor去执行。</p><ul><li><p>每个节点可以起一个或多个Executor。</p></li><li><p>每个Executor由若干core组成，每个Executor的每个core一次只能执行一个Task。</p><p>注意： 这里的core是虚拟的core而不是机器的物理CPU核，可以理解为就是Executor的一个工作线程。</p></li><li><p>每个Task执行的结果就是生成了目标RDD的一个partiton。</p><p>Task被执行的并发度 = Executor数目$\times$每个Executor核数（=core总个数）</p></li><li><p>至于partition的数目：</p><ul><li>对于数据读入阶段，例如sc.textFile，输入文件被划分为多少InputSplit就会需要多少初始Task。</li><li>在Map阶段partition数目保持不变。</li><li>在Reduce阶段，RDD的聚合会触发shuffle操作，聚合后的RDD的partition数目跟具体操作有关，例如repartition操作会聚合成指定分区数，还有一些算子是可配置的。</li><li>RDD在计算的时候，每个分区都会起一个task，所以rdd的分区数目决定了总的task数目。申请的计算节点（Executor）数目和每个计算节点核数，决定了你同一时刻可以并行执行的task。<br>比如：<br>RDD有100个分区，那么计算的时候就会生成100个task，你的资源配置为10个计算节点，每个2个核，同一时刻可以并行的task数目为20，计算这个RDD就需要5个轮次。如果计算资源不变，你有101个task的话，就需要6个轮次，在最后一轮中，只有一个task在执行，其余核都在空转。如果资源不变，你的RDD只有2个分区，那么同一时刻只有2个task运行，其余18个核空转，造成资源浪费。这就是在spark调优中，增大RDD分区数目，增大任务并行度的原因。</li></ul></li></ul></blockquote><h2 id="2、HDFS体系架构"><a href="#2、HDFS体系架构" class="headerlink" title="2、HDFS体系架构"></a>2、HDFS体系架构</h2><p>HDFS采用了主从（Master/Slave）结构 模型，一个HDFS集群是由一个 NameNode和若干个 DataNode 组成的。其中 NameNode 作为主服务器，管理文件系统的命名空间和客户端对文件的 访问操作；集群中的 DataNode 管理存储的数据。HDFS 允许用户以文件的形 式存储数据。从内部来看，文件被分成 若干个数据块，而且这若干个数据块存 放在一组 DataNode 上。NameNode 执行文件系统的命名空间操作，比如打开、关闭、重命名文件或目录等，它也负责数据块到具体 DataNode 的映射。 DataNode 负责处理文件系统客户端的文件读写请求，并在 NameNode 的统 一调度下进行数据块的创建、删除和复制工作。</p><h2 id="3、HDFS的读操作流程"><a href="#3、HDFS的读操作流程" class="headerlink" title="3、HDFS的读操作流程"></a>3、HDFS的读操作流程</h2><ol><li>初始化FileSystem，然后客户端用函数 open()打开文件。</li><li>FileSystem调用元数据节点，得到数据 块信息，并对每一个数据块、元数据节点返回，保存数据块的数据节点地址。</li><li>客户端调用Stream的read()函数开始读 取数据。</li><li>FSDataInputStream连接保存此文件第 一个数据块的最近的数据节点Datanode， data从数据节点读到客户端。</li><li>当第一个数据块读取完毕时， FSDataInputStream关闭和此数据节点的 连接，然后连接此文件下一个数据块的 最近的数据节点。</li><li>当客户端读取完毕数据的时候，调用 FSDataInputStream的close()函数，关闭连接。</li></ol><h2 id="4、HDFS的写操作流程"><a href="#4、HDFS的写操作流程" class="headerlink" title="4、HDFS的写操作流程"></a>4、HDFS的写操作流程</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507220050.jpg" alt="Pag4" style="zoom:80%"><h2 id="5、习题"><a href="#5、习题" class="headerlink" title="5、习题"></a>5、习题</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507215507.jpg" alt="Page1" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507215615.jpg" alt="Page2" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507215630.jpg" alt="Page3" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507220134.jpg" alt="第3讲-第2章-大数据存储-NoSQL数据库" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200603095741.jpg" alt="2020-06-03_091537" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200603095754.jpg" alt="2020-06-03_095449" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200603095804.jpg" alt="2020-06-03_095457" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200603095810.jpg" alt="2020-06-03_095505" style="zoom:80%">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己随便整理了一下在学习“大数据”时遇到的一些习题，易错点之类的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="https://666wxy666.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="习题" scheme="https://666wxy666.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E4%B9%A0%E9%A2%98/"/>
    
    
      <category term="习题" scheme="https://666wxy666.github.io/tags/%E4%B9%A0%E9%A2%98/"/>
    
      <category term="易错点" scheme="https://666wxy666.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="大数据" scheme="https://666wxy666.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Spark" scheme="https://666wxy666.github.io/tags/Spark/"/>
    
      <category term="HDFS" scheme="https://666wxy666.github.io/tags/HDFS/"/>
    
      <category term="MapReduce" scheme="https://666wxy666.github.io/tags/MapReduce/"/>
    
  </entry>
  
  <entry>
    <title>现代交换原理 MOOC习题 1~4章</title>
    <link href="https://666wxy666.github.io/2020/05/07/%E7%8E%B0%E4%BB%A3%E4%BA%A4%E6%8D%A2%E5%8E%9F%E7%90%86-MOOC%E4%B9%A0%E9%A2%98-1~4%E7%AB%A0/"/>
    <id>https://666wxy666.github.io/2020/05/07/%E7%8E%B0%E4%BB%A3%E4%BA%A4%E6%8D%A2%E5%8E%9F%E7%90%86-MOOC%E4%B9%A0%E9%A2%98-1~4%E7%AB%A0/</id>
    <published>2020-05-07T02:37:07.224Z</published>
    <updated>2020-06-14T02:42:17.118Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>自己随便整理了一下在学习“现代交换原理”网课时遇到的一些习题，易错点之类的。</p><a id="more"></a><h2 id="第一章-交换概论"><a href="#第一章-交换概论" class="headerlink" title="第一章 交换概论"></a>第一章 交换概论</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507105053.jpg" alt="2020-05-07_104537" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507105117.jpg" alt="2020-05-07_104811" style="zoom:80%"><blockquote><p>都是类似的道理，话音业务需要实时、高可靠、恒定速率，因此电路交换适合，异步显然不适合于话音业务。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507105241.jpg" alt="2020-05-07_104943" style="zoom:80%"><blockquote><p>电路交换是先建立好链路，在进行的交换。路由选择是先进行的，信息转发在建立好的链路上进行。分组交换是上面描述的特点。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507105428.jpg" alt="2020-05-07_105021" style="zoom:80%"><blockquote><p>通信网三要素是：<strong>交换设备</strong>、<strong>传输设备</strong>、<strong>终端设备</strong>。</p><p>交换网络的三要素是：<strong>交换单元</strong>、不同交换单元间的<strong>拓扑连接</strong>、<strong>控制方式</strong>。</p></blockquote><h2 id="第二章-交换网络"><a href="#第二章-交换网络" class="headerlink" title="第二章 交换网络"></a>第二章 交换网络</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507110011.jpg" alt="2020-05-07_110001" style="zoom:80%"><blockquote><p>交换单元的端口类型有两种：控制端口和状态端口。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507110554.jpg" alt="2020-05-07_110356" style="zoom:80%"><blockquote><p>T接线器：</p><ul><li><p>话音存储器（SM）：固定每个存储单元8bit存话音，存储单元的数量m就是时隙数m。</p></li><li><p>控制存储器（CM）：存储单元大小为$\log_2{m}$，所以时隙数一般都是2的幂次，存储单元的数量m也是时隙数m。</p></li></ul></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507110608.jpg" alt="2020-05-07_110547" style="zoom:80%"><blockquote><p>S接线器没有话音存储器，控制存储器（CM），可以把S接线器的所有的控制存储器看成$m\times{n}$个方格，m为时隙数，n为入（出）线数：</p><ul><li>S接线器所含CM的数量就是入（出）线数n，也就是一列为一个CM，共有n列。</li><li>每个CM所含的存储单元的数量为入（出）线的时隙数m，也就是每个格代表一个存储单元，每个CM有m个存储单元，m行。</li><li>每个存储单元的大小为$\log_2{m}$bit。</li></ul></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507114923.jpg" alt="2020-05-07_114828" style="zoom:80%"><blockquote><p>$N\times{N}$的Banyan网络需要$k=\log_2{N}$级，如果要使用$2\times{2}$的交换单元构建，那么每层就需要$\frac{N}{2}$个交换单元，k层共需要$k\times{\frac{N}{2}}=\frac{N}{2}\times{\log_2{N}}$，如果是M层的话，则需要$m\times{\frac{N}{2}\times{\log_2{N}}}$个$2\times{2}$的交换单元。</p><p>因此这个题需要$3\times{\frac{8}{2}\times{\log_2{8}}}=36$个$2\times{2}$的交换单元。</p></blockquote><h2 id="第三章-电路交换"><a href="#第三章-电路交换" class="headerlink" title="第三章 电路交换"></a>第三章 电路交换</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507120505.jpg" alt="2020-05-07_120218" style="zoom:80%"><blockquote><p>常识知识。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507120512.jpg" alt="2020-05-07_120231" style="zoom:80%"><blockquote><p>示意图：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200518151446.jpg" alt="3" style="zoom:50%"><p>B+C-&gt;A：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200518151822.jpg" alt="第3章 电路交换" style="zoom:50%"></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507120522.jpg" alt="2020-05-07_120244" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507120530.jpg" alt="2020-05-07_120310" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507120538.jpg" alt="2020-05-07_120324" style="zoom:80%"><blockquote><p>这三个题都是基础知识。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507120551.jpg" alt="2020-05-07_120336" style="zoom:80%"><blockquote><p>直连？应该是可以实现不经过交换设备的语音通信。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507120610.jpg" alt="2020-05-07_120432" style="zoom:80%"><blockquote><p>用户模块的处理机与区域处理机相连，区域处理机又与其他区域处理机和中央处理机相连。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507120618.jpg" alt="2020-05-07_120449" style="zoom:80%"><blockquote><p>周期级程序是按一定周期进行的各种扫描和驱动，例如200ms摘挂机扫描。开通业务应该是基本级程序负责。</p></blockquote><h2 id="第四章-分组交换"><a href="#第四章-分组交换" class="headerlink" title="第四章 分组交换"></a>第四章 分组交换</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507121042.jpg" alt="2020-05-07_120658" style="zoom:80%"><blockquote><p>TCP连接的建立不是路由器基本功能。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507121049.jpg" alt="2020-05-07_120714" style="zoom:80%"><blockquote><p>ISDN全称是综合业务数字网，不需要支持模拟业务。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507121056.jpg" alt="2020-05-07_120733" style="zoom:80%"><blockquote><p>ATM 适配层（AAL）主要负责百 ATM 层与高层之间的信元转发过程。从上层收到信息后，AAL 将数据分割成 ATM 信元；从 ATM 层收到信息后，AAL 必须重度新组合数据形成一专个上层能够辨识的格式。上述操作称之为分段与重组（SAR），它是 AAL 的主要任务。此外不同的 AAL 支持属不同的流量或服务类型。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507121103.jpg" alt="2020-05-07_120808" style="zoom:80%"><blockquote><p>MPLS标记可以任意级，标记栈实现多级标记，Label可以有多个。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507121110.jpg" alt="2020-05-07_120850" style="zoom:80%"><blockquote><p>A、MPLS和ATM和帧中继都是路由选择和数据转发分开进行，都是面向连接的，但是不需要为每一次通信业务都建立新的连接；而传统IP网是无连接的，路由选择和数据转发同时进行。</p><p>B、MPLS和ATM都是虚连接，使用时连接，不需要时可以拆除连接，不是永久连接。</p><p>C、MPLS使用的是Label标记方式的逻辑连接，ATM是VPI/VCI方式的逻辑连接，都是逻辑虚连接。</p><p>D、MPLS通过LDP等协议，在LSR和LER、LSR和LSR之间完成标记信息的分发，形成与FEC对应的LSP路径。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507121116.jpg" alt="2020-05-07_121004" style="zoom:80%"><blockquote><p>同上一个题的D选项。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507121127.jpg" alt="2020-05-07_121012" style="zoom:80%"><blockquote><ol><li><p>入口LER接收分组，完成第三层功能，判定分组所属的FEC，并给分组加上标记形成MPLS标记分组。</p></li><li><p>LSR依据分组上的标记以及标记转发表通过交换单元对其进行转发，不再进行任何第三层处理，也就是只处理标记部分，不处理IP分组头。</p></li><li><p>出口 LER 将分组中的标记去掉后转发至目的地。</p></li></ol></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507121133.jpg" alt="2020-05-07_121029" style="zoom:80%"><blockquote><p>MPLS与ATM/FR类似，标记都是本地（逐段）有效的，需要路由器进行标记转换。</p></blockquote><details><summary><p>所有的习题：</p></summary><div class="content"><p><a href="/2020/05/07/现代交换原理-MOOC习题-1~4章/">现代交换原理 MOOC习题 1~4章</a></p><p><a href="/2020/05/18/现代交换原理-MOOC习题-5~6章/">现代交换原理 MOOC习题 5~6章</a></p></div></details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己随便整理了一下在学习“现代交换原理”网课时遇到的一些习题，易错点之类的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="现代交换原理" scheme="https://666wxy666.github.io/categories/%E7%8E%B0%E4%BB%A3%E4%BA%A4%E6%8D%A2%E5%8E%9F%E7%90%86/"/>
    
      <category term="习题" scheme="https://666wxy666.github.io/categories/%E7%8E%B0%E4%BB%A3%E4%BA%A4%E6%8D%A2%E5%8E%9F%E7%90%86/%E4%B9%A0%E9%A2%98/"/>
    
    
      <category term="习题" scheme="https://666wxy666.github.io/tags/%E4%B9%A0%E9%A2%98/"/>
    
      <category term="易错点" scheme="https://666wxy666.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="网课" scheme="https://666wxy666.github.io/tags/%E7%BD%91%E8%AF%BE/"/>
    
      <category term="MOOC" scheme="https://666wxy666.github.io/tags/MOOC/"/>
    
      <category term="现代交换原理" scheme="https://666wxy666.github.io/tags/%E7%8E%B0%E4%BB%A3%E4%BA%A4%E6%8D%A2%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Linux MOOC习题 11~15章</title>
    <link href="https://666wxy666.github.io/2020/05/07/Linux-MOOC%E4%B9%A0%E9%A2%98-11~15%E7%AB%A0/"/>
    <id>https://666wxy666.github.io/2020/05/07/Linux-MOOC%E4%B9%A0%E9%A2%98-11~15%E7%AB%A0/</id>
    <published>2020-05-07T01:46:38.801Z</published>
    <updated>2020-06-14T02:42:06.479Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>自己随便整理了一下在学习Linux网课时遇到的一些习题，易错点之类的，接上文<a href="/2020/04/29/Linux-MOOC习题-6~10章/">Linux MOOC习题 6~10章</a>。</p><a id="more"></a><h2 id="十一、进程的基本概念"><a href="#十一、进程的基本概念" class="headerlink" title="十一、进程的基本概念"></a>十一、进程的基本概念</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507102145.jpg" alt="2020-05-07_095819" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507102202.jpg" alt="2020-05-07_095837" style="zoom:80%"><blockquote><ul><li><code>int a[N] = { 2 };</code>的意思是把<code>a[N]</code>第一个元素赋值为2，其他的赋值为0，也就是说，所有的元素都被赋值了，因此占空间很大。</li><li><code>int a[N];</code>的<code>a[N]</code>没有赋初值，只需记录a的长度即可，占用空间很小。</li></ul><p>从图中（test是第一种赋值的，test2是第二种不赋值的）也可以看出，差别巨大：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507103601.jpg" alt="2020-05-07_103457" style="zoom:80%"></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507102210.jpg" alt="2020-05-07_100015" style="zoom:80%"><blockquote><p>忙等待主要是占用CPU，和内存没啥关系。</p></blockquote><h2 id="十二、进程的创建和重定向"><a href="#十二、进程的创建和重定向" class="headerlink" title="十二、进程的创建和重定向"></a>十二、进程的创建和重定向</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200511192429.jpg" alt="2020-05-11_192030" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200511192503.jpg" alt="2020-05-11_192056" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200511192519.jpg" alt="2020-05-11_192111" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200511192659.jpg" alt="2020-05-11_192207" style="zoom:80%"><blockquote><p>注意，这个程序是持续不间断运行的，也就是说，不能停止后再重启，但是重定向是只能在程序运行的时候进行的操作，程序一旦开始运行就没办法重定向了，因此不能实现。并且重定向是“当前进程”做的，不是父进程做的。但是如果foo可以终止后重启，确实可以用shell脚本等程序实现上述功能。修改foo程序也可以实现上述功能。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200511192733.jpg" alt="2020-05-11_192222" style="zoom:80%"><blockquote><p>执行的大致流程，只是各进程执行情况，并不代表真实执行顺序：</p><p><strong><em>父进程（0）：</em></strong></p><ul><li><p>输出：<code>i=0</code></p></li><li><p>父进程0产生第一个子进程0-1</p><p><strong><em>0-1：</em></strong></p><ul><li><p>到下一轮for循环，i=1</p></li><li><p>输出：<code>i=1</code></p></li><li><p>子进程0-1产生第一个子进程0-1-1</p><p><strong><em>0-1-1：</em></strong></p><ul><li><p>到下一轮for循环，i=2</p></li><li><p>输出：<code>i=2</code></p></li><li><p>进程0-1-1产生第一个子进程0-1-1-1</p><p><strong><em>0-1-1-1：</em></strong></p><ul><li><p>到下一轮for循环，i=3</p></li><li><p>输出：<code>i=3</code></p></li><li><p>进程0-1-1-1产生第一个子进程0-1-1-1-1</p><p><strong><em>0-1-1-1-1：</em></strong></p><ul><li>到下一轮for循环，i=4</li><li>0-1-1-1-1结束</li></ul></li><li><p>到下一轮for循环，i=4</p></li><li><p>0-1-1-1结束</p></li></ul></li><li><p>到下一轮for循环，i=3</p></li><li><p>输出：<code>i=3</code></p></li><li><p>进程0-1-1产生第二个子进程0-1-1-2</p><p><strong><em>0-1-1-2：</em></strong></p><ul><li>到下一轮for循环，i=4</li><li>0-1-1-2结束</li></ul></li><li><p>到下一轮for循环，i=4</p></li><li><p>0-1-1结束</p></li></ul></li><li><p>到下一轮for循环，i=2</p></li><li><p>输出：<code>i=2</code></p></li><li><p>子进程0-1产生第二个子进程0-1-2</p><p><strong><em>0-1-2：</em></strong></p><ul><li><p>到下一轮for循环，i=3</p></li><li><p>输出：<code>i=3</code></p></li><li><p>进程0-1-2产生第一个子进程0-1-2-1</p><p><strong><em>0-1-2-1：</em></strong></p><ul><li>到下一轮for循环，i=4</li><li>0-1-2-1结束</li></ul></li><li><p>到下一轮for循环，i=4</p></li><li><p>0-1-2结束</p></li></ul></li><li><p>到下一轮for循环，i=3</p></li><li><p>输出：<code>i=3</code></p></li><li><p>子进程0-1产生第三个子进程0-1-3</p><p><strong><em>0-1-3：</em></strong></p><ul><li>到下一轮for循环，i=4</li><li>0-1-3结束</li></ul></li><li><p>到下一轮for循环，i=4</p></li><li><p>0-1结束</p></li></ul></li><li><p>到下一轮for循环，i=1</p></li><li><p>输出：<code>i=1</code></p></li><li><p>父进程0产生第二个子进程0-2</p><p><strong><em>0-2：</em></strong></p><ul><li><p>到下一轮for循环，i=2</p></li><li><p>输出：<code>i=2</code></p></li><li><p>进程0-2产生第一个子进程0-2-1</p><p><strong><em>0-2-1：</em></strong></p><ul><li><p>到下一轮for循环，i=3</p></li><li><p>输出：<code>i=3</code></p></li><li><p>进程0-2-1产生第一个子进程0-2-1-1</p><p><strong><em>0-2-1-1：</em></strong></p><ul><li>到下一轮for循环，i=4</li><li>0-2-1-1结束</li></ul></li><li><p>到下一轮for循环，i=4</p></li><li><p>0-2-1结束</p></li></ul></li><li><p>到下一轮for循环，i=3</p></li><li><p>输出：<code>i=3</code></p></li><li><p>进程0-2产生第二个子进程0-2-2</p><p><strong><em>0-2-2：</em></strong></p><ul><li>到下一轮for循环，i=4</li><li>0-2-2结束</li></ul></li><li><p>到下一轮for循环，i=4</p></li><li><p>0-2结束</p></li></ul></li><li><p>到下一轮for循环，i=2</p></li><li><p>输出：<code>i=2</code></p></li><li><p>父进程0产生第三个子进程0-3</p><p><strong><em>0-3：</em></strong></p><ul><li><p>到下一轮for循环，i=3</p></li><li><p>输出：<code>i=3</code></p></li><li><p>进程0-3产生第一个子进程0-3-1</p><p><strong><em>0-3-1：</em></strong></p><ul><li>到下一轮for循环，i=4</li><li>0-3-1结束</li></ul></li><li><p>到下一轮for循环，i=4</p></li><li><p>0-3结束</p></li></ul></li><li><p>到下一轮for循环，i=3</p></li><li><p>输出：<code>i=3</code></p></li><li><p>父进程0产生第四个子进程0-4</p><p><strong><em>0-4：</em></strong></p><ul><li>到下一轮for循环，i=4</li><li>0-4结束</li></ul></li><li><p>到下一轮for循环，i=4</p></li><li><p>父进程0结束</p></li></ul><p>共15行输出，分别为：</p><table><thead><tr><th align="center">输出</th><th align="center">次数</th></tr></thead><tbody><tr><td align="center">i=0</td><td align="center">$2^0=1$</td></tr><tr><td align="center">i=1</td><td align="center">$2^1=2$</td></tr><tr><td align="center">i=2</td><td align="center">$2^2=4$</td></tr><tr><td align="center">i=3</td><td align="center">$2^3=8$</td></tr></tbody></table><p>在linux下的实际执行情况：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200514110539.png" alt="img" style="zoom:80%"><p>可以发现确实是15行，但是却有两个问题：</p><ol><li><p>为什么最后产生了一个空行，在等待用户输入？</p><p>shell提示符其实是主进程死了以后，shell给出来的。因为实际运行结果是子进程死得晚，父进程死的早。其实，你不按回车，大家也都运行结束了，只是shell提示符出现得比某个子进程早。你看起来这个效果，其实这个提示符已经在上面显示了，那个时候主进程结束，shell给出了提示符，但此时子进程还没有结束，因此会继续输出，但这个时候shell已经进入了等待下一个命令的状态了，就像这样：</p></li></ol><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200514111514.png" alt="QQ图片20200514111508" style="zoom:80%"><p>​ 可以发现，echo命令已经可以被shell接受了。</p><ol start="2"><li><p>程序为什么分两部分输出了？</p><p>这是因为后面的子进程因为他的父进程先死掉了，变成了孤儿进程，打印出他们的父进程pid，发现是1，也证明了这一点：</p></li></ol><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200514110755.png" alt="QQ图片20200514110749" style="zoom:80%"><p>因此我们可以对程序进行如下修改：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Copyright: Copyright (c) 2020 苇名一心 All Rights Reserved.</span></span><br><span class="line"><span class="comment"> * @Description: </span></span><br><span class="line"><span class="comment"> * @Version: </span></span><br><span class="line"><span class="comment"> * @Author: 苇名一心</span></span><br><span class="line"><span class="comment"> * @Date: 2020-05-11 20:02:00</span></span><br><span class="line"><span class="comment"> * @LastEditors: 苇名一心</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-05-14 11:18:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,status,wait_pid;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"i=%d,pid=%d,ppid=%d\n"</span>, i,getpid(),getppid());</span><br><span class="line">        <span class="keyword">if</span>(fork()&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            wait_pid = wait(&amp;status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对每个fork加上wait语句，就可以完全按照上面的进程树执行顺序执行，且不会有任何问题了。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200514112003.png" alt="QQ图片20200514111958" style="zoom:80%"><p>PS：对于wait，如果其所有子进程都还在运行，则阻塞；如果是一部分子进程终止，而另一部分还在运行，那么父进程还会阻塞吗？答案是不会，只要有一个进程终止，wait就会返回。也就是说只要wait接收到一个SIGCHLD信号，wait()就会返回。对于两个或多个子进程的情况，需要调用wait两次或多次。说白了在每一个fork后面的父进程分支中都要有一个wait与之对应。与wait相关的详细知识请参照这位兄弟的博客：<a href="https://www.cnblogs.com/black-mamba/p/6886434.html" target="_blank" rel="external nofollow noopener noreferrer">wait()函数的详细分析</a>。</p></blockquote><h2 id="十三、重定向和管道，信号"><a href="#十三、重定向和管道，信号" class="headerlink" title="十三、重定向和管道，信号"></a>十三、重定向和管道，信号</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200521095329.jpg" alt="2020-05-21_094112" style="zoom:80%"><blockquote><p>xsh2.c是一个简易的模拟shell程序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Copyright: Copyright (c) 2020 苇名一心 All Rights Reserved.</span></span><br><span class="line"><span class="comment"> * @Description: </span></span><br><span class="line"><span class="comment"> * @Version: </span></span><br><span class="line"><span class="comment"> * @Author: 苇名一心</span></span><br><span class="line"><span class="comment"> * @Date: 2020-05-21 09:44:26</span></span><br><span class="line"><span class="comment"> * @LastEditors: 苇名一心</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-05-21 09:51:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">256</span>], *argv1[<span class="number">256</span>], **p, *cmd2, *argv2[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">int</span> sv, fd[<span class="number">2</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"=&gt; "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fgets(buf, <span class="keyword">sizeof</span>(buf), <span class="built_in">stdin</span>) == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((cmd2 = <span class="built_in">strstr</span>(buf, <span class="string">"|"</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        *cmd2++ = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (p = &amp;argv1[<span class="number">0</span>], *p = strtok(buf, <span class="string">" \t\n"</span>); *p != <span class="literal">NULL</span>; *++p = strtok(<span class="literal">NULL</span>, <span class="string">" \t\n"</span>))</span><br><span class="line">            ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (p = &amp;argv2[<span class="number">0</span>], *p = strtok(cmd2, <span class="string">" \t\n"</span>); *p != <span class="literal">NULL</span>; *++p = strtok(<span class="literal">NULL</span>, <span class="string">" \t\n"</span>))</span><br><span class="line">            ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (argv1[<span class="number">0</span>] == <span class="literal">NULL</span> || argv2[<span class="number">0</span>] == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        pipe(fd);</span><br><span class="line">        <span class="keyword">if</span> (fork() == <span class="number">0</span>)<span class="comment">// | 左边的写端进程</span></span><br><span class="line">        &#123;</span><br><span class="line">            dup2(fd[<span class="number">1</span>], <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">close</span>(fd[<span class="number">1</span>]);</span><br><span class="line">            <span class="built_in">close</span>(fd[<span class="number">0</span>]);</span><br><span class="line">            execvp(argv1[<span class="number">0</span>], argv1);</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"** bad command 1: %m\n"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (fork() == <span class="number">0</span>)<span class="comment">// | 右边的读端进程</span></span><br><span class="line">        &#123;</span><br><span class="line">            dup2(fd[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">close</span>(fd[<span class="number">0</span>]);</span><br><span class="line">            <span class="built_in">close</span>(fd[<span class="number">1</span>]);<span class="comment">// 和第二题的类似，也不能省略</span></span><br><span class="line">            execvp(argv2[<span class="number">0</span>], argv2);</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"** bad command 2: %m\n"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">close</span>(fd[<span class="number">0</span>]);<span class="comment">// 第一题要省略的操作</span></span><br><span class="line">        <span class="built_in">close</span>(fd[<span class="number">1</span>]);<span class="comment">// 第二题要省略的操作</span></span><br><span class="line">        wait(&amp;sv);</span><br><span class="line">        wait(&amp;sv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>如果省略了这一条，对程序执行是没有什么影响的，但是循环多次以后，文件描述符一直不会被回收，导致资源耗尽，程序无法正常运行。</li><li>如果省略了这一条，就会产生重大问题。在写端进程写入结束后正常退出，读端在读取管道时，因为有个写入端一直没有关闭，导致读端的管道一直收不到结束信号，一直在等待读取，导致了死锁，读端程序不能正常结束。</li></ol></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200521100519.jpg" alt="2020-05-21_094136" style="zoom:80%"><blockquote><p>goto只能在函数内跳转，全局跳转则可以跳转到保存的程序运行状态（包括堆栈等），就可以理解为玩游戏的SavePoint。但是如果你没保存，那就没法跳转，因此全局跳转只能跳转到执行过的位置。但是这个题目是有点问题的，goto语句也可以向前和向后跳转，因此此题可以忽略。</p></blockquote><h2 id="十四、进程间协作，Socket概述"><a href="#十四、进程间协作，Socket概述" class="headerlink" title="十四、进程间协作，Socket概述"></a>十四、进程间协作，Socket概述</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200529100058.jpg" alt="2020-05-29_094202" style="zoom:80%"><blockquote><p>也就是说，<code>mmap()</code>需要一个已经打开的文件的文件描述符，当然需要<code>open()</code>打开文件，至于为什么需要，解析说的很明白。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200529100352.jpg" alt="2020-05-29_094455" style="zoom:80%"><blockquote><p>如果你打开的文件不关闭，你的程序一直执行，一直打开文件，打开的太多就会导致文件描述符资源耗尽，无法打开文件，但是当你程序退出时（正常退出或者异常终止），操作系统都会自动检测你已经打开的文件，自行关闭应该关闭的文件，因此也能正常持久化到磁盘文件。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200529100636.jpg" alt="2020-05-29_094519" style="zoom:80%"><blockquote><p>咨询式锁定是很关键的，也就是你不自己调用<code>fcntl()</code>，你是不会被阻塞的，也就是说Linux给你提供了互斥访问的途径，你自己不用或者使用不当，还是会导致出现问题，这也是Linux“策略和机制相分离”的设计方法。它是一个重要的设计思路，当系统不能大包大揽时，系统提供“机制”，把“策略”留给程序员，简化了操作系统的设计，程序员正确操作，应该完成的功能也都能实现。这是一个典型的合理的“甩锅”行为。因特网和Linux设计上都遵循了这样的理念。SUID，bash中的条件判断，四则运算，都是相同的理念，它们简化了自己，仅提供“机制”，把“策略”留给应用程序，不失必备功能。C语言也一样，printf在C语言里也会是个函数，与语言本身无关，C语言自己设计得很简单，以至于常用C语言的程序员，不需要查阅任何手册，都能把语法记下来。C++，你试试？</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200529101032.jpg" alt="2020-05-29_094606" style="zoom:80%"><blockquote><p>注意是以命令行参数方式传递，<code>exec()</code>虽然会清空原来的代码段，但是对文件描述符和信号的处理有所不同。</p><p>关于<code>fork()</code>和<code>exec()</code>父子进程对文件描述符和信号的继承问题总结如下：</p><ul><li><p>信号</p><ul><li><p>仅fork时子进程会继承父进程fork之前所设置的信号处理方式。</p></li><li><p>当有exec加载新程序时</p><ul><li>子进程继承的处理方式是忽略或默认处理方式时，exec新程序后设置依然有效。</li><li>如果子进程继承是捕获处理方式时，exec新程序后将被还原为默认处理方式。</li></ul></li></ul></li><li><p>文件描述符</p><p>当你用fork建立一个子进程，父进程的所有内容会被“完完整整”的复制到子进程中。子进程是父进程的一个clone体，除了pid不同，其余一切相同。在fork后父、子进程对于每一个打开的文件描述符共享同一个文件表项，此时可能有多个文件描述符项指向同一文件表项。即使exec也会保留文件描述符，但是有时子进程不需要继承父进程的文件描述符，并且有时在exec后子进程继承下来的文件描述符有的是毫无意义的，Linux使用close_on_exec标志位来实现。当父进程打开文件时，只需要应用程序设置FD_CLOSEXEC标志位，则当fork后exec其他程序的时候，内核自动会将其继承的父进程FD关闭。因此原则上只要你不设置这个标志位，你fork子进程后，exec新程序依然可以用你在父进程或者原来的子进程中打开的文件。</p></li></ul></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200529101043.jpg" alt="2020-05-29_094713" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200529102311.jpg" alt="2020-05-29_094803" style="zoom:80%"><h2 id="十五、Socket编程"><a href="#十五、Socket编程" class="headerlink" title="十五、Socket编程"></a>十五、Socket编程</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200603082808.jpg" alt="2020-06-03_081900" style="zoom:80%"><blockquote><ul><li><code>bind</code>设置本地端点名，也可以用在客户端程序，不会阻塞；</li><li><code>listen</code>仅仅是给内核一个通知，开始监听到达的连接请求，不会阻塞；</li><li><code>connect</code>建立连接，设定远端端点名，进程阻塞，直到TCP连接建立（第二次握手）；</li><li><code>accept</code>接受一个连接请求，阻塞等待新连接的到来，直到TCP三次握手结束返回；</li></ul></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200603083359.jpg" alt="2020-06-03_082405" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200603083428.jpg" alt="2020-06-03_082415" style="zoom:80%"><blockquote><p>不执行<code>signal(SIGCLD,SIG_ING)</code>会产生僵尸进程。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200603083519.jpg" alt="2020-06-03_082433" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200603083527.jpg" alt="2020-06-03_082526" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200603083537.jpg" alt="2020-06-03_082543" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200603083546.jpg" alt="2020-06-03_082554" style="zoom:80%"><details><summary><p>所有的习题：</p></summary><div class="content"><p><a href="/2020/04/28/Linux-MOOC习题-1~5章/">Linux MOOC习题 1~5章</a></p><p><a href="/2020/04/29/Linux-MOOC习题-6~10章/">Linux MOOC习题 6~10章</a></p><p><a href="/2020/05/07/Linux-MOOC习题-11~15章/">Linux MOOC习题 11~15章</a></p></div></details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己随便整理了一下在学习Linux网课时遇到的一些习题，易错点之类的，接上文&lt;a href=&quot;/2020/04/29/Linux-MOOC习题-6~10章/&quot;&gt;Linux MOOC习题 6~10章&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://666wxy666.github.io/categories/Linux/"/>
    
      <category term="习题" scheme="https://666wxy666.github.io/categories/Linux/%E4%B9%A0%E9%A2%98/"/>
    
    
      <category term="Linux" scheme="https://666wxy666.github.io/tags/Linux/"/>
    
      <category term="习题" scheme="https://666wxy666.github.io/tags/%E4%B9%A0%E9%A2%98/"/>
    
      <category term="易错点" scheme="https://666wxy666.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="网课" scheme="https://666wxy666.github.io/tags/%E7%BD%91%E8%AF%BE/"/>
    
      <category term="MOOC" scheme="https://666wxy666.github.io/tags/MOOC/"/>
    
  </entry>
  
  <entry>
    <title>Linux 拓展学习</title>
    <link href="https://666wxy666.github.io/2020/04/29/Linux-%E6%8B%93%E5%B1%95%E5%AD%A6%E4%B9%A0/"/>
    <id>https://666wxy666.github.io/2020/04/29/Linux-%E6%8B%93%E5%B1%95%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-04-29T12:40:47.779Z</published>
    <updated>2020-05-08T14:23:11.008Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>简单的写了一些Linux的课外拓展学习的相关知识和问题。</p><a id="more"></a><h2 id="一、命令的参数"><a href="#一、命令的参数" class="headerlink" title="一、命令的参数"></a>一、命令的参数</h2><p>编写一个小程序，可以显示命令的选项和参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; argc; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d:%p [%s]\n"</span>, i, argv[i], argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429205057.jpg" alt="2020-04-29_205032" style="zoom:80%"><h2 id="二、关于控制printf输出的颜色"><a href="#二、关于控制printf输出的颜色" class="headerlink" title="二、关于控制printf输出的颜色"></a>二、关于控制printf输出的颜色</h2><p>编写程序hello.c，编译和运行程序，得到类似以下结果：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429204547.png" alt="图片1" style="zoom:80%"><p>可以通过</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="number">033</span>[</span><br></pre></td></tr></table></figure><p>来控制printf输出的颜色，格式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"\033[字背景颜色;字体颜色m 字符串 \033[0m"</span> );</span><br></pre></td></tr></table></figure><p>注意，一定要在printf最后使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="number">033</span>[<span class="number">0</span>m</span><br></pre></td></tr></table></figure><p>来消除前面的作用，否则前面的设置对后面的printf都有效果。</p><table><thead><tr><th align="center">ANSI控制码</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">\033[0m</td><td align="center">关闭所有属性</td></tr><tr><td align="center">\033[1m</td><td align="center">设置高亮度</td></tr><tr><td align="center">\033[4m</td><td align="center">下划线</td></tr><tr><td align="center">\033[5m</td><td align="center">闪烁</td></tr><tr><td align="center">\033[7m</td><td align="center">反显</td></tr><tr><td align="center">\033[8m</td><td align="center">消隐</td></tr><tr><td align="center">\033[30m —\033[37m</td><td align="center">设置前景色</td></tr><tr><td align="center">\033[40m—\033[47m</td><td align="center">设置背景色</td></tr><tr><td align="center">\033[nA</td><td align="center">光标上移n行</td></tr><tr><td align="center">\03[nB</td><td align="center">光标下移n行</td></tr><tr><td align="center">\033[nC</td><td align="center">光标右移n行</td></tr><tr><td align="center">\033[nD</td><td align="center">光标左移n行</td></tr></tbody></table><p>字背景颜色范围: 40–49</p><p>字颜色范围: 30—39</p><table><thead><tr><th align="center">字背景颜色代号</th><th align="center">字背景颜色</th><th align="center">字颜色代号</th><th align="center">字颜色</th></tr></thead><tbody><tr><td align="center">40</td><td align="center">黑</td><td align="center">30</td><td align="center">黑</td></tr><tr><td align="center">41</td><td align="center">红</td><td align="center">31</td><td align="center">红</td></tr><tr><td align="center">42</td><td align="center">绿</td><td align="center">32</td><td align="center">绿</td></tr><tr><td align="center">43</td><td align="center">黄</td><td align="center">33</td><td align="center">黄</td></tr><tr><td align="center">44</td><td align="center">蓝</td><td align="center">34</td><td align="center">蓝</td></tr><tr><td align="center">45</td><td align="center">紫</td><td align="center">35</td><td align="center">紫</td></tr><tr><td align="center">46</td><td align="center">青</td><td align="center">36</td><td align="center">青</td></tr><tr><td align="center">47</td><td align="center">白</td><td align="center">37</td><td align="center">白</td></tr></tbody></table><p>小程序具体代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NONE <span class="meta-string">"\e[0m"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RED <span class="meta-string">"\e[0;31m"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CYAN <span class="meta-string">"\e[0;36m"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(RED <span class="string">"Hello "</span> CYAN <span class="string">"World!\n"</span> NONE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\e[0;31mHello \e[0;36mWorld!\n\e[0m"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里\e和\033是一个意思，e的八进制代码就是033，这两个print其实效果是一样的，前面那个printf中多个连续的“xxx”字符串会被自动整合为一个字符串，其实最终执行的就是第二个printf。</p><p>效果：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429211041.jpg" alt="2020-04-29_210711"><h2 id="三、关于Linux中bash的变量、替换和元字符"><a href="#三、关于Linux中bash的变量、替换和元字符" class="headerlink" title="三、关于Linux中bash的变量、替换和元字符"></a>三、关于Linux中bash的变量、替换和元字符</h2><p>要求只列出所有bash进程的状态，使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep bash</span><br></pre></td></tr></table></figure><p>但grep进程自身也被输出了：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429211423.jpg" alt="2020-04-29_211412" style="zoom:80%"><p>使用以下的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep [b]ash</span><br><span class="line">ps -ef | grep \\bash</span><br><span class="line">ps -ef | grep b\\ash</span><br><span class="line">ps -ef | grep b\ash</span><br><span class="line">ps -ef | grep ba\\sh</span><br></pre></td></tr></table></figure><ol><li><p>可以</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429211802.jpg" alt="2020-04-29_211631" style="zoom:80%"><p>上面这5个命令的核心目的其实是改变grep在</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef</span><br></pre></td></tr></table></figure><p>命令中的显示形式，例如这一个，我们使用三通（tee）命令将在grep命令过滤之前的输出定向到一个文件中。</p><p>先将原命令试一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | tee 1.txt | grep bash</span><br><span class="line">cat 1.txt</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429214710.jpg" alt="2020-04-29_214703" style="zoom:80%"><p>与1这个命令进行一下对比：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | tee 1.txt | grep [b]ash</span><br><span class="line">cat 1.txt</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429212708.jpg" alt="2020-04-29_212451" style="zoom:80%"><p>我们可以很明显的看到，grep命令确实改变了，因为正则表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[b]ash</span><br></pre></td></tr></table></figure><p>是可以匹配bash的，但是却不能匹配[b]ash，因此第一行的-bash这一行被取了出来，而最后grep这一行，由于不匹配[b]ash，就取不出来了，刚好实现了我们只列出所有bash进程的状态的目的，下面的几个命令大同小异。</p></li><li><p>不可以</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429211917.jpg" alt="2020-04-29_211651" style="zoom:80%"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | tee 1.txt | grep \\bash</span><br><span class="line">cat 1.txt</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429213025.jpg" alt="2020-04-29_213015" style="zoom:80%"><p>首先，\是Shell的元字符，先被\转义为真正的单个字符\，因此传给grep的正则表达式其实是\bash，而在正则表达式中，\b有特殊含义，是单词边界，因此就连bash和\bash全部都没有匹配到。</p></li><li><p>可以</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429211852.jpg" alt="2020-04-29_211709" style="zoom:80%"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | tee 1.txt | grep b\\ash</span><br><span class="line">cat 1.txt</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429213823.jpg" alt="2020-04-29_213811" style="zoom:80%"><p>和2一样，传给grep的正则表达式为b\ash，在正则表达式中\a是没有意义的，因此\被丢弃，正则表达式其实就是bash，所以第一行的-bash这一行被取了出来，而最后grep这一行，由于不匹配b\ash，就取不出来了。</p></li><li><p>不可以</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429212003.jpg" alt="2020-04-29_211730" style="zoom:80%"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | tee 1.txt | grep b\ash</span><br><span class="line">cat 1.txt</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429214303.jpg" alt="2020-04-29_214256" style="zoom:80%"><p>首先，\a先经过Shell的替换，因\a是没有特殊含义的，因此\被直接丢掉，传给grep的正则表达式为bash，这就和使用这个命令是一样的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep bash</span><br></pre></td></tr></table></figure><p>显然是不能实现目的。</p></li><li><p>不可以</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429212010.jpg" alt="2020-04-29_211747" style="zoom:80%"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | tee 1.txt | grep ba\\sh</span><br><span class="line">cat 1.txt</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429214922.jpg" alt="2020-04-29_214914" style="zoom:80%"><p>这个和2基本是一样的，和3唯一的区别就是，第3个中\a对正则表达式而言是没有特殊含义的，但是\s对正则表达式而言是有特殊含义的，\s代表空白字符（可能是空格、制表符、其他空白），也就是说，grep匹配到的应该是类似于：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ba h</span><br></pre></td></tr></table></figure><p>这种的字符串，显然-bash和ba\sh都不符合，因此就什么都没取到。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单的写了一些Linux的课外拓展学习的相关知识和问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://666wxy666.github.io/categories/Linux/"/>
    
      <category term="拓展学习" scheme="https://666wxy666.github.io/categories/Linux/%E6%8B%93%E5%B1%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Linux" scheme="https://666wxy666.github.io/tags/Linux/"/>
    
      <category term="拓展" scheme="https://666wxy666.github.io/tags/%E6%8B%93%E5%B1%95/"/>
    
      <category term="难点" scheme="https://666wxy666.github.io/tags/%E9%9A%BE%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Linux MOOC习题 6~10章</title>
    <link href="https://666wxy666.github.io/2020/04/29/Linux-MOOC%E4%B9%A0%E9%A2%98-6~10%E7%AB%A0/"/>
    <id>https://666wxy666.github.io/2020/04/29/Linux-MOOC%E4%B9%A0%E9%A2%98-6~10%E7%AB%A0/</id>
    <published>2020-04-29T01:54:47.814Z</published>
    <updated>2020-06-14T02:41:56.299Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>自己随便整理了一下在学习Linux网课时遇到的一些习题，易错点之类的，接上文<a href="/2020/04/28/Linux-MOOC习题-1~5章/">Linux MOOC习题 1~5章</a>。</p><a id="more"></a><p><strong><em>PS：第七章是上机实验，第一次上机实验和第二次的实验因为是提交阶段暂不公开，后面可能会发。</em></strong></p><h2 id="六、Linux命令风格和文件系统"><a href="#六、Linux命令风格和文件系统" class="headerlink" title="六、Linux命令风格和文件系统"></a>六、Linux命令风格和文件系统</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429102845.jpg" alt="2020-04-28_213047" style="zoom:80%"><blockquote><p>这两个题都忽略了“符号链接”的作用。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429103011.jpg" alt="2020-04-28_213114" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429103030.jpg" alt="2020-04-28_213125" style="zoom:80%"><blockquote><p>这俩没啥好说的。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429103227.jpg" alt="2020-04-28_213133" style="zoom:80%"><blockquote><p>在Linux中，一般是-1代表失败，&gt;=0的值代表成功。</p></blockquote><h2 id="八、文件和目录的权限，Shell"><a href="#八、文件和目录的权限，Shell" class="headerlink" title="八、文件和目录的权限，Shell"></a>八、文件和目录的权限，Shell</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429103454.jpg" alt="2020-04-28_213341" style="zoom:80%"><blockquote><p>目录有执行权限（即x权限）意味着分析路径名过程中可检索该目录。</p></blockquote><h2 id="九、替换，元字符和转义"><a href="#九、替换，元字符和转义" class="headerlink" title="九、替换，元字符和转义"></a>九、替换，元字符和转义</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429103639.jpg" alt="2020-04-28_213427" style="zoom:80%"><blockquote><p>如果你是执行这个命令的操作员，估计你马上就心情不好了。由于拼错了单词，把DATABASE不小心写成了DATEBASE，灾难来了。未命名的变量被bash替换为空字符串，实际上你以root身份执行了最邪恶的一条命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /*</span><br></pre></td></tr></table></figure><p>永远不要盲目自信，谁也保证不了自己不会犯错误，怎么才能避免这样的悲剧发生？</p><ol><li><p>尽量不要以root身份登录。</p></li><li><p>bash有选项，引用未定义的变量会出错而不是替换为空字符串，可以打开这个选项。早期的编程语言把引用的未定义过的变量自动加上定义，这种做法实际上太糟糕，最早的FORTRAN语言就这种做法，据说曾因此导致一次太空任务失败。</p></li><li><p>在设计你自己的系统时，建库命令能够从目录名开始建库，就是说要求建库之前/opt/data下不需要存在目录puma，而不是要求建库之前/opt/data有个空目录puma，这样的话，即使你的命令变成了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf $DATEBASE</span><br></pre></td></tr></table></figure><p>因为你的失误，会导致rm命令抱怨缺少参数而什么都不做，这个结果是可以接受的。</p></li></ol></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429103652.jpg" alt="2020-04-28_213530" style="zoom:80%"><blockquote><p>在Linux中，目前我已知的Shell的元字符有：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">空格 制表符 回车 &gt; &lt; | ; &amp; $ * [ ] ? \ ( ) '' " " 反撇号`</span><br></pre></td></tr></table></figure><p>第11题中，这三个命令都可以取消文件通配符*的特殊作用，让echo直接打印字符*，并且这个替换是Shell进行的，也就是说，echo拿到的命令都是一样的，他是分不清操作员输入的是哪个命令，这三个命令的参数：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429105050.jpg" alt="2020-04-29_105040" style="zoom:80%"><p>而对于不转义的命令的参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo *</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429105236.jpg" alt="2020-04-29_105224" style="zoom:80%"><p>因此结果就很明显了：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429104247.jpg" alt="2020-04-29_104233" style="zoom:80%"></blockquote><h2 id="十、shell流程控制：条件，循环与函数"><a href="#十、shell流程控制：条件，循环与函数" class="headerlink" title="十、shell流程控制：条件，循环与函数"></a>十、shell流程控制：条件，循环与函数</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507100115.jpg" alt="2020-05-07_095339" style="zoom:80%"><blockquote><ul><li>B选项：明显的错误，<code>then</code>要么另起一行，要么前面加<code>;</code>。</li><li>C选项和D选项：都是没加<code>fi</code>，C选项还有其他的错误，这明显是和C语言之类的给混了。</li></ul></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507101924.jpg" alt="2020-05-07_095526" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507102056.jpg" alt="2020-05-07_095602" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200507102115.jpg" alt="2020-05-07_095632" style="zoom:80%"><details><summary><p>所有的习题：</p></summary><div class="content"><p><a href="/2020/04/28/Linux-MOOC习题-1~5章/">Linux MOOC习题 1~5章</a></p><p><a href="/2020/04/29/Linux-MOOC习题-6~10章/">Linux MOOC习题 6~10章</a></p><p><a href="/2020/05/07/Linux-MOOC习题-11~15章/">Linux MOOC习题 11~15章</a></p></div></details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己随便整理了一下在学习Linux网课时遇到的一些习题，易错点之类的，接上文&lt;a href=&quot;/2020/04/28/Linux-MOOC习题-1~5章/&quot;&gt;Linux MOOC习题 1~5章&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://666wxy666.github.io/categories/Linux/"/>
    
      <category term="习题" scheme="https://666wxy666.github.io/categories/Linux/%E4%B9%A0%E9%A2%98/"/>
    
    
      <category term="Linux" scheme="https://666wxy666.github.io/tags/Linux/"/>
    
      <category term="习题" scheme="https://666wxy666.github.io/tags/%E4%B9%A0%E9%A2%98/"/>
    
      <category term="易错点" scheme="https://666wxy666.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="网课" scheme="https://666wxy666.github.io/tags/%E7%BD%91%E8%AF%BE/"/>
    
      <category term="MOOC" scheme="https://666wxy666.github.io/tags/MOOC/"/>
    
  </entry>
  
  <entry>
    <title>Linux MOOC习题 1~5章</title>
    <link href="https://666wxy666.github.io/2020/04/28/Linux-MOOC%E4%B9%A0%E9%A2%98-1~5%E7%AB%A0/"/>
    <id>https://666wxy666.github.io/2020/04/28/Linux-MOOC%E4%B9%A0%E9%A2%98-1~5%E7%AB%A0/</id>
    <published>2020-04-28T13:08:08.946Z</published>
    <updated>2020-06-14T02:41:43.661Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>自己随便整理了一下在学习Linux网课时遇到的一些习题，易错点之类的。</p><a id="more"></a><p>废话不多说，直接开始：</p><p><strong><em>PS：第一章是课程介绍。</em></strong></p><h2 id="二、开始使用Linux和文本文件的处理"><a href="#二、开始使用Linux和文本文件的处理" class="headerlink" title="二、开始使用Linux和文本文件的处理"></a>二、开始使用Linux和文本文件的处理</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200428215021.jpg" alt="2020-04-28_211643" style="zoom:80%"><blockquote><p>第1题其实是很基础的问题，早期的终端一般由键盘、显示器和RS232串行通信接口构成，没有磁盘存储器，其实可以想象成和打字机差不多的东西，他就是直接在显示器上显示了，不需要磁盘存储器。</p><p>第2题也比较基础：</p><ul><li><p>行律的作用是：</p><ul><li><p>一行内字符的缓冲、回显和编辑，直到按下回车键；</p></li><li><p>数据的加工，类似第二题中的将“\n”替换为“\r\n”；</p></li><li><p>将CTRL-C字符转换为终止进程的信号；</p></li></ul></li><li><p>驱动程序其实是串口与行律的接口，负责上行和下行字符流。</p></li></ul></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200428215752.jpg" alt="2020-04-28_211738" style="zoom:80%"><blockquote><p>这俩题没啥好说的，基础知识。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200428215946.jpg" alt="2020-04-28_211810" style="zoom:80%"><blockquote><p>并不是这样的，CTRL-C确实传送了字符<strong><em>（Ctrl+字母组合键可以产生ASCII码为1-26的控制字符，字母序号是几，ASCII码就是几，Ctrl+C的ASCII码应为3）</em></strong>，其实还是行律的作用，他将CTRL-C字符转换为终止进程的信号，从而通知Linux主机，进程终止。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200428220440.jpg" alt="2020-04-28_211920" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200428220658.jpg" alt="2020-04-28_211921" style="zoom:80%"><blockquote><p>这俩题都是关于uniq命令的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uniq -u</span><br><span class="line">uniq -d</span><br><span class="line">uniq</span><br></pre></td></tr></table></figure><p>第一个命令，-u代表unique，只打印没有重复的行；</p><p>第二个命令，-d代表duplicated，只打印重复的行，注意重复的行只打印一次；</p><p>第三个命令，啥也不加就是都打印，但是也是复的行只打印一次；</p><p>还有就是关于重复的行，意思其实是连续的紧邻的两行内容相同才被叫做重复的行，因此第10题是错的。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200428221248.jpg" alt="2020-04-28_211949" style="zoom:80%"><blockquote><p>这个题不难，写出来的目的是只要记得</p><div class="note"><p>Less is more</p></div><p>就很好想了，less是more的升级版。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200428221932.jpg" alt="2020-04-28_212008" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200428221942.jpg" alt="2020-04-28_212044" style="zoom:80%"><blockquote><p>这俩题也不多解释了，od不可打印字符也可以显示，tr是用于翻译，把string1出现的字符替换为string2中对应的字符，ASCII字符0也可以翻译。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tr string1 string2</span><br></pre></td></tr></table></figure></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429095034.jpg" alt="2020-04-28_212253" style="zoom:80%"><blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429095238.png" alt="7992DB2C9EF7FC68967A6E866A101062" style="zoom:50%"></blockquote><h2 id="三、正则表达式"><a href="#三、正则表达式" class="headerlink" title="三、正则表达式"></a>三、正则表达式</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200428222324.jpg" alt="2020-04-28_212126" style="zoom:80%"><blockquote><p>先说一下正则表达式的<strong><em>元字符</em></strong>，有6个，分别是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. * [ \ ^ $</span><br></pre></td></tr></table></figure><p>关于他们各自的含义不多说，自行百度，一定要注意的是]不是元字符，很容易搞错。</p><p>而关于单字符正则表达式，显而易见，就是匹配一个字符呗，不过有特殊的:</p><ul><li><p>\加一个字符构成的转义字符，看做单字符正则表达式；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\. \* \[ \\ \^ \$</span><br></pre></td></tr></table></figure></li><li><p>[]定义的集合也被看做单字符正则表达式;</p></li></ul><p>因为.本来的含义是匹配任意字符，转义后就是单字符.，因此都是单字符正则表达式，而$在尾部时和^在首部时有特殊含义，因此转义之前不是，转义后就是单字符​了。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429091111.jpg" alt="2020-04-28_212154" style="zoom:80%"><blockquote><p>这个题就比较有意思了，先看一下sed命令的基本用法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed 's/正则表达式/字符串/g' 文件名列表</span><br></pre></td></tr></table></figure><p>s选项的意思是替换，将文件中匹配第一个//中的正则表达式的内容替换为第二个//中的字符串。</p><p>然后我们在看上题‘’中的正则表达式（也就是第一个//中的内容）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\[[^][]*]</span><br></pre></td></tr></table></figure><p>可以分为三部分：</p><ol><li><p>因为[是元字符，加\转义后就变成了真正的[。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\[</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>中间这一部分是一个集合[]，重复一次或多次[]*，集合里面的^代表排除，排除了]和[，意思就是说除]和[外的字符重复一次或多次。那么这就有一个问题，第一个[为什么不与第一个]匹配，反而去和最后一个]匹配呢？个人觉得，因为如果与第一个]匹配，就有了[^]，这显然是错误的正则表达式，那么就继续向后匹配，因此就匹配到了最后面的]。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^][]*</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>因为]不是元字符，也没有[与它匹配，它就是单纯的一个字符]。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">]</span><br></pre></td></tr></table></figure></li></ol><p>综上所述，这个正则表达式可以匹配“[非]和[的字符任意多个]”，类似[参考文献23]这样的，但是如果[]里面还有]和[，就匹配不到了。再看上面的题，第二个//里面是空的，那么就是把匹配到的内容删除，很好理解。</p></blockquote><h2 id="四、文件比较，文件通配符"><a href="#四、文件比较，文件通配符" class="headerlink" title="四、文件比较，文件通配符"></a>四、文件比较，文件通配符</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429093945.jpg" alt="2020-04-28_212239" style="zoom:80%"><blockquote><p>vi的基本用法，在命令状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">:q      退出（:quit的缩写）</span><br><span class="line">:q!     退出且不保存（:quit!的缩写）</span><br><span class="line">:wq     保存并退出</span><br><span class="line">:wq!    保存并退出即使文件没有写入权限（强制保存退出）</span><br><span class="line">:x      保存并退出（类似:wq，但是只有在有更改的情况下才保存）</span><br><span class="line">:exit   保存并退出（和:x相同）</span><br><span class="line">:qa     退出所有(:quitall的缩写)</span><br><span class="line">:cq     退出且不保存（即便有错误）</span><br></pre></td></tr></table></figure><p>另外在“正常模式”下输入“ZZ”来保存并退出Vim（和:x相同），或者“ZQ”不保存并退出（和:q!相同）注意此处ZZ大写和小写是完全不同的。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429095046.jpg" alt="2020-04-28_212356" style="zoom:80%"><blockquote><p>diff一般用于比较文本文件。</p></blockquote><h2 id="五、文件管理和目录管理"><a href="#五、文件管理和目录管理" class="headerlink" title="五、文件管理和目录管理"></a>五、文件管理和目录管理</h2><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429100515.jpg" alt="2020-04-28_212515" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429101043.jpg" alt="2020-04-28_212629" style="zoom:80%"><blockquote><p>在Linux中，Shell会自动帮你进项一些替换，实际运行的命令其实是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp src/x.c src/xx.c src/xxx.c src/x.h src/xx.h src/xxx.h……</span><br></pre></td></tr></table></figure><p>如果有好多.c和.h文件（超过两个），cp就会报错：</p><div class="note"><p>cp: target xxx is not a directory</p></div><p>但是如果只有两个.c或.h文件，那么就会产生非常严重的后果，实际运行了下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp src/x.c src/y.c</span><br></pre></td></tr></table></figure><p>这是非常危险的，这样y.c的内容会被x.c覆盖，这是我们不愿意看到的。</p><p>那么应该用什么命令来实现题目的要求呢？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp src/*.[ch] .</span><br></pre></td></tr></table></figure><p>我们显示地指定复制到.（当前目录），就不会出现问题了。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429102232.jpg" alt="2020-04-28_212656" style="zoom:80%"><blockquote><p>这也是在Linux中很怪的地方，明明你不能写这个文件，但是你却可以删除，如果不加-f，删除只读文件时会有提示，但是加了-f就没有任何提示了。还有一点需要注意的是，如第6题所说，加了-f也不能删除无权限删除的文件。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429102450.jpg" alt="2020-04-28_212714" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429102603.jpg" alt="2020-04-28_212737" style="zoom:80%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200429102659.jpg" alt="2020-04-28_212800" style="zoom:80%"><blockquote><p>关于第10题，不像Windows，在Linux中这些后缀都是约定俗成的，只是为了做标记用，好区分而已，没有实际意义。</p></blockquote><details><summary><p>所有的习题：</p></summary><div class="content"><p><a href="/2020/04/28/Linux-MOOC习题-1~5章/">Linux MOOC习题 1~5章</a></p><p><a href="/2020/04/29/Linux-MOOC习题-6~10章/">Linux MOOC习题 6~10章</a></p><p><a href="/2020/05/07/Linux-MOOC习题-11~15章/">Linux MOOC习题 11~15章</a></p></div></details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己随便整理了一下在学习Linux网课时遇到的一些习题，易错点之类的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://666wxy666.github.io/categories/Linux/"/>
    
      <category term="习题" scheme="https://666wxy666.github.io/categories/Linux/%E4%B9%A0%E9%A2%98/"/>
    
    
      <category term="Linux" scheme="https://666wxy666.github.io/tags/Linux/"/>
    
      <category term="习题" scheme="https://666wxy666.github.io/tags/%E4%B9%A0%E9%A2%98/"/>
    
      <category term="易错点" scheme="https://666wxy666.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="网课" scheme="https://666wxy666.github.io/tags/%E7%BD%91%E8%AF%BE/"/>
    
      <category term="MOOC" scheme="https://666wxy666.github.io/tags/MOOC/"/>
    
  </entry>
  
  <entry>
    <title>Python 爬虫小Demo 学堂在线课程</title>
    <link href="https://666wxy666.github.io/2020/04/07/Python-%E7%88%AC%E8%99%AB%E5%B0%8FDemo-%E5%AD%A6%E5%A0%82%E5%9C%A8%E7%BA%BF%E8%AF%BE%E7%A8%8B/"/>
    <id>https://666wxy666.github.io/2020/04/07/Python-%E7%88%AC%E8%99%AB%E5%B0%8FDemo-%E5%AD%A6%E5%A0%82%E5%9C%A8%E7%BA%BF%E8%AF%BE%E7%A8%8B/</id>
    <published>2020-04-07T11:43:33.300Z</published>
    <updated>2020-05-18T12:22:07.776Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本文是关于Python中的Spider的小Demo，通过Python的scrapy爬取京学堂在线课程的相关数据。</strong></p><a id="more"></a><h2 id="一、编译环境："><a href="#一、编译环境：" class="headerlink" title="一、编译环境："></a>一、编译环境：</h2><p>PyCharm 2019.3.4 (Professional Edition)</p><p>Build #PY-193.6911.25, built on March 18, 2020</p><p>Runtime version: 11.0.6+8-b520.43 amd64</p><p>VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o</p><p>Windows 10 10.0</p><p>GC: ParNew, ConcurrentMarkSweep</p><p>Memory: 725M</p><p>Cores: 8</p><p>Registry: ide.balloon.shadow.size=0</p><p>Non-Bundled Plugins:</p><p>GrepConsole,Statistic,cn.yiiguxing.plugin.translate,com.chrisrm.idea.MaterialThemeUI,com.notime.intellijPlugin.backgroundImagePlus,com.wakatime.intellij.plugin,izhangzhihao.rainbow.brackets,mobi.hsz.idea.gitignore, net.vektah.codeglance, org.intellij.gitee</p><p>Python Version：3.7（Anaconda3）</p><p>Package：</p><p>scrapy==2.0.1</p><h2 id="二、详细步骤"><a href="#二、详细步骤" class="headerlink" title="二、详细步骤"></a>二、详细步骤</h2><h3 id="①准备工作"><a href="#①准备工作" class="headerlink" title="①准备工作"></a>①准备工作</h3><ol><li>在Pycharm中新建一个Pure Python项目（记得要按照一中的要求配好Python环境）。</li></ol><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200407214757.jpg" alt="2020-04-07_214715" style="zoom:67%"><ol start="2"><li>打开Pycharm的下方的终端（Terminal），当然这些也可以在系统终端里操作，不过可能需要的步骤多一些，还是直接在Pycharm里方便一些。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200408164806.png" alt="2020-04-08_164744"></p><ol start="3"><li><p>在终端里输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject myScrapy</span><br></pre></td></tr></table></figure><p>本来是可以在我们刚刚创建的项目里新建一个名为“myScrapy”的scrapy项目的，但是不知道为什么竟然报错了：</p><p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200408190345.png" alt="2020-04-08_190330"></p><p>这是什么奇奇怪怪的错误，我都没有“d:\bld\scrapy_1584555997548_h_env\python.exe”这个目录，经过查找相关问题的资料，问题可能是出在Python环境上，因为我上一次新建项目时并没有报错，这一次我直接用的上一个项目的环境，网上还有一种说法是Scrapy的bug，详见</p><p><a href="https://github.com/scrapy/scrapy/issues/4289" target="_blank" rel="external nofollow noopener noreferrer">Fatal error launching scrapy&gt;1.6.0 from Anaconda Prompt</a></p><p><a href="https://github.com/conda-forge/scrapy-feedstock/issues/37" target="_blank" rel="external nofollow noopener noreferrer">Issue with conda-forge scrapy&gt;1.6.0 on Windows</a></p><p>目前找到了两种解决方案：</p><ol><li><p>把python环境复制到报错的那个目录（d:\bld\scrapy_1584555997548_h_env\python.exe），然后在创建scrapy项目，但这个解决方法有点愚蠢，就没有采用。</p></li><li><p>在scrapy命令前面添加“python -m”选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m scrapy startproject myScrapy</span><br></pre></td></tr></table></figure><p>就可以正常创建了。</p><p>关于Python的-m选项，官方给出的解释是“run library module as a script”，简单来说就是将库中的Python模块当作脚本去运行。</p><p>特别感谢简书的大佬<a href="https://www.jianshu.com/p/323fc9a1d7d2" target="_blank" rel="external nofollow noopener noreferrer">ccw1078</a>提供的解释，很清晰明了，有兴趣的可以去瞅一下，因为和本文的主题爬虫没啥关系，在这里就不赘述了。</p></li></ol></li></ol><ol start="4"><li><p>出现这些提示就代表创建成功了。</p><p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200408192211.jpg" alt="2020-04-08_192151"></p><p>然后在spiders文件里新建一个spider.py文件，用于写爬虫。</p></li><li><p>我们来看一下目前scrapy项目的目录结构。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200408203358.jpg" alt="2020-04-08_203310" style="zoom:67%"><p>__init__.py：pycharm生成的文件，简化导入语句用的，可以忽略，没啥用，建议删了，留着可能会出问题。</p><p>spiders：存放你Spider爬虫源文件</p><p>​ spider.py：代码主要在这里写。</p><p>items.py：数据容器。</p><p>middlewares.py：Downloader Middlewares(下载器中间件)和Spider Middlewares(蜘蛛中间件)实现的地方。</p><p>pipelines.py：项目管道文件，相当于数据中转站。实现数据的清洗，储存，验证。</p><p>settings.py：scrapy的全局配置。</p><p>scrapy.cfg：配置文件。</p><p>scrapy已经帮我们把大体框架写好了，我们主要要修改的文件是spider.py，items.py，pipelines.py，settings.py。</p></li><li><p>这是爬虫spider的基本工作方式，想要深入了解的可以去网上查找资料。</p></li></ol><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200408201638.png" alt="scrapy" style="zoom:33%"><h3 id="②开始写代码"><a href="#②开始写代码" class="headerlink" title="②开始写代码"></a>②开始写代码</h3><ol><li><p>先来写items.py。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyscrapyItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    school = scrapy.Field()</span><br><span class="line">    num = scrapy.Field()</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>再来搞settings.py，这个只需要找到这个注释掉的语句，把#去掉就OK了，就像这样：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200408210722.jpg" alt="2020-04-08_210710" style="zoom:67%"></li><li><p>pipelines.py就很好写了，基本可以当模板来用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyscrapyPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 这个就是爬虫生成的文件，可以支持好多种格式，这里使用的是json文件</span></span><br><span class="line">            self.file = open(<span class="string">'MyData.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            print(err)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        dict_item = dict(item)</span><br><span class="line">        json_str = json.dumps(dict_item, ensure_ascii=<span class="literal">False</span>) + <span class="string">"\n"</span></span><br><span class="line">        self.file.write(json_str)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.file.close()</span><br></pre></td></tr></table></figure></li><li><p>spider.py是我们主要写的核心部分。这里需要一些html的xpath相关知识来对项进行定位，可以自行查找相关资料。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@Copyright: Copyright (c) 2020 苇名一心 All Rights Reserved.</span></span><br><span class="line"><span class="string">@Project: xuetangzaixian</span></span><br><span class="line"><span class="string">@Description: </span></span><br><span class="line"><span class="string">@Version: </span></span><br><span class="line"><span class="string">@Author: 苇名一心</span></span><br><span class="line"><span class="string">@Date: 2020-04-08 20:31</span></span><br><span class="line"><span class="string">@LastEditors: 苇名一心</span></span><br><span class="line"><span class="string">@LastEditTime: 2020-04-08 20:31</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> myScrapy.myScrapy.items <span class="keyword">import</span> MyscrapyItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mySpider</span><span class="params">(scrapy.spiders.Spider)</span>:</span></span><br><span class="line">    <span class="comment"># spider的名字</span></span><br><span class="line">    name = <span class="string">"xuetang"</span></span><br><span class="line">    <span class="comment"># 限制spider爬取的域名</span></span><br><span class="line">    allowed_domains = [<span class="string">"www.xuetangx.com/"</span>]</span><br><span class="line"><span class="comment"># 爬虫要爬取的网页，是一个列表，按顺序爬取</span></span><br><span class="line">    start_urls = [<span class="string">"http://www.xuetangx.com/partners"</span>]</span><br><span class="line"><span class="comment"># 这是一种方式，可以爬取网页中所有的项</span></span><br><span class="line">    <span class="comment"># def parse(self, response):</span></span><br><span class="line">    <span class="comment">#     item = MyscrapyItem()</span></span><br><span class="line">    <span class="comment">#     for each in response.xpath("/html/body/article[1]/section/ul/*"):</span></span><br><span class="line">    <span class="comment">#         item['school'] = each.xpath("a/div[2]/h3/text()").extract()</span></span><br><span class="line">    <span class="comment">#         item['num'] = each.xpath("a/div[2]/p[1]/text()").extract()</span></span><br><span class="line">    <span class="comment">#         if item['num']:</span></span><br><span class="line">    <span class="comment">#             item['num'] = re.findall(r'\d+', item['num'][0])</span></span><br><span class="line">    <span class="comment">#         if item['school'] and item['num']:</span></span><br><span class="line">    <span class="comment">#             yield (item)</span></span><br><span class="line">    <span class="comment"># 这是第二种方式，使用for循环，制定爬取项的数目</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        item = MyscrapyItem()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">144</span>):</span><br><span class="line">            item[<span class="string">'school'</span>] = response.xpath \</span><br><span class="line">                (<span class="string">"/html/body/article[1]/section/ul/li[&#123;&#125;]/a/div[2]/h3/text()"</span>.format(i)).extract()</span><br><span class="line">            item[<span class="string">'num'</span>] = response.xpath \</span><br><span class="line">                (<span class="string">"/html/body/article[1]/section/ul/li[&#123;&#125;]/a/div[2]/p[1]/text()"</span>.format(i)).extract()</span><br><span class="line">            <span class="comment"># 判断爬取的项目是否为空，把非空的项目提交</span></span><br><span class="line">            <span class="keyword">if</span> item[<span class="string">'school'</span>] <span class="keyword">and</span> item[<span class="string">'num'</span>]:</span><br><span class="line">                <span class="keyword">yield</span> (item)</span><br></pre></td></tr></table></figure></li></ol><h3 id="③可以开始运行啦"><a href="#③可以开始运行啦" class="headerlink" title="③可以开始运行啦"></a>③可以开始运行啦</h3><ol><li><p>在运行前要先在项目根目录下建立一个begin.py文件来控制scrapy爬虫的运行。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200408212615.jpg" alt="2020-04-08_212604" style="zoom:80%"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> cmdline</span><br><span class="line"><span class="comment"># "xuetang"是我们上面spider.py中定义的爬虫名</span></span><br><span class="line">cmdline.execute(<span class="string">"scrapy crawl xuetang"</span>.split())</span><br></pre></td></tr></table></figure></li><li><p>最终的项目结构（__init__.py没啥用，删了）：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200408212844.jpg" alt="2020-04-08_212834" style="zoom:67%"></li><li><p>运行begin.py就可以开始爬虫了。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200408212955.jpg" alt="2020-04-08_212946" style="zoom:67%"><p>出现这些提示就表示成功了，运行完毕后会发现项目根目录出现了我们在pipelines.py中设置好的MyData.json。</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200408222346.jpg" alt="2020-04-08_222333" style="zoom:67%"></li><li><p>打开MyData.json看一下，Perfect！</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200408222427.jpg" alt="2020-04-08_222417" style="zoom:67%"><p>有了这个json文件，我们就可以利用Python的pandas、numpy等工具进行各种处理，然后用matplotlib等模块进行画图了。</p></li></ol><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>本文只是对Python的scrapy爬虫进行了简单的介绍和用一个小Demo讲述了如何使用scrapy爬取网页数据，希望对你有所帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文是关于Python中的Spider的小Demo，通过Python的scrapy爬取京学堂在线课程的相关数据。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://666wxy666.github.io/categories/Python/"/>
    
      <category term="爬虫" scheme="https://666wxy666.github.io/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="https://666wxy666.github.io/tags/Python/"/>
    
      <category term="爬虫" scheme="https://666wxy666.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="数据处理" scheme="https://666wxy666.github.io/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="学堂在线" scheme="https://666wxy666.github.io/tags/%E5%AD%A6%E5%A0%82%E5%9C%A8%E7%BA%BF/"/>
    
      <category term="课程" scheme="https://666wxy666.github.io/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Linux 上机实战1 正则表达式</title>
    <link href="https://666wxy666.github.io/2020/03/31/Linux-%E4%B8%8A%E6%9C%BA%E5%AE%9E%E6%88%981-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://666wxy666.github.io/2020/03/31/Linux-%E4%B8%8A%E6%9C%BA%E5%AE%9E%E6%88%981-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-03-31T12:46:39.215Z</published>
    <updated>2020-05-08T14:21:37.029Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本文是关于Linux中的文本处理三剑客（grep，sed，awk），以及正则表达式应用的一个样例，获取北京某时刻PM2.5的数据，然后进行处理，输出到csv文件中，并画图表展示。</strong></p><a id="more"></a><h2 id="一、题目要求："><a href="#一、题目要求：" class="headerlink" title="一、题目要求："></a>一、题目要求：</h2><p>​ <strong>从因特网上搜索 Web 页，用 wget 获取网页，处理网页 html 文本数据，从中提取出当前时间点北京各监测站的 PM2.5 浓度，输出如下 CSV 格式数据：</strong><br><strong><em>2020 03 09 13:00:00, 海淀区万柳 ,73<br>2020 03 09 13:00:00, 昌平镇 ,67<br>2020 03 09 13:00:00, 奥体中心 ,66<br>2020 03 09 13:00:00, 海淀区万柳 ,73<br>2020 03 09 13:00:00, 昌平镇 ,73<br>2020 03 09 13:00:00, 奥体中心 ,75</em></strong><br>​ <strong>撰写实验报告，要求：写出对数据的分析和处理思路，列出各个处理步骤并给出解释。</strong></p><h2 id="二、详细步骤："><a href="#二、详细步骤：" class="headerlink" title="二、详细步骤："></a>二、详细步骤：</h2><ol><li><p>从因特网上搜索 Web 页，找到与含有北京各监测站的 PM2.5 浓度的网站，我找到了<strong><em>绿色呼吸网（<a href="http://www.pm25.com/city/beijing.html）" target="_blank" rel="external nofollow noopener noreferrer">http://www.pm25.com/city/beijing.html）</a></em></strong>，网站如下：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200331203352.jpg" alt="1" style="zoom:33%"></li><li><p>使用<strong><em>Xshell</em></strong>登录到Ubuntu服务器：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200331203420.jpg" alt="2" style="zoom:33%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200331203429.jpg" alt="3" style="zoom:33%"></li><li><p>使用<strong><em>wget</em></strong>命令获取该网页：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.pm25.com/city/beijing.html</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200331203525.jpg" alt="4" style="zoom:80%"></li><li><p>使用<strong><em>cat</em></strong>命令查看该网页的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat beijing.html | more</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200331203554.jpg" alt="5" style="zoom:80%"><p>我们关注的内容：</p><p>​ ①数据更新的时间：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200331203608.jpg" alt="6" style="zoom:67%"><p>​ ②各监测点PM2.5浓度数据：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200331203617.jpg" alt="7" style="zoom:50%"></li><li><p>发现时间的地方有个<strong><em>“更新时间：”</em></strong>，监测点名称的地方都有<strong><em>“pjadt_location”</em></strong>，而PM2.5浓度的地方都有<strong><em>“pjadt_pm25”</em></strong>。根据这个特性，先使用<strong><em>awk</em></strong>命令将需要的行保留下来。下面先进行编写<strong><em>1.awk</em></strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim 1.awk</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200331203629.jpg" alt="8"></p><p>运行以下命令，对所需行进行过滤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat beijing.html | awk -f 1.awk | more</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200331203639.jpg" alt="9" style="zoom:50%"><p>发现除了我们想要的行还多出了这几行：</p><p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200331203656.jpg" alt="10"></p><p>经过观察，发现<strong><em>“PM2.5”</em></strong>浓度这一行与我们所需的行的区别是，我们所需的行有<strong><em>μg</em></strong>，而<strong><em>“PM2.5”</em></strong>浓度这一行没有：</p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200331203705.jpg" alt="11" style="zoom:50%"><p>我们重新对<strong><em>“1.awk”</em></strong>进行编辑，直接将<strong><em>“监测站点”</em></strong>这一行排除，并且对<strong><em>“PM2.5”</em></strong>浓度这一行采用额外的过滤规则:</p><p><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200331203718.jpg" alt="12"></p><p>重新运行以下命令，对所需行进行过滤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat beijing.html | awk -f 1.awk | more</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200331203729.jpg" alt="13" style="zoom:50%"><p>发现已经筛选出了所需要的行。</p></li><li><p>现在再利用<strong><em>sed</em></strong>命令将<strong><em>html标签”&lt;&gt;“</em></strong>中的内容和<strong><em>“更新时间：”</em></strong>这个无用的信息删除：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat beijing.html | awk -f 1.awk | sed -e 's/&lt;[^&lt;&gt;]*&gt;//g' -e 's/更新时间：//g' | more</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200331203744.jpg" alt="14" style="zoom:50%"><p>发现已经只剩余我们想要的数据。</p></li><li><p>但是这些数据不在同一行，且没有明显特征，无法进行<strong><em>awk</em></strong>命令，因此先使用<strong><em>tr</em></strong>命令将这些行合并为一行，以空格分隔：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat beijing.html | awk -f 1.awk | sed -e 's/&lt;[^&lt;&gt;]*&gt;//g' -e 's/更新时间：//g' | tr '\n' ' ' | more</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200331203757.jpg" alt="15" style="zoom:50%"></li><li><p>最后利用<strong><em>awk</em></strong>命令将所需内容规格化输出即可，先编辑<strong><em>“2.awk”</em></strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim 2.awk</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200331203807.jpg" alt="16" style="zoom:80%"><p>利用<strong><em>for</em></strong>循环输出，<strong><em>NF</em></strong>为列数，刚好循环$$(NF-2)/4$$次，第一个<strong><em>%s</em></strong>为<strong><em>日期</em></strong>，第二个<strong><em>%s</em></strong>为<strong><em>时间</em></strong>，第三个<strong><em>%s</em></strong>为<strong><em>监测点名称</em></strong>，第四个<strong><em>%s</em></strong>为<strong><em>PM2.5浓度</em></strong>，再运行以下<strong><em>awk</em></strong>命令，即可得到格式化的输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat beijing.html | awk -f 1.awk | sed -e 's/&lt;[^&lt;&gt;]*&gt;//g' -e 's/更新时间：//g' | tr '\n' ' ' | awk -f 2.awk  | more</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200331203819.jpg" alt="17" style="zoom:50%"><p>发现输出已经符合题目要求。</p></li><li><p>将结果重定向到文件<strong><em>“beijing.csv”</em></strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat beijing.html | awk -f 1.awk | sed -e 's/&lt;[^&lt;&gt;]*&gt;//g' -e 's/更新时间：//g' | tr '\n' ' ' | awk -f 2.awk  &gt; beijing.csv</span><br><span class="line">vim beijing.csv</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200331203839.jpg" alt="18" style="zoom:50%"> <img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200331203853.jpg" alt="19" style="zoom:80%"></li><li><p>将<strong><em>beijing.csv</em></strong>发送到电脑，并将编码转为<strong><em>ANSI</em></strong>：</p></li></ol><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200331203903.jpg" alt="20" style="zoom:67%"><ol start="11"><li><p>由于不同时间的数据有所不同，因此我的过滤语句考虑了不同时间点的情况<strong><em>（北京一共有12个监测点，有时有的监测点没有数据，因此是只有11个监测点的数据）</em></strong>，直接运行以下命令就可以直接将数据导出为<strong><em>beijing.csv</em></strong>，以下为另一时间点的数据情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.pm25.com/city/beijing.html</span><br><span class="line">cat beijing.html | awk -f 1.awk | sed -e 's/&lt;[^&lt;&gt;]*&gt;//g' -e 's/更新时间：//g' | tr '\n' ' ' | awk -f 2.awk  &gt; beijing.csv</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/666WXY666/cdn/img/placeholder/large.svg" data-original="https://gitee.com/wxy_666/images/raw/master/20200331203916.jpg" alt="21" style="zoom:67%"></li></ol><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>本文以一个样例，详细介绍了Linux中的文本处理三剑客（grep，sed，awk），以及正则表达式的相关知识，希望对你的Linux学习有所帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文是关于Linux中的文本处理三剑客（grep，sed，awk），以及正则表达式应用的一个样例，获取北京某时刻PM2.5的数据，然后进行处理，输出到csv文件中，并画图表展示。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://666wxy666.github.io/categories/Linux/"/>
    
      <category term="上机实战" scheme="https://666wxy666.github.io/categories/Linux/%E4%B8%8A%E6%9C%BA%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="Linux" scheme="https://666wxy666.github.io/tags/Linux/"/>
    
      <category term="实战" scheme="https://666wxy666.github.io/tags/%E5%AE%9E%E6%88%98/"/>
    
      <category term="正则表达式" scheme="https://666wxy666.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hello Blog</title>
    <link href="https://666wxy666.github.io/2020/03/19/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://666wxy666.github.io/2020/03/19/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-03-19T03:08:51.637Z</published>
    <updated>2020-03-31T12:21:28.836Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="p center large">HELLO BLOG</p><p>欢迎来到我的博客，这是我的第一篇博客测试文章。</p><a id="more"></a><p>如果有什么问题，欢迎到我的Github提问我。</p>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;p center large&quot;&gt;HELLO BLOG&lt;/p&gt;&lt;p&gt;欢迎来到我的博客，这是我的第一篇博客测试文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="https://666wxy666.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="first" scheme="https://666wxy666.github.io/tags/first/"/>
    
  </entry>
  
</feed>
